Index: Report/report.tex
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>%! Author = Miszka and Tamarka\r\n%! Date = 10.03.2022\r\n\r\n% Preamble\r\n\\documentclass[11pt]{amsart}\r\n\r\n% Packages\r\n\\usepackage{float}\r\n\\usepackage[T1]{fontenc}\r\n\\usepackage{geometry}\r\n\\usepackage{parskip}\r\n\\usepackage{amsmath}\r\n\\usepackage{amsfonts}\r\n\\usepackage{amsthm}\r\n\\usepackage{amssymb}\r\n\\usepackage{titling}\r\n%\\usepackage{itemize}\r\n\\usepackage{enumerate}\r\n\\usepackage{multirow}\r\n\\usepackage{graphics}\r\n\\usepackage{graphicx}\r\n\\usepackage{caption}\r\n\\usepackage{array}\r\n\\usepackage{xcolor}\r\n\\usepackage{subcaption}\r\n\r\n\r\n\\graphicspath{ {./fig/} }\r\n\r\n\r\n%\\setlength{\\droptitle}{-2cm}\r\n%\\newgeometry{tmargin=1.9cm, bmargin=1.9cm, lmargin=1.7cm, rmargin=1.7cm}\r\n\r\n\\DeclareMathOperator*{\\argmin}{arg\\,min}\r\n\r\n\\newcommand{\\tami}[1]{{\\textcolor{magenta}{#1}}}\r\n\\newcommand{\\domi}[1]{{\\textcolor{green}{#1}}}\r\n\r\n\\author{Tamara Frączek, Dominik Mika}\r\n\\title{Methods of classification and dimensionality reduction - Report 1}\r\n\\date{\\today}\r\n\r\n% Document\r\n\\begin{document}\r\n\\maketitle\r\n\r\n\r\n\\section{Introduction}\r\n\r\n\\subsection*{Statement of the problem}\r\n\r\nIn this task we have to create a movie recommender system for our users.\r\n\\domi{We have users who rated some movies}.\r\nOf course, not every user rated every movie and it is our task to fill those gaps.\r\nSo if one user hasn't seen one movie, we want to predict how he would like it.\r\n\r\n\r\n\r\n%some movies and some information about how our users rate our movies.\r\n%Since, of course, not every user rated every movie, we want to predict how they would like the movies from our list.\r\n\r\n%We have the data containing information how users rate some movies.\r\n%Our task is to create a recommender system, so having only some data we want to predict all ratings.\r\n\r\nFor this purpose we build few algorithms using different methods of predicting.\r\n%These methods are described in ...\r\nOf course different methods will give us different results (errors).\r\nOur task is to tune parameters of those methods and try to get the best possible ratings prediction.\r\n\r\n\r\n\r\n\\subsection*{Description of methods}\r\n\r\nIn this problem, we use different methods which are subset of PCA methods. They are often used for dimensionality reduction and matrix factorization.\r\n\r\n\\subsubsection*{SVD1}\r\n\r\nThis method gets a $n \\times d$ dimensional matrix $Z$ and approximate it by a different matrix $\\tilde{Z}$.\r\nSince we want somehow $\\tilde{Z}$ to maintain only ''the most important'' information from $Z$, then the rank of $\\tilde{Z}$ is to be much smaller than rank of $Z$.\r\nPrecisely, we want to find matrix $\\tilde{Z}_r$ of rank $r$ ($r < rank(Z)$ and $r$ is a parameter), so that $\\|Z - \\tilde{Z}_r\\|$ is small.\r\n\r\nUsing SVD decomposition $Z = U \\Lambda^{\\frac{1}{2}} V^T$ we construct $\\tilde{Z}$ as\r\n\\[\\tilde{Z}_r = U_r \\Lambda_r^{\\frac{1}{2}}V_r^T,\\]\r\nwhere $\\Lambda_r$ contains $r$ biggest eigenvalues of $Z$ and $U_r$, $V_r$ contains only columns corresponding to those eigenvalues.\r\n\r\n\\subsubsection*{SVD2}\r\n\r\nIt is an iterative method.\r\nWe perform SVD1 on matrix $Z$, then on the result of first SVD1 and so on.\r\nThe algorithm can be stopped after a fixed number of iterations or some stop condition can be established.\r\n\r\n\r\n\\subsubsection*{NMF}\r\n\r\nSimilarly as in SVD1 the method obtain a $n \\times d$ dimensional matrix $Z$ and approximate it by $\\tilde{Z}$.\r\nThis time $\\tilde{Z}$ is constructed as $\\tilde{Z}_r = W_r H_r $, where $W_r$ and $H_r$ are matrices with non-negative elements ($W_r$ has $r$ columns and $H_r$ has $r$ rows).\r\nPrecisely, we look for such $W_r$ and $H_r$ that $\\|Z - W_r H_r \\|^2$ is the smallest, where $\\|A\\|^2 = \\sum_{i, j} A_{ij}^2$.\r\n\r\n\\subsubsection*{SGD}\r\n\r\nThis method, similarly as previous ones want to estimate matrix $Z$ with a product of matrices\r\n$W$ and $H$, but not necessarily obtaining the whole matrix $Z$.\r\n\r\nLet's assume that we have only some values of $z_{ij}$ and let call those pairs $(i,j)$ where we know the value of $Z$ as $I$.\r\nWe look for\r\n$$\\argmin_{W, H} \\sum_{(i,j)\\in I} (z_{ij} - w_i^T h_j)^2 + \\lambda(\\|w_i^T\\|^2 + \\|h_j\\|^2),$$\r\nwhere $h_j$ is $j$-th column of $h$, $w_i^T$ is $i$-th row of $W$ and $\\lambda > 0$ is a parameter.\r\nSo roughly speaking we look for $W$ and $H$ such that $Z \\approx WH$ for elements known in $Z$, but also we want $W$ and $H$ to have quite small values (it gives us the part of sum with parameter $\\lambda$).\r\n\r\n\\tami{opis metody...}\r\n\r\n\\section{Implementation}\r\n\r\n\\subsection*{Description of the data}\r\n\r\nOur data contains information 100837 ratings - exactly 610 users rated 9724 movies.\r\nThe columns are: \\textsf{userId} (integer), \\textsf{movieId} (integer) and \\textsf{rating} (integer), where \\textsf{userId} is a unique user id and \\textsf{movieId} is a unique movie id.\r\n\r\n\r\nWe keep this data in two-dimensional matrix of size $n \\times d$ where $n$ is the number of users and $d$ is the number of movies.\r\nIn element $(i,j)$ we put the rate of the user $i$ of the movie $j$.\r\nIf the user $i$ haven't rated the movie $j$ we leave the element empty.\r\n\r\n\r\n\\subsection*{Performing methods}\r\n\r\n\\tami{??tutaj jakaś intuicja po co dzielić dane??}\r\n\r\nSo to be able to evaluate the quality of the programs we split our data to two parts: train set and test set.\r\nThe train set is used to build the programs.\r\nAnd the test set is used to evaluate how our programs work.\r\n\r\n\r\nTo give our programs enough information about every user we split the data so that the train set contain 90\\% of ratings of each user (and the test set the remaining ones).\r\n\\tami{tutaj coś o tym, że będziemy to powtarzać??}\r\n\r\nLet call the matrix containing the data from the train set as $\\boldsymbol{Z}$ and the matrix containing the data from the test set as $\\boldsymbol{T}$.\r\n\r\n\r\n\\subsection*{Quality of the system}\r\n\r\nAssume that our algorithm return a matrix $\\boldsymbol{Z}^{'}$.\r\nThen the quality of our programs is computed as \\textbf{root-mean square error}\r\n\\[\\textsf{RMSE} =\r\n\\sqrt{\\frac{1}{|\\mathcal{T}|} \\sum_{(u,m) \\in \\mathcal{T}} \\left(\\boldsymbol{Z}^{'}[u,m] - \\boldsymbol{T}[u,m] \\right)^2}\\]\r\nwhere $\\mathcal{T}$ contains pairs $(u,m)$ from test set.\r\n\r\n\r\n\\subsection*{Imputing the missing data}\r\n\r\nSince three of our methods (SVD1, SVD2 and NMF) are given a full matrix $\\boldsymbol{Z}$ then they need the missing data to be imputed before performing.\r\n\r\nWe decided to impute the data in 4 different ways:\r\n\\begin{itemize}\r\n    \\item putting 0 everywhere,\r\n    \\item putting global mean everywhere,\r\n    \\item putting row mean,\r\n    \\item putting weighted row and column mean ($\\alpha \\cdot \\text{\\textsf{col\\_mean}} + (1-\\alpha) \\cdot \\text{\\textsf{row\\_mean}}$, where $\\alpha$ is a parameter).\r\n\\end{itemize}\r\n\r\n\\tami{tutaj przemyślenia na temat tego czemu niektóre metody działają lepiej i dlaczego}\r\n\r\n\\section{Parameters tuning and results}\r\n\r\n\\tami{coś o tym, że metody pozostawiaja trochę dowolności?}\r\n\r\nBefore performing our methods and obtaining results we have to set some parameters.\r\n\r\nFirst of all, all the methods need a parameter $r$, which is the rank of matrices in $Z$ decomposition.\r\nSGD needs also learning rate and $\\lambda$.\r\nAnd iteration methods need maximum of possible iterations or a stop condition.\r\n\r\nWhat's more, for all of our methods we want to choose optimal $\\alpha$ in the last method of imputing data.\r\n\r\n\r\n\r\n\\subsection*{SVD1}\r\n\r\n\\tami{co tu napisać}\r\n\r\n\\tami{napisać co to jest to weighted}\r\n\r\nAt the beginning we consider only \\tami{...}\r\n\r\nBelow, we present a graph showing dependence of RMSE on $r$.\r\n\r\n\\begin{figure}[H]\r\n\\centering\r\n\\begin{minipage}{.5\\textwidth}\r\n  \\centering\r\n  \\includegraphics[scale=0.43]{svd1_1}\r\n%  \\captionof{figure}{A figure}\r\n%  \\label{fig:test1}\r\n\\end{minipage}%\r\n\\begin{minipage}{.5\\textwidth}\r\n  \\centering\r\n  \\includegraphics[scale=0.43]{svd1_2}\r\n%  \\captionof{figure}{Another figure}\r\n%  \\label{fig:test2}\r\n\\end{minipage}\r\n\\end{figure}\r\n\r\nAlso we present a table with the lowest RMSE for every imputation method and the parameter $r$ that gave it.\r\n\\begin{table}[H]\r\n\\begin{tabular}{c|ccccc}\r\n& 0 & column means & global mean & weighted means & row means \\\\\r\n\\hline\r\n$r$ & 7 & 13 & 15 & 9 & 6 \\\\\r\nRMSE & 2.866 & 0.946 & 0.987 & 0.877 & 0.904 \\\\\r\n\\end{tabular}\r\n\\end{table}\r\n%wnioski, że ma wpływ jak uzupełniamy\r\n%jakieś wnioski, te zera beznadziejne\r\n%że weighted wypadają najlepiej i chcemy to alfa dobrać optymalnie\r\n\r\nFirst of all, we observe that as we expected the imputation method does matter.\r\nIt is most clearly seen looking at RMSE of data filled with zeros, that for the best $r$ is around $2.9$.\r\nOther methods also differ a lot.\r\nThe lowest RMSE obtain the data filled with weighted data.\r\nThat's why we may suspect that optimizing $\\alpha$ can give even better results.\r\n\r\n%wprowadzenie, że dobieramy alfa\r\n%no i ten rysunek wyżej nam pozwala obciąć r\r\n%że robimy minimalizację po dwóch parametrach\r\n\r\nTo get optimal result we perform optimization with respect to two parameters: $\\alpha$ and $r$.\r\nAs we can see on the picture above only $r$ between $0$ and $50$ give some reasonable results, so we consider only those (we could use all $r$, but it is time consuming).\r\nBelow, we present graph showing dependence of RMSE on $\\alpha$ and $r$ for data \\tami{...}\r\n\r\n\\begin{figure}[H]\r\n\\includegraphics[scale=0.45]{fig/svd1_r_w}\r\n\\label{fig:figure}\r\n\\end{figure}\r\n\r\nBelow we present also table with \\tami{...} lowest RMSE and pairs $(\\alpha, r)$ that gave those.\r\n\\begin{table}[H]\r\n\\begin{tabular}{cc|c}\r\n\\toprule\r\n $\\alpha$ &  $r$ &     RMSE \\\\\r\n\\midrule\r\n\\hline\r\n       0.39 & 10 & 0.873987 \\\\\r\n       0.38 & 10 & 0.874244 \\\\\r\n       0.42 & 10 & 0.874274 \\\\\r\n       0.36 & 10 & 0.874449 \\\\\r\n       0.39 & 11 & 0.874469 \\\\\r\n\\bottomrule\r\n\\end{tabular}\r\n\\end{table}\r\n\r\nAs we can see 10 seems to be the best $r$ and 0.39 seems to be the best $\\alpha$.\r\nAlso in all those results $(\\alpha, r)$ are close to them.\r\n\\tami{So $\\alpha = 0.39$ and $r = 10$ are parameters that we use to perform this method further in the report.}\r\n\r\nSince in columns we keep indexes of movies, it means that our filled data take a bit more information from user ratings mean than from the movie ratings mean.\r\nThat is probably logical \\tami{...}\r\n\r\nTo conclude this subsection we present our best results obtained using these methods.\r\n\\tami{which means what}\r\n\r\n\\tami{tabelka z najlepszymi wynikami}\r\n\r\n\r\n\\subsection*{SVD2}\r\nIn this case we want to proceed as in SVD1 case.\r\n\r\n\\tami{??In SVD2 we make a correction -- czy to tu}\r\n\r\nstop condition\r\n\r\n\r\n\r\n\\begin{figure}[H]\r\n\\centering\r\n\\begin{minipage}{.5\\textwidth}\r\n  \\centering\r\n  \\includegraphics[scale=0.43]{svd2_1}\r\n%  \\captionof{figure}{A figure}\r\n%  \\label{fig:test1}\r\n\\end{minipage}%\r\n\\begin{minipage}{.5\\textwidth}\r\n  \\centering\r\n  \\includegraphics[scale=0.43]{svd2_2}\r\n%  \\captionof{figure}{Another figure}\r\n%  \\label{fig:test2}\r\n\\end{minipage}\r\n\\end{figure}\r\n\r\n\\begin{table}[H]\r\n\\begin{tabular}{c|ccccc}\r\n& 0 & column means & global mean & weighted means & row means \\\\\r\n\\hline\r\n$r$ & 19 & 10 & 6 & 13 & 7 \\\\\r\nRMSE & 2.779 & 0.942 & 0.942 & 0.875 & 0.878 \\\\\r\n\\end{tabular}\r\n\\end{table}\r\n\r\n\\begin{figure}[H]\r\n\\includegraphics[scale = 0.45]{svd2_r_w}\r\n\\end{figure}\r\n\r\n\\begin{table}[H]\r\n\\begin{tabular}{rrr}\r\n\\toprule\r\n$\\alpha$ &  $r$ &     RMSE \\\\\r\n\\midrule\r\n\\hline\r\n       0.25 &  8 & 0.867393 \\\\\r\n       0.26 &  8 & 0.867397 \\\\\r\n       0.24 &  8 & 0.867402 \\\\\r\n       0.27 &  8 & 0.867410 \\\\\r\n       0.28 &  8 & 0.867494 \\\\\r\n\\bottomrule\r\n\\end{tabular}\r\n\\end{table}\r\n\r\n\\subsection*{NMF}\r\n\r\nIn this case since we have only $r$ and $\\alpha$ to find, we proceed in exactly the same way as in the case of SVD.\r\nSo, firstly we present a graph showing dependence of RMSE on $r$. \\tami{in some cases...}\r\n\r\n\\begin{figure}[H]\r\n\\centering\r\n\\begin{minipage}{.5\\textwidth}\r\n  \\centering\r\n  \\includegraphics[scale=0.43]{nmf_1}\r\n%  \\captionof{figure}{A figure}\r\n%  \\label{fig:test1}\r\n\\end{minipage}%\r\n\\begin{minipage}{.5\\textwidth}\r\n  \\centering\r\n  \\includegraphics[scale=0.43]{nmf_2}\r\n%  \\captionof{figure}{Another figure}\r\n%  \\label{fig:test2}\r\n\\end{minipage}\r\n\\end{figure}\r\n\r\nComparing this graph to the graph for SVD we can see that \\tami{tutaj o tym, że jest bardziej takie postrzępione}\r\n\r\nBelow we also present a table with the lowest RMSE for every imputation method and the parameter $r$ that gave it.\r\n\r\n\\begin{table}[H]\r\n\\begin{tabular}{c|ccccc}\r\n& 0 & column means & global mean & weighted means & row means \\\\\r\n\\hline\r\n$r$ & 6 & 47 & 30 & 37 & 15\\\\\r\nRMSE & 2.900 & 0.946 & 0.987 & 0.877 & 0.905 \\\\\r\n\\end{tabular}\r\n\\end{table}\r\n\r\n\\begin{table}[H]\r\n\\begin{tabular}{cc|c}\r\n\\toprule\r\n$\\alpha$ &  $r$ &     RMSE \\\\\r\n\\midrule\r\n\\hline\r\n       0.40 & 37 & 0.874794 \\\\\r\n       0.41 & 37 & 0.874817 \\\\\r\n       0.39 & 18 & 0.874841 \\\\\r\n       0.39 & 37 & 0.874848 \\\\\r\n       0.40 & 18 & 0.874849 \\\\\r\n\\bottomrule\r\n\\end{tabular}\r\n\\end{table}\r\n\r\nAs we can see the parameters $r$ are in general bigger than in previous cases.\r\n\\tami{czy będą bardziej porostrzelane}\r\n\r\nNow we pefrorm the optimization with respect to $\\alpha$ and $r$ and present a graph showing the results.\r\n\r\n\\begin{figure}[H]\r\n\\includegraphics[scale = 0.45]{nmf_r_w}\r\n\\end{figure}\r\n\r\n\\tami{tabelka z najlepszymi r i alpha}\r\n\\tami{jakie r i alpha wybieramy}\r\n\r\n\\tami{tabelka z najlepszymi wynikami}\r\n\r\n\\subsection*{SGD}\r\n\r\n\\begin{figure}[H]\r\n\\centering\r\n\\begin{minipage}{.5\\textwidth}\r\n  \\centering\r\n  \\includegraphics[scale=0.43]{svd1_1}\r\n%  \\captionof{figure}{A figure}\r\n%  \\label{fig:test1}\r\n\\end{minipage}%\r\n\\begin{minipage}{.5\\textwidth}\r\n  \\centering\r\n  \\includegraphics[scale=0.43]{svd1_2}\r\n%  \\captionof{figure}{Another figure}\r\n%  \\label{fig:test2}\r\n\\end{minipage}\r\n\\end{figure}\r\n\r\n\r\n\r\n\\section{}\r\n\r\n\\section{Conclusions}\r\n\r\n\r\n\r\n\\end{document}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Report/report.tex b/Report/report.tex
--- a/Report/report.tex	(revision cca69d005446496a4a742e962b2259b3813e93f9)
+++ b/Report/report.tex	(date 1649620328543)
@@ -103,11 +103,21 @@
 
 Let's assume that we have only some values of $z_{ij}$ and let call those pairs $(i,j)$ where we know the value of $Z$ as $I$.
 We look for
-$$\argmin_{W, H} \sum_{(i,j)\in I} (z_{ij} - w_i^T h_j)^2 + \lambda(\|w_i^T\|^2 + \|h_j\|^2),$$
+\[\argmin_{W, H} \sum_{(i,j)\in I} (z_{ij} - w_i^T h_j)^2 + \lambda(\|w_i^T\|^2 + \|h_j\|^2),\]
 where $h_j$ is $j$-th column of $h$, $w_i^T$ is $i$-th row of $W$ and $\lambda > 0$ is a parameter.
 So roughly speaking we look for $W$ and $H$ such that $Z \approx WH$ for elements known in $Z$, but also we want $W$ and $H$ to have quite small values (it gives us the part of sum with parameter $\lambda$).
 
-\tami{opis metody...}
+It is an iterative method and work this way: set some $W$ and $H$,
+\begin{enumerate}
+    \item sample one pair $(i,j)$ from $I$,
+    \item let $\tilde{w}_i^T := w_i^T - \eta \cdot \left(2(z_{ij} - w_i^T h_j) h_j + 2 \lambda w_i^T \right)$ and $\tilde{h}_j := h_j - \eta \cdot \left(2(z_{ij} - w_i^T  h_{j}) w_i^T + 2 \lambda h_j \right)$,
+    \item the rests of matrices $W$ and $H$ stay unchanged, so $\tilde{w}_k^T = w_k^T$ for $k \neq i$ and $\tilde{h}_l = h_l$ for $l \neq j$,
+    \item take $W = \tilde{W}$ and $H = \tilde{H}$,
+\end{enumerate}
+and repeat.
+
+$\eta$ is a parameter that tells us how big steps we want to do.
+The method stops after a certain number of steps, or it can be given a stop condition.
 
 \section{Implementation}
 
@@ -136,6 +146,7 @@
 
 Let call the matrix containing the data from the train set as $\boldsymbol{Z}$ and the matrix containing the data from the test set as $\boldsymbol{T}$.
 
+\tami{??In SVD2 we make a correction -- czy to tu}
 
 \subsection*{Quality of the system}
 
@@ -150,192 +161,254 @@
 
 Since three of our methods (SVD1, SVD2 and NMF) are given a full matrix $\boldsymbol{Z}$ then they need the missing data to be imputed before performing.
 
-We decided to impute the data in 4 different ways:
+We decided to impute the data in 5 different ways, we replace missing values with:
 \begin{itemize}
-    \item putting 0 everywhere,
-    \item putting global mean everywhere,
-    \item putting row mean,
-    \item putting weighted row and column mean ($\alpha \cdot \text{\textsf{col\_mean}} + (1-\alpha) \cdot \text{\textsf{row\_mean}}$, where $\alpha$ is a parameter).
+    \item 0 ,
+    \item global mean,
+    \item column means,
+    \item row means,
+    \item weighted row and column mean ($\alpha \cdot \text{\textsf{col\_mean}} + (1-\alpha) \cdot \text{\textsf{row\_mean}}$, where $\alpha>0$ is a parameter).
 \end{itemize}
 
+We may expect that the closer to reality we impute the missing data, the better results we will obtain.
 \tami{tutaj przemyślenia na temat tego czemu niektóre metody działają lepiej i dlaczego}
 
+
+
+
+
+
 \section{Parameters tuning and results}
 
-\tami{coś o tym, że metody pozostawiaja trochę dowolności?}
-
 Before performing our methods and obtaining results we have to set some parameters.
 
 First of all, all the methods need a parameter $r$, which is the rank of matrices in $Z$ decomposition.
 SGD needs also learning rate and $\lambda$.
 And iteration methods need maximum of possible iterations or a stop condition.
 
-What's more, for all of our methods we want to choose optimal $\alpha$ in the last method of imputing data.
+What's more, for all of our methods we want to choose optimal $\alpha$ in the last imputation method data.
 
 
 
 \subsection*{SVD1}
+\subsubsection*{Optimizing $r$}
+For a start, let's consider only imputation methods that don't need estimation of $\alpha$, so:
+\begin{itemize}
+    \item putting 0 everywhere,
+    \item putting global mean everywhere,
+    \item putting column means,
+    \item putting row means,
+    \item putting weighted row and column mean $\frac{1}{2} \cdot \text{\textsf{col\_mean}} + \frac{1}{2} \cdot \text{\textsf{row\_mean}}$.
+\end{itemize}
+The last method is the weighted method for $\alpha = \frac{1}{2}$.
+The imputation methods mentioned above will be called \textit{basic} in this report.
 
-\tami{co tu napisać}
+For these methods we only need to find optimal $r$.
+So for every basic imputation method and for every $r$ from 1 to 100 we perform SVD1.
+Below, we present a graph showing results.
 
-\tami{napisać co to jest to weighted}
 
-At the beginning we consider only \tami{...}
-
-Below, we present a graph showing dependence of RMSE on $r$.
 
 \begin{figure}[H]
 \centering
-\begin{minipage}{.5\textwidth}
+\begin{minipage}{.63\textwidth}
   \centering
-  \includegraphics[scale=0.43]{svd1_1}
+  \includegraphics[width=\textwidth]{svd1_1}
 %  \captionof{figure}{A figure}
 %  \label{fig:test1}
 \end{minipage}%
-\begin{minipage}{.5\textwidth}
+\begin{minipage}{.4\textwidth}
   \centering
-  \includegraphics[scale=0.43]{svd1_2}
+  \includegraphics[width=\textwidth]{svd1_2}
 %  \captionof{figure}{Another figure}
 %  \label{fig:test2}
 \end{minipage}
+\caption{RMSE of SVD1 for basic imputation methods and $r = 1, \dots, 100$}
 \end{figure}
 
-Also we present a table with the lowest RMSE for every imputation method and the parameter $r$ that gave it.
+Let's denote that we perform it for only one split of the data into train and test set.
+This results can be different if we take different split.
+
+\tami{jakieś wnioski}
+
+Of course we look for the lowest RMSE obtained for each imputation method and the optimal $r$.
+So below we present a table containing these information.
 \begin{table}[H]
 \begin{tabular}{c|ccccc}
 & 0 & column means & global mean & weighted means & row means \\
 \hline
 $r$ & 7 & 13 & 15 & 9 & 6 \\
-RMSE & 2.866 & 0.946 & 0.987 & 0.877 & 0.904 \\
+RMSE & 2.8660 & 0.9458 & 0.9870 & 0.8767 & 0.9043 \\
 \end{tabular}
+\caption{The lowest RMSE and optimal $r$ for SVD1 with basic imputation methods}
 \end{table}
 %wnioski, że ma wpływ jak uzupełniamy
 %jakieś wnioski, te zera beznadziejne
 %że weighted wypadają najlepiej i chcemy to alfa dobrać optymalnie
 
-First of all, we observe that as we expected the imputation method does matter.
-It is most clearly seen looking at RMSE of data filled with zeros, that for the best $r$ is around $2.9$.
-Other methods also differ a lot.
-The lowest RMSE obtain the data filled with weighted data.
+First of all, we observe that as we expected the choice of the imputation method does matter.
+It can be most clearly seen on an example of data filled with zeros.
+For the best $r$ RMSE there is around $2.9$ that is, it is about 3 times larger than for other imputation methods.
+Other methods also differ.
+The lowest RMSE is obtained for the data filled with weighted data.
+But the result for data filled with row means is also quite good.
 That's why we may suspect that optimizing $\alpha$ can give even better results.
 
 %wprowadzenie, że dobieramy alfa
 %no i ten rysunek wyżej nam pozwala obciąć r
 %że robimy minimalizację po dwóch parametrach
 
+\subsubsection*{Optimizing $\alpha$}
+
 To get optimal result we perform optimization with respect to two parameters: $\alpha$ and $r$.
 As we can see on the picture above only $r$ between $0$ and $50$ give some reasonable results, so we consider only those (we could use all $r$, but it is time consuming).
-Below, we present graph showing dependence of RMSE on $\alpha$ and $r$ for data \tami{...}
+Below, we present graph showing results of optimization.
 
 \begin{figure}[H]
-\includegraphics[scale=0.45]{fig/svd1_r_w}
+\includegraphics[scale=0.6]{fig/svd1_r_w2}
 \label{fig:figure}
+\caption{RMSE of SVD1 for weigthed imputation method for different $\alpha$ and $r$}
 \end{figure}
 
-Below we present also table with \tami{...} lowest RMSE and pairs $(\alpha, r)$ that gave those.
+Below we present also table with 5 lowest RMSE and pairs $(\alpha, r)$ that gave them.
 \begin{table}[H]
 \begin{tabular}{cc|c}
-\toprule
  $\alpha$ &  $r$ &     RMSE \\
-\midrule
 \hline
-       0.39 & 10 & 0.873987 \\
-       0.38 & 10 & 0.874244 \\
-       0.42 & 10 & 0.874274 \\
-       0.36 & 10 & 0.874449 \\
-       0.39 & 11 & 0.874469 \\
-\bottomrule
+       0.39 & 10 & 0.8740 \\
+       0.38 & 10 & 0.8742 \\
+       0.42 & 10 & 0.8743 \\
+       0.36 & 10 & 0.8744 \\
+       0.39 & 11 & 0.8745 \\
 \end{tabular}
+\caption{5 lowest RMSE of SVD1 for weigthed imputation method and ($\alpha$, $r$) that gave them}
 \end{table}
+As we can see the pair $(0.39, 10)$ seems to be optimal in this case.
+All other pairs are close to it.
+\tami{może coś o tych RMSE}
+
+All results above are obtained for only one data split into train and test set.
+To find the best parameters in our method we have to average those parameters over different splits.
+So we considered 20 different splits and the results were as follows
+\begin{itemize}
+    \item mean value of the best $(\alpha, r)$ is $(0.4055, 12.2)$,
+    \item median of the best $(\alpha, r)$ is $(0.41, 13)$,
+    \item in 15 of 20 cases the best pair is $(0.41, 13)$.
+\end{itemize}
+\textbf{So $\alpha = 0.41$ and $r = 13$ are the parameters we use in our method SVD1 with weighted means as the imputation method.}
 
-As we can see 10 seems to be the best $r$ and 0.39 seems to be the best $\alpha$.
-Also in all those results $(\alpha, r)$ are close to them.
-\tami{So $\alpha = 0.39$ and $r = 10$ are parameters that we use to perform this method further in the report.}
 
-Since in columns we keep indexes of movies, it means that our filled data take a bit more information from user ratings mean than from the movie ratings mean.
-That is probably logical \tami{...}
 
-To conclude this subsection we present our best results obtained using these methods.
-\tami{which means what}
 
-\tami{tabelka z najlepszymi wynikami}
+
 
 
 \subsection*{SVD2}
 In this case we want to proceed as in SVD1 case.
-
-\tami{??In SVD2 we make a correction -- czy to tu}
+But before we start we have to choose some stop condition for SVD2.
 
-stop condition
+\subsubsection*{Stop condition}
+\begin{figure}[H]
+    \includegraphics[scale=0.55]{svd2_stop2}
+    \caption{\tami{tutaj}}
+\end{figure}
 
-
-
+\subsubsection*{Optimizing $r$}
+After choosing the stop condition we can proceed exactly as in SVD1 case.
+So first of all we present a graph showing dependence of RMSE on $r$ and on the imputation method for basic imputation methods.
 \begin{figure}[H]
 \centering
-\begin{minipage}{.5\textwidth}
+\begin{minipage}{.63\textwidth}
   \centering
-  \includegraphics[scale=0.43]{svd2_1}
+  \includegraphics[width=\textwidth]{svd2_1}
 %  \captionof{figure}{A figure}
 %  \label{fig:test1}
 \end{minipage}%
-\begin{minipage}{.5\textwidth}
+\begin{minipage}{.4\textwidth}
   \centering
-  \includegraphics[scale=0.43]{svd2_2}
+  \includegraphics[width=\textwidth]{svd2_2}
 %  \captionof{figure}{Another figure}
 %  \label{fig:test2}
 \end{minipage}
+\caption{RMSE of SVD2 for basic imputation methods and $r = 1, \dots, 100$}
 \end{figure}
 
+\tami{tutaj, że te wykresy są takie bardziej skaczące, ale generalnie trendy są te same}
+
+Now we present a table showing the best $r$ and RMSE for every imputation method.
 \begin{table}[H]
 \begin{tabular}{c|ccccc}
 & 0 & column means & global mean & weighted means & row means \\
 \hline
 $r$ & 19 & 10 & 6 & 13 & 7 \\
-RMSE & 2.779 & 0.942 & 0.942 & 0.875 & 0.878 \\
+RMSE & 2.7789 & 0.9420 & 0.9425 & 0.8749 & 0.8778 \\
 \end{tabular}
+\caption{The lowest RMSE and optimal $r$ for SVD2 with basic imputation methods}
 \end{table}
 
+Firstly, we can observe that SVD2 improved the results of SVD1.
+Every result is smaller, but order which methods are better or worse didn't change, maybe differences are a bit smaller.
+
+We can observe again that only $r$ between 0 and 50 gives reasonable results.
+Although the best $r$ chosen by SVD2 in all cases differ a lot from those chosen by SVD1.
+
+\subsubsection*{Optimizing $\alpha$}
+Moving on to the weighted imputation method, we present a graph showing the results of optimization with respect to $\alpha$ and $r$.
 \begin{figure}[H]
-\includegraphics[scale = 0.45]{svd2_r_w}
+\includegraphics[scale = 0.6]{svd2_r_w2}
+\caption{RMSE of SVD2 for weigthed imputation method for different $\alpha$ and $r$}
 \end{figure}
-
+\tami{It may look very similar to analogous graph for SVD1, but results actually differ a bit and it can be seen in following table.}
 \begin{table}[H]
-\begin{tabular}{rrr}
-\toprule
+\begin{tabular}{cc|c}
 $\alpha$ &  $r$ &     RMSE \\
-\midrule
 \hline
-       0.25 &  8 & 0.867393 \\
-       0.26 &  8 & 0.867397 \\
-       0.24 &  8 & 0.867402 \\
-       0.27 &  8 & 0.867410 \\
-       0.28 &  8 & 0.867494 \\
-\bottomrule
+       0.25 &  8 & 0.8674 \\
+       0.26 &  8 & 0.8674 \\
+       0.24 &  8 & 0.8674 \\
+       0.27 &  8 & 0.8674 \\
+       0.28 &  8 & 0.8675 \\
 \end{tabular}
+\caption{5 lowest RMSE of SVD2 for weigthed imputation method and ($\alpha$, $r$) that gave them}
 \end{table}
+This time method did the best 5 results for the same $r$.
+Also in this case, the result are closer.
+It may suggest that this method is even more stable.
+\domi{It is intuitive for iterative method because they usually converge to some specific model and that is why we get clear results.}
+
+After repeating this optimization for 20 different splits we get that:
+\begin{itemize}
+    \item the mean value of the best $(\alpha, r)$ is $(0.259, 8)$,
+    \item the median of the best $(\alpha, r)$ is $(0.255, 8)$.
+\end{itemize}
+\textbf{So $\alpha = 0.26$ and $r=8$ are parameters we use in our SVD2 with weighted means as the imputation method.}
 
 \subsection*{NMF}
-
 In this case since we have only $r$ and $\alpha$ to find, we proceed in exactly the same way as in the case of SVD.
-So, firstly we present a graph showing dependence of RMSE on $r$. \tami{in some cases...}
+
+\subsubsection*{Optimizing $r$}
+So firstly we present a graph showing dependence of RMSE on $r$ and on the imputation method for basic imputation methods.
 
 \begin{figure}[H]
 \centering
-\begin{minipage}{.5\textwidth}
+\begin{minipage}{.63\textwidth}
   \centering
-  \includegraphics[scale=0.43]{nmf_1}
+  \includegraphics[width=\textwidth]{nmf_1}
 %  \captionof{figure}{A figure}
 %  \label{fig:test1}
 \end{minipage}%
-\begin{minipage}{.5\textwidth}
+\begin{minipage}{.4\textwidth}
   \centering
-  \includegraphics[scale=0.43]{nmf_2}
+  \includegraphics[width=\textwidth]{nmf_2}
 %  \captionof{figure}{Another figure}
 %  \label{fig:test2}
 \end{minipage}
+\caption{RMSE of NMF for basic imputation methods and $r = 1, \dots, 100$}
 \end{figure}
 
-Comparing this graph to the graph for SVD we can see that \tami{tutaj o tym, że jest bardziej takie postrzępione}
+Comparing this graph to the graph for SVD we can see that it oscillates a lot, which means that for similar $r$ it gives quite different RMSE.
+What's more, here it is not so obvious where to look for optimal $r$, because for instance for weighted means RMSE don't grow much with $r$. \tami{przeformułować}
+\tami{jeszcze że kolejność kto który jest podobna}
 
 Below we also present a table with the lowest RMSE for every imputation method and the parameter $r$ that gave it.
 
@@ -344,63 +417,74 @@
 & 0 & column means & global mean & weighted means & row means \\
 \hline
 $r$ & 6 & 47 & 30 & 37 & 15\\
-RMSE & 2.900 & 0.946 & 0.987 & 0.877 & 0.905 \\
+RMSE & 2.8997 & 0.9462 & 0.9870 & 0.8766 & 0.9053 \\
 \end{tabular}
+\caption{The lowest RMSE and optimal $r$ for NMF with basic imputation methods}
 \end{table}
 
+As we can see the parameters $r$ are in general bigger than in previous cases.
+The RMSEs are very similar to those obtained using SVD1.
+
+\subsubsection*{Optimizing $\alpha$}
+Now we perform the optimization with respect to $\alpha$ and $r$ and present a graph showing the results.
+
+\begin{figure}[H]
+\includegraphics[scale = 0.6]{nmf_r_w2}
+\caption{RMSE of NMF for weigthed imputation method for different $\alpha$ and $r$}
+\end{figure}
+
+Similarly as above, this graph is \tami{taki postrzępiony} looking at the axis of $r$.
+
 \begin{table}[H]
 \begin{tabular}{cc|c}
-\toprule
 $\alpha$ &  $r$ &     RMSE \\
-\midrule
 \hline
-       0.40 & 37 & 0.874794 \\
-       0.41 & 37 & 0.874817 \\
-       0.39 & 18 & 0.874841 \\
-       0.39 & 37 & 0.874848 \\
-       0.40 & 18 & 0.874849 \\
-\bottomrule
+       0.40 & 37 & 0.8748 \\
+       0.41 & 37 & 0.8748 \\
+       0.39 & 18 & 0.8748 \\
+       0.39 & 37 & 0.8748 \\
+       0.40 & 18 & 0.8748 \\
 \end{tabular}
+\caption{5 lowest RMSE of NMF for weigthed imputation method and ($\alpha$, $r$) that gave them}
 \end{table}
 
-As we can see the parameters $r$ are in general bigger than in previous cases.
-\tami{czy będą bardziej porostrzelane}
 
-Now we pefrorm the optimization with respect to $\alpha$ and $r$ and present a graph showing the results.
+After repeating this optimization for 20 different splits we get that:
+\begin{itemize}
+    \item the mean value of the best $(\alpha, r)$ is $(0.393, 32.25)$,
+    \item the median of the best $(\alpha, r)$ is $(0.39, 37)$,
+    \item 15 times the best $r$ is 37 and 5 times the best $r$ is 18.
+\end{itemize}
+\textbf{So $\alpha = 0.39$ and $r=37$ are parameters we use in our NMF with weighted means as the imputation method.}
 
-\begin{figure}[H]
-\includegraphics[scale = 0.45]{nmf_r_w}
-\end{figure}
 
-\tami{tabelka z najlepszymi r i alpha}
-\tami{jakie r i alpha wybieramy}
 
-\tami{tabelka z najlepszymi wynikami}
 
 \subsection*{SGD}
 
-\begin{figure}[H]
-\centering
-\begin{minipage}{.5\textwidth}
-  \centering
-  \includegraphics[scale=0.43]{svd1_1}
-%  \captionof{figure}{A figure}
-%  \label{fig:test1}
-\end{minipage}%
-\begin{minipage}{.5\textwidth}
-  \centering
-  \includegraphics[scale=0.43]{svd1_2}
-%  \captionof{figure}{Another figure}
-%  \label{fig:test2}
-\end{minipage}
-\end{figure}
+%\begin{figure}[H]
+%\centering
+%\begin{minipage}{.5\textwidth}
+%  \centering
+%  \includegraphics[scale=0.43]{svd1_1}
+%%  \captionof{figure}{A figure}
+%%  \label{fig:test1}
+%\end{minipage}%
+%\begin{minipage}{.5\textwidth}
+%  \centering
+%  \includegraphics[scale=0.43]{svd1_2}
+%%  \captionof{figure}{Another figure}
+%%  \label{fig:test2}
+%\end{minipage}
+%\end{figure}
 
 
 
 \section{}
 
-\section{Conclusions}
+\section{Results}
 
-
+Since in columns we keep indexes of movies, it means that our filled data take a bit more information from user ratings mean than from the movie ratings mean.
+That is probably logical \tami{...}
 
 \end{document}
\ No newline at end of file
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ProjectRootManager\" version=\"2\" project-jdk-name=\"Python 3.10 (MoCaDR_proj1)\" project-jdk-type=\"Python SDK\" />\r\n  <component name=\"RMarkdownSettings\">\r\n    <option name=\"renderProfiles\">\r\n      <map>\r\n        <entry key=\"file://$PROJECT_DIR$/Report/tescik.rmd\">\r\n          <value>\r\n            <RMarkdownRenderProfile>\r\n              <option name=\"outputDirectoryUrl\" value=\"file://$PROJECT_DIR$/Report\" />\r\n            </RMarkdownRenderProfile>\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision cca69d005446496a4a742e962b2259b3813e93f9)
+++ b/.idea/misc.xml	(date 1649604177407)
@@ -1,6 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
-  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.10 (MoCaDR_proj1)" project-jdk-type="Python SDK" />
+  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.10" project-jdk-type="Python SDK" />
   <component name="RMarkdownSettings">
     <option name="renderProfiles">
       <map>
Index: auxil/report.aux
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\\relax \r\n\\@writefile{toc}{\\contentsline {section}{\\tocsection {}{1}{Introduction}}{1}\\protected@file@percent }\r\n\\@writefile{toc}{\\contentsline {subsection}{\\tocsubsection {}{}{Statement of the problem}}{1}\\protected@file@percent }\r\n\\@writefile{toc}{\\contentsline {subsection}{\\tocsubsection {}{}{Description of methods}}{1}\\protected@file@percent }\r\n\\@writefile{toc}{\\contentsline {subsubsection}{\\tocsubsubsection {}{}{SVD1}}{1}\\protected@file@percent }\r\n\\@writefile{toc}{\\contentsline {subsubsection}{\\tocsubsubsection {}{}{SVD2}}{1}\\protected@file@percent }\r\n\\@writefile{toc}{\\contentsline {subsubsection}{\\tocsubsubsection {}{}{NMF}}{1}\\protected@file@percent }\r\n\\@writefile{toc}{\\contentsline {subsubsection}{\\tocsubsubsection {}{}{SGD}}{2}\\protected@file@percent }\r\n\\@writefile{toc}{\\contentsline {section}{\\tocsection {}{2}{Implementation}}{2}\\protected@file@percent }\r\n\\@writefile{toc}{\\contentsline {subsection}{\\tocsubsection {}{}{Description of the data}}{2}\\protected@file@percent }\r\n\\@writefile{toc}{\\contentsline {subsection}{\\tocsubsection {}{}{Performing methods}}{2}\\protected@file@percent }\r\n\\@writefile{toc}{\\contentsline {subsection}{\\tocsubsection {}{}{Quality of the system}}{2}\\protected@file@percent }\r\n\\@writefile{toc}{\\contentsline {subsection}{\\tocsubsection {}{}{Imputing the missing data}}{3}\\protected@file@percent }\r\n\\@writefile{toc}{\\contentsline {section}{\\tocsection {}{3}{Parameters tuning and results}}{3}\\protected@file@percent }\r\n\\@writefile{toc}{\\contentsline {subsection}{\\tocsubsection {}{}{SVD1}}{3}\\protected@file@percent }\r\n\\providecommand*\\caption@xref[2]{\\@setref\\relax\\@undefined{#1}}\r\n\\newlabel{fig:figure}{{\\caption@xref {fig:figure}{ on input line 232}}{4}}\r\n\\@writefile{toc}{\\contentsline {subsection}{\\tocsubsection {}{}{SVD2}}{5}\\protected@file@percent }\r\n\\@writefile{toc}{\\contentsline {subsection}{\\tocsubsection {}{}{NMF}}{6}\\protected@file@percent }\r\n\\newlabel{tocindent-1}{0pt}\r\n\\newlabel{tocindent0}{15.98535pt}\r\n\\newlabel{tocindent1}{19.35791pt}\r\n\\newlabel{tocindent2}{31.97072pt}\r\n\\newlabel{tocindent3}{0pt}\r\n\\@writefile{toc}{\\contentsline {subsection}{\\tocsubsection {}{}{SGD}}{8}\\protected@file@percent }\r\n\\@writefile{toc}{\\contentsline {section}{\\tocsection {}{4}{}}{9}\\protected@file@percent }\r\n\\@writefile{toc}{\\contentsline {section}{\\tocsection {}{5}{Conclusions}}{9}\\protected@file@percent }\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/auxil/report.aux b/auxil/report.aux
--- a/auxil/report.aux	(revision cca69d005446496a4a742e962b2259b3813e93f9)
+++ b/auxil/report.aux	(date 1649620331359)
@@ -9,19 +9,39 @@
 \@writefile{toc}{\contentsline {section}{\tocsection {}{2}{Implementation}}{2}\protected@file@percent }
 \@writefile{toc}{\contentsline {subsection}{\tocsubsection {}{}{Description of the data}}{2}\protected@file@percent }
 \@writefile{toc}{\contentsline {subsection}{\tocsubsection {}{}{Performing methods}}{2}\protected@file@percent }
-\@writefile{toc}{\contentsline {subsection}{\tocsubsection {}{}{Quality of the system}}{2}\protected@file@percent }
+\@writefile{toc}{\contentsline {subsection}{\tocsubsection {}{}{Quality of the system}}{3}\protected@file@percent }
 \@writefile{toc}{\contentsline {subsection}{\tocsubsection {}{}{Imputing the missing data}}{3}\protected@file@percent }
 \@writefile{toc}{\contentsline {section}{\tocsection {}{3}{Parameters tuning and results}}{3}\protected@file@percent }
 \@writefile{toc}{\contentsline {subsection}{\tocsubsection {}{}{SVD1}}{3}\protected@file@percent }
+\@writefile{toc}{\contentsline {subsubsection}{\tocsubsubsection {}{}{Optimizing $r$}}{3}\protected@file@percent }
+\@writefile{lof}{\contentsline {figure}{\numberline {1}{\ignorespaces RMSE of SVD1 for basic imputation methods and $r = 1, \dots  , 100$\relax }}{4}\protected@file@percent }
+\@writefile{lot}{\contentsline {table}{\numberline {1}{\ignorespaces The lowest RMSE and optimal $r$ for SVD1 with basic imputation methods\relax }}{4}\protected@file@percent }
+\@writefile{toc}{\contentsline {subsubsection}{\tocsubsubsection {}{}{Optimizing $\alpha $}}{5}\protected@file@percent }
 \providecommand*\caption@xref[2]{\@setref\relax\@undefined{#1}}
-\newlabel{fig:figure}{{\caption@xref {fig:figure}{ on input line 232}}{4}}
-\@writefile{toc}{\contentsline {subsection}{\tocsubsection {}{}{SVD2}}{5}\protected@file@percent }
-\@writefile{toc}{\contentsline {subsection}{\tocsubsection {}{}{NMF}}{6}\protected@file@percent }
+\newlabel{fig:figure}{{\caption@xref {fig:figure}{ on input line 269}}{5}}
+\@writefile{lof}{\contentsline {figure}{\numberline {2}{\ignorespaces RMSE of SVD1 for weigthed imputation method for different $\alpha $ and $r$\relax }}{5}\protected@file@percent }
+\@writefile{lot}{\contentsline {table}{\numberline {2}{\ignorespaces 5 lowest RMSE of SVD1 for weigthed imputation method and ($\alpha $, $r$) that gave them\relax }}{5}\protected@file@percent }
+\@writefile{toc}{\contentsline {subsection}{\tocsubsection {}{}{SVD2}}{6}\protected@file@percent }
+\@writefile{lof}{\contentsline {figure}{\numberline {3}{\ignorespaces {\leavevmode {\color  {magenta}tutaj}}\relax }}{6}\protected@file@percent }
+\@writefile{toc}{\contentsline {subsubsection}{\tocsubsubsection {}{}{Stop condition}}{6}\protected@file@percent }
+\@writefile{toc}{\contentsline {subsubsection}{\tocsubsubsection {}{}{Optimizing $r$}}{6}\protected@file@percent }
+\@writefile{lof}{\contentsline {figure}{\numberline {4}{\ignorespaces RMSE of SVD2 for basic imputation methods and $r = 1, \dots  , 100$\relax }}{7}\protected@file@percent }
+\@writefile{lot}{\contentsline {table}{\numberline {3}{\ignorespaces The lowest RMSE and optimal $r$ for SVD2 with basic imputation methods\relax }}{7}\protected@file@percent }
+\@writefile{toc}{\contentsline {subsubsection}{\tocsubsubsection {}{}{Optimizing $\alpha $}}{7}\protected@file@percent }
+\@writefile{lof}{\contentsline {figure}{\numberline {5}{\ignorespaces RMSE of SVD2 for weigthed imputation method for different $\alpha $ and $r$\relax }}{8}\protected@file@percent }
+\@writefile{lot}{\contentsline {table}{\numberline {4}{\ignorespaces 5 lowest RMSE of SVD2 for weigthed imputation method and ($\alpha $, $r$) that gave them\relax }}{8}\protected@file@percent }
+\@writefile{toc}{\contentsline {subsection}{\tocsubsection {}{}{NMF}}{9}\protected@file@percent }
+\@writefile{toc}{\contentsline {subsubsection}{\tocsubsubsection {}{}{Optimizing $r$}}{9}\protected@file@percent }
+\@writefile{lof}{\contentsline {figure}{\numberline {6}{\ignorespaces RMSE of NMF for basic imputation methods and $r = 1, \dots  , 100$\relax }}{9}\protected@file@percent }
+\@writefile{lot}{\contentsline {table}{\numberline {5}{\ignorespaces The lowest RMSE and optimal $r$ for NMF with basic imputation methods\relax }}{9}\protected@file@percent }
+\@writefile{toc}{\contentsline {subsubsection}{\tocsubsubsection {}{}{Optimizing $\alpha $}}{10}\protected@file@percent }
+\@writefile{lof}{\contentsline {figure}{\numberline {7}{\ignorespaces RMSE of NMF for weigthed imputation method for different $\alpha $ and $r$\relax }}{10}\protected@file@percent }
+\@writefile{lot}{\contentsline {table}{\numberline {6}{\ignorespaces 5 lowest RMSE of NMF for weigthed imputation method and ($\alpha $, $r$) that gave them\relax }}{10}\protected@file@percent }
 \newlabel{tocindent-1}{0pt}
 \newlabel{tocindent0}{15.98535pt}
 \newlabel{tocindent1}{19.35791pt}
 \newlabel{tocindent2}{31.97072pt}
 \newlabel{tocindent3}{0pt}
-\@writefile{toc}{\contentsline {subsection}{\tocsubsection {}{}{SGD}}{8}\protected@file@percent }
-\@writefile{toc}{\contentsline {section}{\tocsection {}{4}{}}{9}\protected@file@percent }
-\@writefile{toc}{\contentsline {section}{\tocsection {}{5}{Conclusions}}{9}\protected@file@percent }
+\@writefile{toc}{\contentsline {subsection}{\tocsubsection {}{}{SGD}}{11}\protected@file@percent }
+\@writefile{toc}{\contentsline {section}{\tocsection {}{4}{}}{11}\protected@file@percent }
+\@writefile{toc}{\contentsline {section}{\tocsection {}{5}{Results}}{11}\protected@file@percent }
Index: .idea/MoCaDR_proj1.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<module type=\"PYTHON_MODULE\" version=\"4\">\r\n  <component name=\"NewModuleRootManager\">\r\n    <content url=\"file://$MODULE_DIR$\">\r\n      <sourceFolder url=\"file://$MODULE_DIR$/src\" isTestSource=\"false\" />\r\n    </content>\r\n    <orderEntry type=\"jdk\" jdkName=\"Python 3.10 (MoCaDR_proj1)\" jdkType=\"Python SDK\" />\r\n    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\r\n  </component>\r\n</module>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/MoCaDR_proj1.iml b/.idea/MoCaDR_proj1.iml
--- a/.idea/MoCaDR_proj1.iml	(revision cca69d005446496a4a742e962b2259b3813e93f9)
+++ b/.idea/MoCaDR_proj1.iml	(date 1649604177388)
@@ -4,7 +4,7 @@
     <content url="file://$MODULE_DIR$">
       <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
     </content>
-    <orderEntry type="jdk" jdkName="Python 3.10 (MoCaDR_proj1)" jdkType="Python SDK" />
+    <orderEntry type="jdk" jdkName="Python 3.10" jdkType="Python SDK" />
     <orderEntry type="sourceFolder" forTests="false" />
   </component>
 </module>
\ No newline at end of file
Index: auxil/report.log
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>This is pdfTeX, Version 3.14159265-2.6-1.40.21 (MiKTeX 2.9.7300 64-bit) (preloaded format=pdflatex 2020.3.10)  9 APR 2022 22:27\r\nentering extended mode\r\n**./report.tex\r\n(report.tex\r\nLaTeX2e <2020-02-02> patch level 2\r\nL3 programming layer <2020-02-14>\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/amscls\\amsart.cls\"\r\nDocument Class: amsart 2017/10/31 v2.20.4\r\n\\linespacing=\\dimen134\r\n\\normalparindent=\\dimen135\r\n\\normaltopskip=\\skip47\r\n\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/amsmath\\amsmath.st\r\ny\"\r\nPackage: amsmath 2020/01/20 v2.17e AMS math features\r\n\\@mathmargin=\\skip48\r\n\r\nFor additional information on amsmath, use the `?' option.\r\n\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/amsmath\\amstext.st\r\ny\"\r\nPackage: amstext 2000/06/29 v2.01 AMS text\r\n\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/amsmath\\amsgen.sty\r\n\"\r\nFile: amsgen.sty 1999/11/30 v2.0 generic functions\r\n\\@emptytoks=\\toks14\r\n\\ex@=\\dimen136\r\n))\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/amsmath\\amsbsy.sty\r\n\"\r\nPackage: amsbsy 1999/11/29 v1.2d Bold Symbols\r\n\\pmbraise@=\\dimen137\r\n)\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/amsmath\\amsopn.sty\r\n\"\r\nPackage: amsopn 2016/03/08 v2.02 operator names\r\n)\r\n\\inf@bad=\\count167\r\nLaTeX Info: Redefining \\frac on input line 227.\r\n\\uproot@=\\count168\r\n\\leftroot@=\\count169\r\nLaTeX Info: Redefining \\overline on input line 389.\r\n\\classnum@=\\count170\r\n\\DOTSCASE@=\\count171\r\nLaTeX Info: Redefining \\ldots on input line 486.\r\nLaTeX Info: Redefining \\dots on input line 489.\r\nLaTeX Info: Redefining \\cdots on input line 610.\r\n\\Mathstrutbox@=\\box45\r\n\\strutbox@=\\box46\r\n\\big@size=\\dimen138\r\nLaTeX Font Info:    Redeclaring font encoding OML on input line 733.\r\nLaTeX Font Info:    Redeclaring font encoding OMS on input line 734.\r\n\\macc@depth=\\count172\r\n\\c@MaxMatrixCols=\\count173\r\n\\dotsspace@=\\muskip16\r\n\\c@parentequation=\\count174\r\n\\dspbrk@lvl=\\count175\r\n\\tag@help=\\toks15\r\n\\row@=\\count176\r\n\\column@=\\count177\r\n\\maxfields@=\\count178\r\n\\andhelp@=\\toks16\r\n\\eqnshift@=\\dimen139\r\n\\alignsep@=\\dimen140\r\n\\tagshift@=\\dimen141\r\n\\tagwidth@=\\dimen142\r\n\\totwidth@=\\dimen143\r\n\\lineht@=\\dimen144\r\n\\@envbody=\\toks17\r\n\\multlinegap=\\skip49\r\n\\multlinetaggap=\\skip50\r\n\\mathdisplay@stack=\\toks18\r\nLaTeX Info: Redefining \\[ on input line 2859.\r\nLaTeX Info: Redefining \\] on input line 2860.\r\n)\r\nLaTeX Font Info:    Trying to load font information for U+msa on input line 398\r\n.\r\n\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/amsfonts\\umsa.fd\"\r\nFile: umsa.fd 2013/01/14 v3.01 AMS symbols A\r\n)\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/amsfonts\\amsfonts.\r\nsty\"\r\nPackage: amsfonts 2013/01/14 v3.01 Basic AMSFonts support\r\n\\symAMSa=\\mathgroup4\r\n\\symAMSb=\\mathgroup5\r\nLaTeX Font Info:    Redeclaring math symbol \\hbar on input line 98.\r\nLaTeX Font Info:    Overwriting math alphabet `\\mathfrak' in version `bold'\r\n(Font)                  U/euf/m/n --> U/euf/b/n on input line 106.\r\n)\r\n\\copyins=\\insert199\r\n\\abstractbox=\\box47\r\n\\listisep=\\skip51\r\n\\c@part=\\count179\r\n\\c@section=\\count180\r\n\\c@subsection=\\count181\r\n\\c@subsubsection=\\count182\r\n\\c@paragraph=\\count183\r\n\\c@subparagraph=\\count184\r\n\\c@figure=\\count185\r\n\\c@table=\\count186\r\n\\abovecaptionskip=\\skip52\r\n\\belowcaptionskip=\\skip53\r\n\\captionindent=\\dimen145\r\n\\thm@style=\\toks19\r\n\\thm@bodyfont=\\toks20\r\n\\thm@headfont=\\toks21\r\n\\thm@notefont=\\toks22\r\n\\thm@headpunct=\\toks23\r\n\\thm@preskip=\\skip54\r\n\\thm@postskip=\\skip55\r\n\\thm@headsep=\\skip56\r\n\\dth@everypar=\\toks24\r\n)\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/float\\float.sty\"\r\nPackage: float 2001/11/08 v1.3d Float enhancements (AL)\r\n\\c@float@type=\\count187\r\n\\float@exts=\\toks25\r\n\\float@box=\\box48\r\n\\@float@everytoks=\\toks26\r\n\\@floatcapt=\\box49\r\n)\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/base\\fontenc.sty\"\r\nPackage: fontenc 2020/02/11 v2.0o Standard LaTeX package\r\n)\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/geometry\\geometry.\r\nsty\"\r\nPackage: geometry 2020/01/02 v5.9 Page Geometry\r\n\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/graphics\\keyval.st\r\ny\"\r\nPackage: keyval 2014/10/28 v1.15 key=value parser (DPC)\r\n\\KV@toks@=\\toks27\r\n)\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/generic/iftex\\ifvtex.sty\r\n\"\r\nPackage: ifvtex 2019/10/25 v1.7 ifvtex legacy package. Use iftex instead.\r\n (\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/generic/iftex\\iftex.sty\r\n\"\r\nPackage: iftex 2019/11/07 v1.0c TeX engine tests\r\n))\r\n\\Gm@cnth=\\count188\r\n\\Gm@cntv=\\count189\r\n\\c@Gm@tempcnt=\\count190\r\n\\Gm@bindingoffset=\\dimen146\r\n\\Gm@wd@mp=\\dimen147\r\n\\Gm@odd@mp=\\dimen148\r\n\\Gm@even@mp=\\dimen149\r\n\\Gm@layoutwidth=\\dimen150\r\n\\Gm@layoutheight=\\dimen151\r\n\\Gm@layouthoffset=\\dimen152\r\n\\Gm@layoutvoffset=\\dimen153\r\n\\Gm@dimlist=\\toks28\r\n\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/geometry\\geometry.\r\ncfg\"))\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/parskip\\parskip.st\r\ny\"\r\nPackage: parskip 2020-01-22 v2.0d non-zero parskip adjustments\r\n\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/kvoptions\\kvoption\r\ns.sty\"\r\nPackage: kvoptions 2019/11/29 v3.13 Key value format for package options (HO)\r\n\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/generic/ltxcmds\\ltxcmds.\r\nsty\"\r\nPackage: ltxcmds 2019/12/15 v1.24 LaTeX kernel commands for general use (HO)\r\n)\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/generic/kvsetkeys\\kvsetk\r\neys.sty\"\r\nPackage: kvsetkeys 2019/12/15 v1.18 Key value parser (HO)\r\n))\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/etoolbox\\etoolbox.\r\nsty\"\r\nPackage: etoolbox 2019/09/21 v2.5h e-TeX tools for LaTeX (JAW)\r\n\\etb@tempcnta=\\count191\r\n)\r\nCouldn't patch \\@starttoc\r\n)\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/amsfonts\\amssymb.s\r\nty\"\r\nPackage: amssymb 2013/01/14 v3.01 AMS font symbols\r\n)\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/titling\\titling.st\r\ny\"\r\nPackage: titling 2009/09/04 v2.1d maketitle typesetting\r\n\\thanksmarkwidth=\\skip57\r\n\\thanksmargin=\\skip58\r\n\\droptitle=\\skip59\r\n)\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/tools\\enumerate.st\r\ny\"\r\nPackage: enumerate 2015/07/23 v3.00 enumerate extensions (DPC)\r\n\\@enLab=\\toks29\r\n)\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/multirow\\multirow.\r\nsty\"\r\nPackage: multirow 2019/05/31 v2.5 Span multiple rows of a table\r\n\\multirow@colwidth=\\skip60\r\n\\multirow@cntb=\\count192\r\n\\multirow@dima=\\skip61\r\n\\bigstrutjot=\\dimen154\r\n)\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/graphics\\graphics.\r\nsty\"\r\nPackage: graphics 2019/11/30 v1.4a Standard LaTeX Graphics (DPC,SPQR)\r\n\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/graphics\\trig.sty\"\r\nPackage: trig 2016/01/03 v1.10 sin cos tan (DPC)\r\n)\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/graphics-cfg\\graph\r\nics.cfg\"\r\nFile: graphics.cfg 2016/06/04 v1.11 sample graphics configuration\r\n)\r\nPackage graphics Info: Driver file: pdftex.def on input line 105.\r\n\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/graphics-def\\pdfte\r\nx.def\"\r\nFile: pdftex.def 2018/01/08 v1.0l Graphics/color driver for pdftex\r\n))\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/graphics\\graphicx.\r\nsty\"\r\nPackage: graphicx 2019/11/30 v1.2a Enhanced LaTeX Graphics (DPC,SPQR)\r\n\\Gin@req@height=\\dimen155\r\n\\Gin@req@width=\\dimen156\r\n)\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/caption\\caption.st\r\ny\"\r\nPackage: caption 2020/10/26 v3.5g Customizing captions (AR)\r\n\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/caption\\caption3.s\r\nty\"\r\nPackage: caption3 2020/10/21 v2.2e caption3 kernel (AR)\r\n\\captionmargin=\\dimen157\r\n\\captionmargin@=\\dimen158\r\n\\captionwidth=\\dimen159\r\n\\caption@tempdima=\\dimen160\r\n\\caption@indent=\\dimen161\r\n\\caption@parindent=\\dimen162\r\n\\caption@hangindent=\\dimen163\r\nPackage caption Info: AMS or SMF document class detected.\r\n\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/caption\\caption-am\r\ns-smf.sto\"\r\nFile: caption-ams-smf.sto 2020/08/22 v2.0 Adaption of the caption package to th\r\ne AMS and SMF document classes (AR)\r\n))\r\n\\c@caption@flags=\\count193\r\n\\c@continuedfloat=\\count194\r\nPackage caption Info: float package is loaded.\r\n)\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/tools\\array.sty\"\r\nPackage: array 2019/08/31 v2.4l Tabular extension package (FMi)\r\n\\col@sep=\\dimen164\r\n\\ar@mcellbox=\\box50\r\n\\extrarowheight=\\dimen165\r\n\\NC@list=\\toks30\r\n\\extratabsurround=\\skip62\r\n\\backup@length=\\skip63\r\n\\ar@cellbox=\\box51\r\n)\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/xcolor\\xcolor.sty\"\r\nPackage: xcolor 2016/05/11 v2.12 LaTeX color extensions (UK)\r\n\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/graphics-cfg\\color\r\n.cfg\"\r\nFile: color.cfg 2016/01/02 v1.6 sample color configuration\r\n)\r\nPackage xcolor Info: Driver file: pdftex.def on input line 225.\r\nPackage xcolor Info: Model `cmy' substituted by `cmy0' on input line 1348.\r\nPackage xcolor Info: Model `hsb' substituted by `rgb' on input line 1352.\r\nPackage xcolor Info: Model `RGB' extended on input line 1364.\r\nPackage xcolor Info: Model `HTML' substituted by `rgb' on input line 1366.\r\nPackage xcolor Info: Model `Hsb' substituted by `hsb' on input line 1367.\r\nPackage xcolor Info: Model `tHsb' substituted by `hsb' on input line 1368.\r\nPackage xcolor Info: Model `HSB' substituted by `hsb' on input line 1369.\r\nPackage xcolor Info: Model `Gray' substituted by `gray' on input line 1370.\r\nPackage xcolor Info: Model `wave' substituted by `hsb' on input line 1371.\r\n)\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/caption\\subcaption\r\n.sty\"\r\nPackage: subcaption 2020/10/07 v1.3j Sub-captions (AR)\r\n\\c@subfigure=\\count195\r\n\\c@subtable=\\count196\r\n)\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/l3backend\\l3backen\r\nd-pdfmode.def\"\r\nFile: l3backend-pdfmode.def 2020-02-03 L3 backend support: PDF mode\r\n\\l__kernel_color_stack_int=\\count197\r\n\\l__pdf_internal_box=\\box52\r\n) (C:/Users\\admin\\PycharmProjects\\MoCaDR_proj1\\auxil\\report.aux)\r\n\\openout1 = `report.aux'.\r\n\r\nLaTeX Font Info:    Checking defaults for OML/cmm/m/it on input line 44.\r\nLaTeX Font Info:    ... okay on input line 44.\r\nLaTeX Font Info:    Checking defaults for OMS/cmsy/m/n on input line 44.\r\nLaTeX Font Info:    ... okay on input line 44.\r\nLaTeX Font Info:    Checking defaults for OT1/cmr/m/n on input line 44.\r\nLaTeX Font Info:    ... okay on input line 44.\r\nLaTeX Font Info:    Checking defaults for T1/cmr/m/n on input line 44.\r\nLaTeX Font Info:    ... okay on input line 44.\r\nLaTeX Font Info:    Checking defaults for TS1/cmr/m/n on input line 44.\r\nLaTeX Font Info:    ... okay on input line 44.\r\nLaTeX Font Info:    Checking defaults for OMX/cmex/m/n on input line 44.\r\nLaTeX Font Info:    ... okay on input line 44.\r\nLaTeX Font Info:    Checking defaults for U/cmr/m/n on input line 44.\r\nLaTeX Font Info:    ... okay on input line 44.\r\nLaTeX Font Info:    Trying to load font information for U+msa on input line 44.\r\n\r\n\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/amsfonts\\umsa.fd\"\r\nFile: umsa.fd 2013/01/14 v3.01 AMS symbols A\r\n)\r\nLaTeX Font Info:    Trying to load font information for U+msb on input line 44.\r\n\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/amsfonts\\umsb.fd\"\r\nFile: umsb.fd 2013/01/14 v3.01 AMS symbols B\r\n)\r\n*geometry* driver: auto-detecting\r\n*geometry* detected driver: pdftex\r\n*geometry* verbose mode - [ preamble ] result:\r\n* driver: pdftex\r\n* paper: <default>\r\n* layout: <same size as paper>\r\n* layoutoffset:(h,v)=(0.0pt,0.0pt)\r\n* modes: twoside \r\n* h-part:(L,W,R)=(73.71613pt, 430.00462pt, 110.57425pt)\r\n* v-part:(T,H,B)=(95.39737pt, 556.47656pt, 143.09605pt)\r\n* \\paperwidth=614.295pt\r\n* \\paperheight=794.96999pt\r\n* \\textwidth=430.00462pt\r\n* \\textheight=556.47656pt\r\n* \\oddsidemargin=1.44614pt\r\n* \\evensidemargin=38.30426pt\r\n* \\topmargin=1.12738pt\r\n* \\headheight=8.0pt\r\n* \\headsep=14.0pt\r\n* \\topskip=10.0pt\r\n* \\footskip=12.0pt\r\n* \\marginparwidth=90.0pt\r\n* \\marginparsep=11.0pt\r\n* \\columnsep=10.0pt\r\n* \\skip\\footins=7.0pt plus 11.0pt\r\n* \\hoffset=0.0pt\r\n* \\voffset=0.0pt\r\n* \\mag=1000\r\n* \\@twocolumnfalse\r\n* \\@twosidetrue\r\n* \\@mparswitchtrue\r\n* \\@reversemarginfalse\r\n* (1in=72.27pt=25.4mm, 1cm=28.453pt)\r\n\r\n\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/context/base/mkii\\supp-p\r\ndf.mkii\"\r\n[Loading MPS to PDF converter (version 2006.09.02).]\r\n\\scratchcounter=\\count198\r\n\\scratchdimen=\\dimen166\r\n\\scratchbox=\\box53\r\n\\nofMPsegments=\\count266\r\n\\nofMParguments=\\count267\r\n\\everyMPshowfont=\\toks31\r\n\\MPscratchCnt=\\count268\r\n\\MPscratchDim=\\dimen167\r\n\\MPnumerator=\\count269\r\n\\makeMPintoPDFobject=\\count270\r\n\\everyMPtoPDFconversion=\\toks32\r\n)\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/epstopdf-pkg\\epsto\r\npdf-base.sty\"\r\nPackage: epstopdf-base 2020-01-24 v2.11 Base part for package epstopdf\r\nPackage epstopdf-base Info: Redefining graphics rule for `.eps' on input line 4\r\n85.\r\n)\r\nPackage caption Info: Begin \\AtBeginDocument code.\r\nPackage caption Info: End \\AtBeginDocument code.\r\n\r\n\r\nLaTeX Warning: No \\author given.\r\n\r\n[1{C:/Users/admin/AppData/Local/MiKTeX/2.9/pdftex/config/pdftex.map}]\r\nLaTeX Font Info:    Trying to load font information for T1+cmss on input line 1\r\n17.\r\n\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/base\\t1cmss.fd\"\r\nFile: t1cmss.fd 2019/12/16 v2.5j Standard LaTeX font definitions\r\n)\r\n[2]\r\n<./fig/svd1_1.png, id=26, 544.9158pt x 329.5512pt>\r\nFile: ./fig/svd1_1.png Graphic file (type png)\r\n<use ./fig/svd1_1.png>\r\nPackage pdftex.def Info: ./fig/svd1_1.png  used on input line 191.\r\n(pdftex.def)             Requested size: 234.30922pt x 141.70424pt.\r\n\r\nOverfull \\hbox (19.30692pt too wide) in paragraph at lines 191--194\r\n [][] \r\n []\r\n\r\n<./fig/svd1_2.png, id=28, 412.6617pt x 329.5512pt>\r\nFile: ./fig/svd1_2.png Graphic file (type png)\r\n<use ./fig/svd1_2.png>\r\nPackage pdftex.def Info: ./fig/svd1_2.png  used on input line 197.\r\n(pdftex.def)             Requested size: 177.44106pt x 141.70424pt.\r\n[3 <./fig/svd1_1.png> <./fig/svd1_2.png>]\r\n<fig/svd1_r_w.png, id=34, 1084.05pt x 722.7pt>\r\nFile: fig/svd1_r_w.png Graphic file (type png)\r\n<use fig/svd1_r_w.png>\r\nPackage pdftex.def Info: fig/svd1_r_w.png  used on input line 231.\r\n(pdftex.def)             Requested size: 487.818pt x 325.21199pt.\r\n\r\nOverfull \\hbox (57.81337pt too wide) in paragraph at lines 231--233\r\n [][] \r\n []\r\n\r\nreport.tex:238: Undefined control sequence.\r\nl.238 \\toprule\r\n              \r\nThe control sequence at the end of the top line\r\nof your error message was never \\def'ed. If you have\r\nmisspelled it (e.g., `\\hobx'), type `I' and the correct\r\nspelling (e.g., `I\\hbox'). Otherwise just continue,\r\nand I'll forget about whatever was undefined.\r\n\r\nreport.tex:240: Undefined control sequence.\r\n<recently read> \\midrule \r\n                         \r\nl.240 \\midrule\r\n              \r\nThe control sequence at the end of the top line\r\nof your error message was never \\def'ed. If you have\r\nmisspelled it (e.g., `\\hobx'), type `I' and the correct\r\nspelling (e.g., `I\\hbox'). Otherwise just continue,\r\nand I'll forget about whatever was undefined.\r\n\r\nreport.tex:247: Undefined control sequence.\r\n<recently read> \\bottomrule \r\n                            \r\nl.247 \\bottomrule\r\n                 \r\nThe control sequence at the end of the top line\r\nof your error message was never \\def'ed. If you have\r\nmisspelled it (e.g., `\\hobx'), type `I' and the correct\r\nspelling (e.g., `I\\hbox'). Otherwise just continue,\r\nand I'll forget about whatever was undefined.\r\n\r\n[4 <./fig/svd1_r_w.png>]\r\n<./fig/svd2_1.png, id=39, 544.9158pt x 329.5512pt>\r\nFile: ./fig/svd2_1.png Graphic file (type png)\r\n<use ./fig/svd2_1.png>\r\nPackage pdftex.def Info: ./fig/svd2_1.png  used on input line 277.\r\n(pdftex.def)             Requested size: 234.30922pt x 141.70424pt.\r\n\r\nOverfull \\hbox (19.30692pt too wide) in paragraph at lines 277--280\r\n [][] \r\n []\r\n\r\n<./fig/svd2_2.png, id=40, 412.6617pt x 329.5512pt>\r\nFile: ./fig/svd2_2.png Graphic file (type png)\r\n<use ./fig/svd2_2.png>\r\nPackage pdftex.def Info: ./fig/svd2_2.png  used on input line 283.\r\n(pdftex.def)             Requested size: 177.44106pt x 141.70424pt.\r\n<./fig/svd2_r_w.png, id=41, 1084.05pt x 722.7pt>\r\nFile: ./fig/svd2_r_w.png Graphic file (type png)\r\n<use ./fig/svd2_r_w.png>\r\nPackage pdftex.def Info: ./fig/svd2_r_w.png  used on input line 299.\r\n(pdftex.def)             Requested size: 487.818pt x 325.21199pt.\r\n\r\nOverfull \\hbox (57.81337pt too wide) in paragraph at lines 299--300\r\n [][] \r\n []\r\n\r\n[5 <./fig/svd2_1.png> <./fig/svd2_2.png>]\r\nreport.tex:304: Undefined control sequence.\r\nl.304 \\toprule\r\n              \r\nThe control sequence at the end of the top line\r\nof your error message was never \\def'ed. If you have\r\nmisspelled it (e.g., `\\hobx'), type `I' and the correct\r\nspelling (e.g., `I\\hbox'). Otherwise just continue,\r\nand I'll forget about whatever was undefined.\r\n\r\nreport.tex:306: Undefined control sequence.\r\n<recently read> \\midrule \r\n                         \r\nl.306 \\midrule\r\n              \r\nThe control sequence at the end of the top line\r\nof your error message was never \\def'ed. If you have\r\nmisspelled it (e.g., `\\hobx'), type `I' and the correct\r\nspelling (e.g., `I\\hbox'). Otherwise just continue,\r\nand I'll forget about whatever was undefined.\r\n\r\nreport.tex:313: Undefined control sequence.\r\n<recently read> \\bottomrule \r\n                            \r\nl.313 \\bottomrule\r\n                 \r\nThe control sequence at the end of the top line\r\nof your error message was never \\def'ed. If you have\r\nmisspelled it (e.g., `\\hobx'), type `I' and the correct\r\nspelling (e.g., `I\\hbox'). Otherwise just continue,\r\nand I'll forget about whatever was undefined.\r\n\r\n<./fig/nmf_1.png, id=47, 544.9158pt x 329.5512pt>\r\nFile: ./fig/nmf_1.png Graphic file (type png)\r\n<use ./fig/nmf_1.png>\r\nPackage pdftex.def Info: ./fig/nmf_1.png  used on input line 326.\r\n(pdftex.def)             Requested size: 234.30922pt x 141.70424pt.\r\n\r\nOverfull \\hbox (19.30692pt too wide) in paragraph at lines 326--329\r\n [][] \r\n []\r\n\r\n<./fig/nmf_2.png, id=48, 412.6617pt x 329.5512pt>\r\nFile: ./fig/nmf_2.png Graphic file (type png)\r\n<use ./fig/nmf_2.png>\r\nPackage pdftex.def Info: ./fig/nmf_2.png  used on input line 332.\r\n(pdftex.def)             Requested size: 177.44106pt x 141.70424pt.\r\n\r\nUnderfull \\vbox (badness 4341) has occurred while \\output is active []\r\n\r\n [6 <./fig/svd2_r_w.png>]\r\nreport.tex:353: Undefined control sequence.\r\nl.353 \\toprule\r\n              \r\nThe control sequence at the end of the top line\r\nof your error message was never \\def'ed. If you have\r\nmisspelled it (e.g., `\\hobx'), type `I' and the correct\r\nspelling (e.g., `I\\hbox'). Otherwise just continue,\r\nand I'll forget about whatever was undefined.\r\n\r\nreport.tex:355: Undefined control sequence.\r\n<recently read> \\midrule \r\n                         \r\nl.355 \\midrule\r\n              \r\nThe control sequence at the end of the top line\r\nof your error message was never \\def'ed. If you have\r\nmisspelled it (e.g., `\\hobx'), type `I' and the correct\r\nspelling (e.g., `I\\hbox'). Otherwise just continue,\r\nand I'll forget about whatever was undefined.\r\n\r\nreport.tex:362: Undefined control sequence.\r\n<recently read> \\bottomrule \r\n                            \r\nl.362 \\bottomrule\r\n                 \r\nThe control sequence at the end of the top line\r\nof your error message was never \\def'ed. If you have\r\nmisspelled it (e.g., `\\hobx'), type `I' and the correct\r\nspelling (e.g., `I\\hbox'). Otherwise just continue,\r\nand I'll forget about whatever was undefined.\r\n\r\n<./fig/nmf_r_w.png, id=53, 1084.05pt x 722.7pt>\r\nFile: ./fig/nmf_r_w.png Graphic file (type png)\r\n<use ./fig/nmf_r_w.png>\r\nPackage pdftex.def Info: ./fig/nmf_r_w.png  used on input line 372.\r\n(pdftex.def)             Requested size: 487.818pt x 325.21199pt.\r\n\r\nOverfull \\hbox (57.81337pt too wide) in paragraph at lines 372--373\r\n [][] \r\n []\r\n\r\n\r\nUnderfull \\vbox (badness 1975) has occurred while \\output is active []\r\n\r\n [7 <./fig/nmf_1.png> <./fig/nmf_2.png>]\r\nFile: ./fig/svd1_1.png Graphic file (type png)\r\n<use ./fig/svd1_1.png>\r\nPackage pdftex.def Info: ./fig/svd1_1.png  used on input line 386.\r\n(pdftex.def)             Requested size: 234.30922pt x 141.70424pt.\r\n\r\nOverfull \\hbox (19.30692pt too wide) in paragraph at lines 386--389\r\n [][] \r\n []\r\n\r\nFile: ./fig/svd1_2.png Graphic file (type png)\r\n<use ./fig/svd1_2.png>\r\nPackage pdftex.def Info: ./fig/svd1_2.png  used on input line 392.\r\n(pdftex.def)             Requested size: 177.44106pt x 141.70424pt.\r\n[8 <./fig/nmf_r_w.png>] [9]\r\n(C:/Users\\admin\\PycharmProjects\\MoCaDR_proj1\\auxil\\report.aux) ) \r\nHere is how much of TeX's memory you used:\r\n 6283 strings out of 481556\r\n 90971 string characters out of 2913869\r\n 335988 words of memory out of 3000000\r\n 21270 multiletter control sequences out of 15000+200000\r\n 552539 words of font info for 78 fonts, out of 3000000 for 9000\r\n 1302 hyphenation exceptions out of 8191\r\n 39i,10n,43p,815b,294s stack positions out of 5000i,500n,10000p,200000b,50000s\r\n <C:\\Users\\admi\r\nn\\AppData\\Local\\MiKTeX\\2.9\\fonts/pk/ljfour/jknappen/ec/dpi600\\ecss1095.pk> <C:\\\r\nUsers\\admin\\AppData\\Local\\MiKTeX\\2.9\\fonts/pk/ljfour/jknappen/ec/dpi600\\ecrm080\r\n0.pk> <C:\\Users\\admin\\AppData\\Local\\MiKTeX\\2.9\\fonts/pk/ljfour/jknappen/ec/dpi6\r\n00\\ecti1095.pk> <C:\\Users\\admin\\AppData\\Local\\MiKTeX\\2.9\\fonts/pk/ljfour/jknapp\r\nen/ec/dpi600\\ecbx1095.pk> <C:\\Users\\admin\\AppData\\Local\\MiKTeX\\2.9\\fonts/pk/ljf\r\nour/jknappen/ec/dpi600\\eccc1095.pk> <C:\\Users\\admin\\AppData\\Local\\MiKTeX\\2.9\\fo\r\nnts/pk/ljfour/jknappen/ec/dpi600\\ecrm1095.pk> <C:\\Users\\admin\\AppData\\Local\\MiK\r\nTeX\\2.9\\fonts/pk/ljfour/jknappen/ec/dpi600\\ecrm1200.pk> <C:\\Users\\admin\\AppData\r\n\\Local\\MiKTeX\\2.9\\fonts/pk/ljfour/jknappen/ec/dpi600\\ecrm1728.pk><C:/Users/admi\r\nn/AppData/Local/Programs/MiKTeX 2.9/fonts/type1/public/amsfonts/cm/cmex10.pfb><\r\nC:/Users/admin/AppData/Local/Programs/MiKTeX 2.9/fonts/type1/public/amsfonts/cm\r\n/cmmi10.pfb><C:/Users/admin/AppData/Local/Programs/MiKTeX 2.9/fonts/type1/publi\r\nc/amsfonts/cm/cmmi8.pfb><C:/Users/admin/AppData/Local/Programs/MiKTeX 2.9/fonts\r\n/type1/public/amsfonts/cm/cmmib10.pfb><C:/Users/admin/AppData/Local/Programs/Mi\r\nKTeX 2.9/fonts/type1/public/amsfonts/cm/cmr10.pfb><C:/Users/admin/AppData/Local\r\n/Programs/MiKTeX 2.9/fonts/type1/public/amsfonts/cm/cmr6.pfb><C:/Users/admin/Ap\r\npData/Local/Programs/MiKTeX 2.9/fonts/type1/public/amsfonts/cm/cmr8.pfb><C:/Use\r\nrs/admin/AppData/Local/Programs/MiKTeX 2.9/fonts/type1/public/amsfonts/cm/cmsy1\r\n0.pfb><C:/Users/admin/AppData/Local/Programs/MiKTeX 2.9/fonts/type1/public/amsf\r\nonts/cm/cmsy6.pfb><C:/Users/admin/AppData/Local/Programs/MiKTeX 2.9/fonts/type1\r\n/public/amsfonts/cm/cmsy8.pfb>\r\nOutput written on C:/Users\\admin\\PycharmProjects\\MoCaDR_proj1\\out\\report.pdf (9\r\n pages, 581368 bytes).\r\nPDF statistics:\r\n 322 PDF objects out of 1000 (max. 8388607)\r\n 0 named destinations out of 1000 (max. 500000)\r\n 46 words of extra memory for PDF output out of 10000 (max. 10000000)\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/auxil/report.log b/auxil/report.log
--- a/auxil/report.log	(revision cca69d005446496a4a742e962b2259b3813e93f9)
+++ b/auxil/report.log	(date 1649620331510)
@@ -1,4 +1,4 @@
-This is pdfTeX, Version 3.14159265-2.6-1.40.21 (MiKTeX 2.9.7300 64-bit) (preloaded format=pdflatex 2020.3.10)  9 APR 2022 22:27
+This is pdfTeX, Version 3.14159265-2.6-1.40.21 (MiKTeX 2.9.7300 64-bit) (preloaded format=pdflatex 2020.3.10)  10 APR 2022 21:52
 entering extended mode
 **./report.tex
 (report.tex
@@ -380,241 +380,130 @@
 LaTeX Warning: No \author given.
 
 [1{C:/Users/admin/AppData/Local/MiKTeX/2.9/pdftex/config/pdftex.map}]
+Overfull \hbox (19.25575pt too wide) in paragraph at lines 113--114
+[]\T1/cmr/m/n/10.95 let $[] \OT1/cmr/m/n/10.95 := \OML/cmm/m/it/10.95 w[] \OMS/
+cmsy/m/n/10.95   \OML/cmm/m/it/10.95  \OMS/cmsy/m/n/10.95  []$ \T1/cmr/m/n/10
+.95 and $[] \OT1/cmr/m/n/10.95 := \OML/cmm/m/it/10.95 h[] \OMS/cmsy/m/n/10.95  
+ \OML/cmm/m/it/10.95  \OMS/cmsy/m/n/10.95  []$\T1/cmr/m/n/10.95 , 
+ []
+
 LaTeX Font Info:    Trying to load font information for T1+cmss on input line 1
-17.
-
+27.
 ("C:\Users\admin\AppData\Local\Programs\MiKTeX 2.9\tex/latex/base\t1cmss.fd"
 File: t1cmss.fd 2019/12/16 v2.5j Standard LaTeX font definitions
 )
-[2]
-<./fig/svd1_1.png, id=26, 544.9158pt x 329.5512pt>
+[2] [3]
+<./fig/svd1_1.png, id=29, 575.9919pt x 335.3328pt>
 File: ./fig/svd1_1.png Graphic file (type png)
 <use ./fig/svd1_1.png>
-Package pdftex.def Info: ./fig/svd1_1.png  used on input line 191.
-(pdftex.def)             Requested size: 234.30922pt x 141.70424pt.
-
-Overfull \hbox (19.30692pt too wide) in paragraph at lines 191--194
- [][] 
- []
-
-<./fig/svd1_2.png, id=28, 412.6617pt x 329.5512pt>
+Package pdftex.def Info: ./fig/svd1_1.png  used on input line 216.
+(pdftex.def)             Requested size: 270.905pt x 157.719pt.
+<./fig/svd1_2.png, id=31, 423.5022pt x 335.3328pt>
 File: ./fig/svd1_2.png Graphic file (type png)
 <use ./fig/svd1_2.png>
-Package pdftex.def Info: ./fig/svd1_2.png  used on input line 197.
-(pdftex.def)             Requested size: 177.44106pt x 141.70424pt.
-[3 <./fig/svd1_1.png> <./fig/svd1_2.png>]
-<fig/svd1_r_w.png, id=34, 1084.05pt x 722.7pt>
-File: fig/svd1_r_w.png Graphic file (type png)
-<use fig/svd1_r_w.png>
-Package pdftex.def Info: fig/svd1_r_w.png  used on input line 231.
-(pdftex.def)             Requested size: 487.818pt x 325.21199pt.
+Package pdftex.def Info: ./fig/svd1_2.png  used on input line 222.
+(pdftex.def)             Requested size: 171.99922pt x 136.18767pt.
 
-Overfull \hbox (57.81337pt too wide) in paragraph at lines 231--233
- [][] 
+Overfull \hbox (12.8996pt too wide) in paragraph at lines 214--226
+ []$[]$$[]$ 
  []
 
-report.tex:238: Undefined control sequence.
-l.238 \toprule
-              
-The control sequence at the end of the top line
-of your error message was never \def'ed. If you have
-misspelled it (e.g., `\hobx'), type `I' and the correct
-spelling (e.g., `I\hbox'). Otherwise just continue,
-and I'll forget about whatever was undefined.
-
-report.tex:240: Undefined control sequence.
-<recently read> \midrule 
-                         
-l.240 \midrule
-              
-The control sequence at the end of the top line
-of your error message was never \def'ed. If you have
-misspelled it (e.g., `\hobx'), type `I' and the correct
-spelling (e.g., `I\hbox'). Otherwise just continue,
-and I'll forget about whatever was undefined.
-
-report.tex:247: Undefined control sequence.
-<recently read> \bottomrule 
-                            
-l.247 \bottomrule
-                 
-The control sequence at the end of the top line
-of your error message was never \def'ed. If you have
-misspelled it (e.g., `\hobx'), type `I' and the correct
-spelling (e.g., `I\hbox'). Otherwise just continue,
-and I'll forget about whatever was undefined.
-
-[4 <./fig/svd1_r_w.png>]
-<./fig/svd2_1.png, id=39, 544.9158pt x 329.5512pt>
+[4 <./fig/svd1_1.png> <./fig/svd1_2.png>]
+<fig/svd1_r_w2.png, id=37, 481.8pt x 382.42876pt>
+File: fig/svd1_r_w2.png Graphic file (type png)
+<use fig/svd1_r_w2.png>
+Package pdftex.def Info: fig/svd1_r_w2.png  used on input line 268.
+(pdftex.def)             Requested size: 289.08221pt x 229.45901pt.
+ [5 <./fig/svd1_r_w2.png>]
+<./fig/svd2_stop2.png, id=42, 487.06969pt x 382.42876pt>
+File: ./fig/svd2_stop2.png Graphic file (type png)
+<use ./fig/svd2_stop2.png>
+Package pdftex.def Info: ./fig/svd2_stop2.png  used on input line 312.
+(pdftex.def)             Requested size: 267.88914pt x 210.33646pt.
+<./fig/svd2_1.png, id=43, 575.9919pt x 335.3328pt>
 File: ./fig/svd2_1.png Graphic file (type png)
 <use ./fig/svd2_1.png>
-Package pdftex.def Info: ./fig/svd2_1.png  used on input line 277.
-(pdftex.def)             Requested size: 234.30922pt x 141.70424pt.
-
-Overfull \hbox (19.30692pt too wide) in paragraph at lines 277--280
- [][] 
- []
-
-<./fig/svd2_2.png, id=40, 412.6617pt x 329.5512pt>
+Package pdftex.def Info: ./fig/svd2_1.png  used on input line 323.
+(pdftex.def)             Requested size: 270.905pt x 157.719pt.
+<./fig/svd2_2.png, id=44, 423.5022pt x 335.3328pt>
 File: ./fig/svd2_2.png Graphic file (type png)
 <use ./fig/svd2_2.png>
-Package pdftex.def Info: ./fig/svd2_2.png  used on input line 283.
-(pdftex.def)             Requested size: 177.44106pt x 141.70424pt.
-<./fig/svd2_r_w.png, id=41, 1084.05pt x 722.7pt>
-File: ./fig/svd2_r_w.png Graphic file (type png)
-<use ./fig/svd2_r_w.png>
-Package pdftex.def Info: ./fig/svd2_r_w.png  used on input line 299.
-(pdftex.def)             Requested size: 487.818pt x 325.21199pt.
+Package pdftex.def Info: ./fig/svd2_2.png  used on input line 329.
+(pdftex.def)             Requested size: 171.99922pt x 136.18767pt.
 
-Overfull \hbox (57.81337pt too wide) in paragraph at lines 299--300
- [][] 
+Overfull \hbox (12.8996pt too wide) in paragraph at lines 321--333
+ []$[]$$[]$ 
  []
 
-[5 <./fig/svd2_1.png> <./fig/svd2_2.png>]
-report.tex:304: Undefined control sequence.
-l.304 \toprule
-              
-The control sequence at the end of the top line
-of your error message was never \def'ed. If you have
-misspelled it (e.g., `\hobx'), type `I' and the correct
-spelling (e.g., `I\hbox'). Otherwise just continue,
-and I'll forget about whatever was undefined.
-
-report.tex:306: Undefined control sequence.
-<recently read> \midrule 
-                         
-l.306 \midrule
-              
-The control sequence at the end of the top line
-of your error message was never \def'ed. If you have
-misspelled it (e.g., `\hobx'), type `I' and the correct
-spelling (e.g., `I\hbox'). Otherwise just continue,
-and I'll forget about whatever was undefined.
+[6 <./fig/svd2_stop2.png>]
+<./fig/svd2_r_w2.png, id=49, 488.57532pt x 381.67593pt>
+File: ./fig/svd2_r_w2.png Graphic file (type png)
+<use ./fig/svd2_r_w2.png>
+Package pdftex.def Info: ./fig/svd2_r_w2.png  used on input line 358.
+(pdftex.def)             Requested size: 293.14745pt x 229.00732pt.
 
-report.tex:313: Undefined control sequence.
-<recently read> \bottomrule 
-                            
-l.313 \bottomrule
-                 
-The control sequence at the end of the top line
-of your error message was never \def'ed. If you have
-misspelled it (e.g., `\hobx'), type `I' and the correct
-spelling (e.g., `I\hbox'). Otherwise just continue,
-and I'll forget about whatever was undefined.
+Underfull \vbox (badness 2884) has occurred while \output is active []
 
-<./fig/nmf_1.png, id=47, 544.9158pt x 329.5512pt>
+ [7 <./fig/svd2_1.png> <./fig/svd2_2.png>] [8 <./fig/svd2_r_w2.png>]
+<./fig/nmf_1.png, id=60, 575.9919pt x 335.3328pt>
 File: ./fig/nmf_1.png Graphic file (type png)
 <use ./fig/nmf_1.png>
-Package pdftex.def Info: ./fig/nmf_1.png  used on input line 326.
-(pdftex.def)             Requested size: 234.30922pt x 141.70424pt.
-
-Overfull \hbox (19.30692pt too wide) in paragraph at lines 326--329
- [][] 
- []
-
-<./fig/nmf_2.png, id=48, 412.6617pt x 329.5512pt>
+Package pdftex.def Info: ./fig/nmf_1.png  used on input line 396.
+(pdftex.def)             Requested size: 270.905pt x 157.719pt.
+<./fig/nmf_2.png, id=61, 423.5022pt x 335.3328pt>
 File: ./fig/nmf_2.png Graphic file (type png)
 <use ./fig/nmf_2.png>
-Package pdftex.def Info: ./fig/nmf_2.png  used on input line 332.
-(pdftex.def)             Requested size: 177.44106pt x 141.70424pt.
-
-Underfull \vbox (badness 4341) has occurred while \output is active []
-
- [6 <./fig/svd2_r_w.png>]
-report.tex:353: Undefined control sequence.
-l.353 \toprule
-              
-The control sequence at the end of the top line
-of your error message was never \def'ed. If you have
-misspelled it (e.g., `\hobx'), type `I' and the correct
-spelling (e.g., `I\hbox'). Otherwise just continue,
-and I'll forget about whatever was undefined.
+Package pdftex.def Info: ./fig/nmf_2.png  used on input line 402.
+(pdftex.def)             Requested size: 171.99922pt x 136.18767pt.
 
-report.tex:355: Undefined control sequence.
-<recently read> \midrule 
-                         
-l.355 \midrule
-              
-The control sequence at the end of the top line
-of your error message was never \def'ed. If you have
-misspelled it (e.g., `\hobx'), type `I' and the correct
-spelling (e.g., `I\hbox'). Otherwise just continue,
-and I'll forget about whatever was undefined.
-
-report.tex:362: Undefined control sequence.
-<recently read> \bottomrule 
-                            
-l.362 \bottomrule
-                 
-The control sequence at the end of the top line
-of your error message was never \def'ed. If you have
-misspelled it (e.g., `\hobx'), type `I' and the correct
-spelling (e.g., `I\hbox'). Otherwise just continue,
-and I'll forget about whatever was undefined.
-
-<./fig/nmf_r_w.png, id=53, 1084.05pt x 722.7pt>
-File: ./fig/nmf_r_w.png Graphic file (type png)
-<use ./fig/nmf_r_w.png>
-Package pdftex.def Info: ./fig/nmf_r_w.png  used on input line 372.
-(pdftex.def)             Requested size: 487.818pt x 325.21199pt.
-
-Overfull \hbox (57.81337pt too wide) in paragraph at lines 372--373
- [][] 
+Overfull \hbox (12.8996pt too wide) in paragraph at lines 394--406
+ []$[]$$[]$ 
  []
 
-
-Underfull \vbox (badness 1975) has occurred while \output is active []
+<./fig/nmf_r_w2.png, id=62, 485.56406pt x 379.4175pt>
+File: ./fig/nmf_r_w2.png Graphic file (type png)
+<use ./fig/nmf_r_w2.png>
+Package pdftex.def Info: ./fig/nmf_r_w2.png  used on input line 432.
+(pdftex.def)             Requested size: 291.34068pt x 227.65225pt.
+[9 <./fig/nmf_1.png> <./fig/nmf_2.png>] [10 <./fig/nmf_r_w2.png>] [11]
+(C:/Users\admin\PycharmProjects\MoCaDR_proj1\auxil\report.aux)
 
- [7 <./fig/nmf_1.png> <./fig/nmf_2.png>]
-File: ./fig/svd1_1.png Graphic file (type png)
-<use ./fig/svd1_1.png>
-Package pdftex.def Info: ./fig/svd1_1.png  used on input line 386.
-(pdftex.def)             Requested size: 234.30922pt x 141.70424pt.
+LaTeX Warning: Label(s) may have changed. Rerun to get cross-references right.
 
-Overfull \hbox (19.30692pt too wide) in paragraph at lines 386--389
- [][] 
- []
-
-File: ./fig/svd1_2.png Graphic file (type png)
-<use ./fig/svd1_2.png>
-Package pdftex.def Info: ./fig/svd1_2.png  used on input line 392.
-(pdftex.def)             Requested size: 177.44106pt x 141.70424pt.
-[8 <./fig/nmf_r_w.png>] [9]
-(C:/Users\admin\PycharmProjects\MoCaDR_proj1\auxil\report.aux) ) 
+ ) 
 Here is how much of TeX's memory you used:
- 6283 strings out of 481556
- 90971 string characters out of 2913869
- 335988 words of memory out of 3000000
- 21270 multiletter control sequences out of 15000+200000
+ 6291 strings out of 481556
+ 91184 string characters out of 2913869
+ 336989 words of memory out of 3000000
+ 21278 multiletter control sequences out of 15000+200000
  552539 words of font info for 78 fonts, out of 3000000 for 9000
  1302 hyphenation exceptions out of 8191
- 39i,10n,43p,815b,294s stack positions out of 5000i,500n,10000p,200000b,50000s
- <C:\Users\admi
-n\AppData\Local\MiKTeX\2.9\fonts/pk/ljfour/jknappen/ec/dpi600\ecss1095.pk> <C:\
-Users\admin\AppData\Local\MiKTeX\2.9\fonts/pk/ljfour/jknappen/ec/dpi600\ecrm080
-0.pk> <C:\Users\admin\AppData\Local\MiKTeX\2.9\fonts/pk/ljfour/jknappen/ec/dpi6
-00\ecti1095.pk> <C:\Users\admin\AppData\Local\MiKTeX\2.9\fonts/pk/ljfour/jknapp
-en/ec/dpi600\ecbx1095.pk> <C:\Users\admin\AppData\Local\MiKTeX\2.9\fonts/pk/ljf
-our/jknappen/ec/dpi600\eccc1095.pk> <C:\Users\admin\AppData\Local\MiKTeX\2.9\fo
-nts/pk/ljfour/jknappen/ec/dpi600\ecrm1095.pk> <C:\Users\admin\AppData\Local\MiK
-TeX\2.9\fonts/pk/ljfour/jknappen/ec/dpi600\ecrm1200.pk> <C:\Users\admin\AppData
-\Local\MiKTeX\2.9\fonts/pk/ljfour/jknappen/ec/dpi600\ecrm1728.pk><C:/Users/admi
-n/AppData/Local/Programs/MiKTeX 2.9/fonts/type1/public/amsfonts/cm/cmex10.pfb><
+ 39i,10n,43p,815b,321s stack positions out of 5000i,500n,10000p,200000b,50000s
+ <C:\Users\admin\AppData\Local\MiKTeX\2.9\fonts/pk/ljfour/jknappen/ec/dpi600\
+ecss1095.pk> <C:\Users\admin\AppData\Local\MiKTeX\2.9\fonts/pk/ljfour/jknappen/
+ec/dpi600\ecrm0800.pk> <C:\Users\admin\AppData\Local\MiKTeX\2.9\fonts/pk/ljfour
+/jknappen/ec/dpi600\ecti1095.pk> <C:\Users\admin\AppData\Local\MiKTeX\2.9\fonts
+/pk/ljfour/jknappen/ec/dpi600\ecbx1095.pk> <C:\Users\admin\AppData\Local\MiKTeX
+\2.9\fonts/pk/ljfour/jknappen/ec/dpi600\eccc1095.pk> <C:\Users\admin\AppData\Lo
+cal\MiKTeX\2.9\fonts/pk/ljfour/jknappen/ec/dpi600\ecrm1095.pk> <C:\Users\admin\
+AppData\Local\MiKTeX\2.9\fonts/pk/ljfour/jknappen/ec/dpi600\ecrm1200.pk> <C:\Us
+ers\admin\AppData\Local\MiKTeX\2.9\fonts/pk/ljfour/jknappen/ec/dpi600\ecrm1728.
+pk><C:/Users/admin/AppData/Local/Programs/MiKTeX 2.9/fonts/type1/public/amsfont
+s/cm/cmex10.pfb><C:/Users/admin/AppData/Local/Programs/MiKTeX 2.9/fonts/type1/p
+ublic/amsfonts/cm/cmmi10.pfb><C:/Users/admin/AppData/Local/Programs/MiKTeX 2.9/
+fonts/type1/public/amsfonts/cm/cmmi8.pfb><C:/Users/admin/AppData/Local/Programs
+/MiKTeX 2.9/fonts/type1/public/amsfonts/cm/cmmib10.pfb><C:/Users/admin/AppData/
+Local/Programs/MiKTeX 2.9/fonts/type1/public/amsfonts/cm/cmr10.pfb><C:/Users/ad
+min/AppData/Local/Programs/MiKTeX 2.9/fonts/type1/public/amsfonts/cm/cmr6.pfb><
 C:/Users/admin/AppData/Local/Programs/MiKTeX 2.9/fonts/type1/public/amsfonts/cm
-/cmmi10.pfb><C:/Users/admin/AppData/Local/Programs/MiKTeX 2.9/fonts/type1/publi
-c/amsfonts/cm/cmmi8.pfb><C:/Users/admin/AppData/Local/Programs/MiKTeX 2.9/fonts
-/type1/public/amsfonts/cm/cmmib10.pfb><C:/Users/admin/AppData/Local/Programs/Mi
-KTeX 2.9/fonts/type1/public/amsfonts/cm/cmr10.pfb><C:/Users/admin/AppData/Local
-/Programs/MiKTeX 2.9/fonts/type1/public/amsfonts/cm/cmr6.pfb><C:/Users/admin/Ap
-pData/Local/Programs/MiKTeX 2.9/fonts/type1/public/amsfonts/cm/cmr8.pfb><C:/Use
-rs/admin/AppData/Local/Programs/MiKTeX 2.9/fonts/type1/public/amsfonts/cm/cmsy1
-0.pfb><C:/Users/admin/AppData/Local/Programs/MiKTeX 2.9/fonts/type1/public/amsf
-onts/cm/cmsy6.pfb><C:/Users/admin/AppData/Local/Programs/MiKTeX 2.9/fonts/type1
-/public/amsfonts/cm/cmsy8.pfb>
-Output written on C:/Users\admin\PycharmProjects\MoCaDR_proj1\out\report.pdf (9
- pages, 581368 bytes).
+/cmr8.pfb><C:/Users/admin/AppData/Local/Programs/MiKTeX 2.9/fonts/type1/public/
+amsfonts/cm/cmsy10.pfb><C:/Users/admin/AppData/Local/Programs/MiKTeX 2.9/fonts/
+type1/public/amsfonts/cm/cmsy6.pfb><C:/Users/admin/AppData/Local/Programs/MiKTe
+X 2.9/fonts/type1/public/amsfonts/cm/cmsy8.pfb>
+Output written on C:/Users\admin\PycharmProjects\MoCaDR_proj1\out\report.pdf (1
+1 pages, 660324 bytes).
 PDF statistics:
- 322 PDF objects out of 1000 (max. 8388607)
+ 357 PDF objects out of 1000 (max. 8388607)
  0 named destinations out of 1000 (max. 500000)
- 46 words of extra memory for PDF output out of 10000 (max. 10000000)
+ 51 words of extra memory for PDF output out of 10000 (max. 10000000)
 
Index: src/presenting_results.ipynb
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/presenting_results.ipynb b/src/presenting_results.ipynb
--- a/src/presenting_results.ipynb	(revision cca69d005446496a4a742e962b2259b3813e93f9)
+++ b/src/presenting_results.ipynb	(date 1649609480250)
@@ -2,7 +2,7 @@
  "cells": [
   {
    "cell_type": "code",
-   "execution_count": 13,
+   "execution_count": 16,
    "outputs": [],
    "source": [
     "import pandas as pd\n",
@@ -14,7 +14,7 @@
     "import matplotlib.pyplot as plt\n",
     "from matplotlib import cm\n",
     "from matplotlib.ticker import LinearLocator, FormatStrFormatter\n",
-    "os.chdir('D:\\Studia\\MoCaDR_proj1')"
+    "os.chdir('C:/Users/admin/PycharmProjects/MoCaDR_proj1')"
    ],
    "metadata": {
     "collapsed": false,
@@ -265,7 +265,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 7,
+   "execution_count": 18,
    "outputs": [],
    "source": [
     "res_svd2_stop = pd.read_csv('Results/results_stop_svd2.csv')"
@@ -304,17 +304,9 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 34,
+   "execution_count": 19,
    "outputs": [
     {
-     "data": {
-      "text/plain": "<matplotlib.colorbar.Colorbar at 0x13b106368c0>"
-     },
-     "execution_count": 34,
-     "metadata": {},
-     "output_type": "execute_result"
-    },
-    {
      "data": {
       "text/plain": "<Figure size 1080x720 with 2 Axes>",
       "image/png": "\n"
@@ -335,7 +327,57 @@
     "ax.set_ylabel('$r$', fontsize=17, color='red', labelpad=10)\n",
     "ax.set_zlabel('RMSE', rotation=-90, fontsize=17, color='red', labelpad=10)\n",
     "# Add a color bar which maps values to colors.\n",
-    "fig.colorbar(surf, shrink=0.5, aspect=20)"
+    "fig.colorbar(surf, shrink=0.5, aspect=20)\n",
+    "\n",
+    "plt.savefig('Report/fig/svd2_stop.png')"
+   ],
+   "metadata": {
+    "collapsed": false,
+    "pycharm": {
+     "name": "#%%\n"
+    }
+   }
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 23,
+   "outputs": [
+    {
+     "data": {
+      "text/plain": "       stop   r      RMSE\n378  0.0086   9  0.879578\n356  0.0085   9  0.880032\n400  0.0087   9  0.880051\n421  0.0088   8  0.880321\n232  0.0079  17  0.880356\n399  0.0087   8  0.880363\n210  0.0078  17  0.880485\n299  0.0082  18  0.880578\n275  0.0081  16  0.880597\n384  0.0086  15  0.880600",
+      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>stop</th>\n      <th>r</th>\n      <th>RMSE</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>378</th>\n      <td>0.0086</td>\n      <td>9</td>\n      <td>0.879578</td>\n    </tr>\n    <tr>\n      <th>356</th>\n      <td>0.0085</td>\n      <td>9</td>\n      <td>0.880032</td>\n    </tr>\n    <tr>\n      <th>400</th>\n      <td>0.0087</td>\n      <td>9</td>\n      <td>0.880051</td>\n    </tr>\n    <tr>\n      <th>421</th>\n      <td>0.0088</td>\n      <td>8</td>\n      <td>0.880321</td>\n    </tr>\n    <tr>\n      <th>232</th>\n      <td>0.0079</td>\n      <td>17</td>\n      <td>0.880356</td>\n    </tr>\n    <tr>\n      <th>399</th>\n      <td>0.0087</td>\n      <td>8</td>\n      <td>0.880363</td>\n    </tr>\n    <tr>\n      <th>210</th>\n      <td>0.0078</td>\n      <td>17</td>\n      <td>0.880485</td>\n    </tr>\n    <tr>\n      <th>299</th>\n      <td>0.0082</td>\n      <td>18</td>\n      <td>0.880578</td>\n    </tr>\n    <tr>\n      <th>275</th>\n      <td>0.0081</td>\n      <td>16</td>\n      <td>0.880597</td>\n    </tr>\n    <tr>\n      <th>384</th>\n      <td>0.0086</td>\n      <td>15</td>\n      <td>0.880600</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
+     },
+     "execution_count": 23,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "n=10\n",
+    "res_svd2_stop.loc[res_svd2_stop.apply(lambda x: pd.Series(x.nsmallest(n).index))['RMSE']]"
+   ],
+   "metadata": {
+    "collapsed": false,
+    "pycharm": {
+     "name": "#%%\n"
+    }
+   }
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 26,
+   "outputs": [
+    {
+     "data": {
+      "text/plain": "stop     0.008318\nr       19.318182\nRMSE     0.882027\ndtype: float64"
+     },
+     "execution_count": 26,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "res_svd2_stop.loc[res_svd2_stop.groupby('r').idxmin()['RMSE']].mean()"
    ],
    "metadata": {
     "collapsed": false,
@@ -402,6 +444,30 @@
     "n = 10\n",
     "res_svd1_3d.loc[res_svd1_3d.apply(lambda x: pd.Series(x.nsmallest(n).index))['RMSE']]"
    ],
+   "metadata": {
+    "collapsed": false,
+    "pycharm": {
+     "name": "#%%\n"
+    }
+   }
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 24,
+   "outputs": [
+    {
+     "ename": "NameError",
+     "evalue": "name 'res_svd1_3d' is not defined",
+     "output_type": "error",
+     "traceback": [
+      "\u001B[1;31m---------------------------------------------------------------------------\u001B[0m",
+      "\u001B[1;31mNameError\u001B[0m                                 Traceback (most recent call last)",
+      "Input \u001B[1;32mIn [24]\u001B[0m, in \u001B[0;36m<cell line: 1>\u001B[1;34m()\u001B[0m\n\u001B[1;32m----> 1\u001B[0m \u001B[43mres_svd1_3d\u001B[49m\u001B[38;5;241m.\u001B[39mloc[res_svd1_3d\u001B[38;5;241m.\u001B[39mgroupby(\u001B[38;5;124m'\u001B[39m\u001B[38;5;124mr\u001B[39m\u001B[38;5;124m'\u001B[39m)\u001B[38;5;241m.\u001B[39midxmin()[\u001B[38;5;124m'\u001B[39m\u001B[38;5;124mRMSE\u001B[39m\u001B[38;5;124m'\u001B[39m]]\n",
+      "\u001B[1;31mNameError\u001B[0m: name 'res_svd1_3d' is not defined"
+     ]
+    }
+   ],
+   "source": [],
    "metadata": {
     "collapsed": false,
     "pycharm": {
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"62d33fe8-2ec7-4d31-9bba-7fa36bc76fcb\" name=\"Changes\" comment=\"computing results\">\r\n      <change afterPath=\"$PROJECT_DIR$/Results/results_sgd_all_2021.csv\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/src/compute_results_sgd_all.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/MoCaDR_proj1.iml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/MoCaDR_proj1.iml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/misc.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/misc.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_09_04_2022_18_50__Changes_.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_09_04_2022_18_50__Changes_.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_09_04_2022_22_22__Changes_.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_09_04_2022_22_22__Changes_.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/presenting_results.ipynb\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/presenting_results.ipynb\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"RMarkdown.document\" />\r\n        <option value=\"Jupyter Notebook\" />\r\n        <option value=\"Python Script\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitSEFilterConfiguration\">\r\n    <file-type-list>\r\n      <filtered-out-file-type name=\"LOCAL_BRANCH\" />\r\n      <filtered-out-file-type name=\"REMOTE_BRANCH\" />\r\n      <filtered-out-file-type name=\"TAG\" />\r\n      <filtered-out-file-type name=\"COMMIT_BY_MESSAGE\" />\r\n    </file-type-list>\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"267VjyGJ9wr8oG7c6vyJzNQTvFk\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\">\r\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">\r\n    <property name=\"ASKED_ADD_EXTERNAL_FILES\" value=\"true\" />\r\n    <property name=\"ASKED_SHARE_PROJECT_CONFIGURATION_FILES\" value=\"true\" />\r\n    <property name=\"RunOnceActivity.OpenProjectViewOnStart\" value=\"true\" />\r\n    <property name=\"RunOnceActivity.ShowReadmeOnStart\" value=\"true\" />\r\n    <property name=\"SHARE_PROJECT_CONFIGURATION_FILES\" value=\"true\" />\r\n    <property name=\"WebServerToolWindowFactoryState\" value=\"false\" />\r\n    <property name=\"last_opened_file_path\" value=\"$PROJECT_DIR$/Report\" />\r\n    <property name=\"node.js.detected.package.eslint\" value=\"true\" />\r\n    <property name=\"node.js.detected.package.tslint\" value=\"true\" />\r\n    <property name=\"node.js.selected.package.eslint\" value=\"(autodetect)\" />\r\n    <property name=\"node.js.selected.package.tslint\" value=\"(autodetect)\" />\r\n    <property name=\"settings.editor.selected.configurable\" value=\"configurable.group.language\" />\r\n  </component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"D:\\Studia\\MoCaDR_proj1\\Report\" />\r\n      <recent name=\"D:\\Studia\\MoCaDR_proj1\" />\r\n    </key>\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"D:\\Studia\\MoCaDR_proj1\\Report\\fig\\syf\" />\r\n      <recent name=\"D:\\Studia\\MoCaDR_proj1\\Results\\Syf\" />\r\n      <recent name=\"D:\\Studia\\MoCaDR_proj1\\Report\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\" selected=\"Python.compute_results_sgd_test\">\r\n    <configuration name=\"report\" type=\"LATEX_RUN_CONFIGURATION\" factoryName=\"LaTeX configuration factory\" temporary=\"true\">\r\n      <texify>\r\n        <compiler>PDFLATEX</compiler>\r\n        <compiler-path />\r\n        <sumatra-path />\r\n        <pdf-viewer>SUMATRA</pdf-viewer>\r\n        <viewer-command />\r\n        <compiler-arguments />\r\n        <envs />\r\n        <main-file>$PROJECT_DIR$/Report/report.tex</main-file>\r\n        <output-path>$PROJECT_DIR$/Report/out</output-path>\r\n        <auxil-path>$PROJECT_DIR$/Report/auxil</auxil-path>\r\n        <compile-twice>false</compile-twice>\r\n        <output-format>PDF</output-format>\r\n        <latex-distribution>MIKTEX</latex-distribution>\r\n        <has-been-run>true</has-been-run>\r\n        <bib-run-config>[]</bib-run-config>\r\n        <makeindex-run-config>[]</makeindex-run-config>\r\n      </texify>\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"compute_results3\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"MoCaDR_proj1\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/src\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/src/compute_results3.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"compute_results_sgd_test\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"MoCaDR_proj1\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/src\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/src/compute_results_sgd_test.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"manipulating_datasets\" type=\"PythonConfigurationType\" factoryName=\"Python\" nameIsGenerated=\"true\">\r\n      <module name=\"MoCaDR_proj1\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"D:\\Studia\\MoCaDR_proj1\\manipulating_datasets.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"performing_algorithms\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"MoCaDR_proj1\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/src\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/src/performing_algorithms.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"splitting_data\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"MoCaDR_proj1\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/splitting_data.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <list>\r\n      <item itemvalue=\"LaTeX.report\" />\r\n      <item itemvalue=\"Python.manipulating_datasets\" />\r\n      <item itemvalue=\"Python.compute_results3\" />\r\n      <item itemvalue=\"Python.performing_algorithms\" />\r\n      <item itemvalue=\"Python.splitting_data\" />\r\n      <item itemvalue=\"Python.compute_results_sgd_test\" />\r\n    </list>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Python.compute_results_sgd_test\" />\r\n        <item itemvalue=\"LaTeX.report\" />\r\n        <item itemvalue=\"Python.splitting_data\" />\r\n        <item itemvalue=\"Python.performing_algorithms\" />\r\n        <item itemvalue=\"Python.compute_results3\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"SvnConfiguration\">\r\n    <configuration>C:\\Users\\dmika\\AppData\\Roaming\\Subversion</configuration>\r\n  </component>\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"62d33fe8-2ec7-4d31-9bba-7fa36bc76fcb\" name=\"Changes\" comment=\"\" />\r\n      <created>1646774751311</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1646774751311</updated>\r\n      <workItem from=\"1646774754054\" duration=\"26000\" />\r\n      <workItem from=\"1646774814002\" duration=\"835000\" />\r\n      <workItem from=\"1646775670059\" duration=\"47000\" />\r\n      <workItem from=\"1646775727774\" duration=\"757000\" />\r\n      <workItem from=\"1646816479175\" duration=\"461000\" />\r\n      <workItem from=\"1646896158453\" duration=\"762000\" />\r\n      <workItem from=\"1646896945682\" duration=\"630000\" />\r\n      <workItem from=\"1646897595717\" duration=\"2651000\" />\r\n      <workItem from=\"1646900622776\" duration=\"425000\" />\r\n      <workItem from=\"1646915517163\" duration=\"449000\" />\r\n      <workItem from=\"1646915983800\" duration=\"240000\" />\r\n      <workItem from=\"1646916258164\" duration=\"389000\" />\r\n      <workItem from=\"1646916663441\" duration=\"393000\" />\r\n      <workItem from=\"1646933050771\" duration=\"1105000\" />\r\n      <workItem from=\"1646936230049\" duration=\"1064000\" />\r\n      <workItem from=\"1647027781891\" duration=\"1279000\" />\r\n      <workItem from=\"1647071928401\" duration=\"2390000\" />\r\n      <workItem from=\"1647181792640\" duration=\"2955000\" />\r\n      <workItem from=\"1647276453225\" duration=\"264000\" />\r\n      <workItem from=\"1647276734574\" duration=\"7710000\" />\r\n      <workItem from=\"1647699257802\" duration=\"1713000\" />\r\n      <workItem from=\"1647774897107\" duration=\"5656000\" />\r\n      <workItem from=\"1648326375030\" duration=\"985000\" />\r\n      <workItem from=\"1648327394372\" duration=\"485000\" />\r\n      <workItem from=\"1648481964443\" duration=\"4660000\" />\r\n      <workItem from=\"1648576643019\" duration=\"4941000\" />\r\n      <workItem from=\"1648885683106\" duration=\"2799000\" />\r\n      <workItem from=\"1649100586613\" duration=\"401000\" />\r\n      <workItem from=\"1649142695450\" duration=\"1248000\" />\r\n      <workItem from=\"1649154173111\" duration=\"1535000\" />\r\n      <workItem from=\"1649225210342\" duration=\"2520000\" />\r\n      <workItem from=\"1649252977347\" duration=\"33000\" />\r\n      <workItem from=\"1649256897698\" duration=\"20000\" />\r\n      <workItem from=\"1649263859461\" duration=\"4502000\" />\r\n      <workItem from=\"1649340598453\" duration=\"3005000\" />\r\n      <workItem from=\"1649345448932\" duration=\"596000\" />\r\n      <workItem from=\"1649407349351\" duration=\"1672000\" />\r\n      <workItem from=\"1649429201664\" duration=\"3019000\" />\r\n      <workItem from=\"1649438274438\" duration=\"1751000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"a\">\r\n      <created>1646775274557</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646775274557</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"init commit\">\r\n      <created>1646775361377</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646775361377</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"init commit\">\r\n      <created>1646775521666</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646775521666</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"init commit\">\r\n      <created>1646775784756</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646775784756</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"init commit\">\r\n      <created>1646775870305</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646775870305</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"Adding dataset\">\r\n      <created>1646816860800</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646816860800</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"Setting up LaTeX\">\r\n      <created>1646898995949</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646898995949</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00008\" summary=\"Setting up LaTeX\">\r\n      <created>1646900639924</created>\r\n      <option name=\"number\" value=\"00008\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646900639924</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00009\" summary=\"Cleaning data\">\r\n      <created>1646934068924</created>\r\n      <option name=\"number\" value=\"00009\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646934068924</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00010\" summary=\"Cleaning data\">\r\n      <created>1647028888721</created>\r\n      <option name=\"number\" value=\"00010\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647028888721</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00011\" summary=\"Cleaning data\">\r\n      <created>1647029054319</created>\r\n      <option name=\"number\" value=\"00011\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647029054319</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00012\" summary=\"Tamarka testing\">\r\n      <created>1647163191686</created>\r\n      <option name=\"number\" value=\"00012\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00012\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647163191686</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00013\" summary=\"Experimenting with 'NaN' values\">\r\n      <created>1647168883206</created>\r\n      <option name=\"number\" value=\"00013\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00013\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647168883206</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00014\" summary=\"Experimenting with 'NaN' values\">\r\n      <created>1647175373237</created>\r\n      <option name=\"number\" value=\"00014\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00014\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647175373237</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00015\" summary=\"Removing duplicated packages\">\r\n      <created>1647175629524</created>\r\n      <option name=\"number\" value=\"00015\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00015\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647175629524</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00016\" summary=\"Testing methods\">\r\n      <created>1647184013664</created>\r\n      <option name=\"number\" value=\"00016\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00016\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647184013664</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00017\" summary=\"Testing methods\">\r\n      <created>1647184756535</created>\r\n      <option name=\"number\" value=\"00017\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00017\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647184756535</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00018\" summary=\"SVD opis Tamarka\">\r\n      <created>1647698852885</created>\r\n      <option name=\"number\" value=\"00018\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00018\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647698852885</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00019\" summary=\"SVD opis Tamarka\">\r\n      <created>1647699044053</created>\r\n      <option name=\"number\" value=\"00019\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00019\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647699044053</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00020\" summary=\"SVD opis Tamarka\">\r\n      <created>1647699173625</created>\r\n      <option name=\"number\" value=\"00020\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00020\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647699173625</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00021\" summary=\"Testing SVD2\">\r\n      <created>1648327858794</created>\r\n      <option name=\"number\" value=\"00021\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00021\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1648327858794</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00022\" summary=\"computing results\">\r\n      <created>1649155805892</created>\r\n      <option name=\"number\" value=\"00022\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00022\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1649155805892</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00023\" summary=\"Computing stop condition svd2\">\r\n      <created>1649345310151</created>\r\n      <option name=\"number\" value=\"00023\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00023\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1649345310151</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00024\" summary=\"Computing stop condition svd2\">\r\n      <created>1649408687739</created>\r\n      <option name=\"number\" value=\"00024\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00024\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1649408687739</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00025\" summary=\"Presenting results for NMF\">\r\n      <created>1649408979238</created>\r\n      <option name=\"number\" value=\"00025\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00025\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1649408979239</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00026\" summary=\"computing results\">\r\n      <created>1649434249565</created>\r\n      <option name=\"number\" value=\"00026\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00026\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1649434249565</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00027\" summary=\"computing results\">\r\n      <created>1649492068004</created>\r\n      <option name=\"number\" value=\"00027\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00027\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1649492068004</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00028\" summary=\"computing results\">\r\n      <created>1649518863744</created>\r\n      <option name=\"number\" value=\"00028\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00028\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1649518863744</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"29\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <option name=\"ADD_EXTERNAL_FILES_SILENTLY\" value=\"true\" />\r\n    <MESSAGE value=\"a\" />\r\n    <MESSAGE value=\"init commit\" />\r\n    <MESSAGE value=\"Adding dataset\" />\r\n    <MESSAGE value=\"Setting up LaTeX\" />\r\n    <MESSAGE value=\"Cleaning data\" />\r\n    <MESSAGE value=\"Tamarka testing\" />\r\n    <MESSAGE value=\"Experimenting with 'NaN' values\" />\r\n    <MESSAGE value=\"Removing duplicated packages\" />\r\n    <MESSAGE value=\"Testing methods\" />\r\n    <MESSAGE value=\"SVD opis Tamarka\" />\r\n    <MESSAGE value=\"Testing SVD2\" />\r\n    <MESSAGE value=\"Computing stop condition svd2\" />\r\n    <MESSAGE value=\"Presenting results for NMF\" />\r\n    <MESSAGE value=\"computing results\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"computing results\" />\r\n  </component>\r\n  <component name=\"com.intellij.coverage.CoverageDataManagerImpl\">\r\n    <SUITE FILE_PATH=\"coverage/main_py$splitting_manipulating_data.coverage\" NAME=\"splitting_manipulating_data Coverage Results\" MODIFIED=\"1648627073782\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/src\" />\r\n    <SUITE FILE_PATH=\"coverage/main_py$algorithm_functions.coverage\" NAME=\"algorithm_functions Coverage Results\" MODIFIED=\"1648826781925\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/src\" />\r\n    <SUITE FILE_PATH=\"coverage/main_py$computing_results.coverage\" NAME=\"computing_results Coverage Results\" MODIFIED=\"1648727756891\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/src\" />\r\n    <SUITE FILE_PATH=\"coverage/main_py$algorithms_script.coverage\" NAME=\"performing_algorithms Coverage Results\" MODIFIED=\"1647535849226\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/src\" />\r\n    <SUITE FILE_PATH=\"coverage/main_py$splitting_manipulating_data__1_.coverage\" NAME=\"splitting_manipulating_data (1) Coverage Results\" MODIFIED=\"1647870795349\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/src\" />\r\n    <SUITE FILE_PATH=\"coverage/main_py$a.coverage\" NAME=\"a Coverage Results\" MODIFIED=\"1648057368569\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/src\" />\r\n    <SUITE FILE_PATH=\"coverage/main_py$compute_results3.coverage\" NAME=\"compute_results3 Coverage Results\" MODIFIED=\"1649268385203\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/src\" />\r\n    <SUITE FILE_PATH=\"coverage/main_py$compute_results_sgd_test.coverage\" NAME=\"compute_results_sgd_test Coverage Results\" MODIFIED=\"1649528622400\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/src\" />\r\n    <SUITE FILE_PATH=\"coverage/MoCaDR_proj1$splitting_data.coverage\" NAME=\"splitting_data Coverage Results\" MODIFIED=\"1647174411611\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\r\n    <SUITE FILE_PATH=\"coverage/main_py$performing_algorithms__1_.coverage\" NAME=\"performing_algorithms (1) Coverage Results\" MODIFIED=\"1648057220868\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/src\" />\r\n    <SUITE FILE_PATH=\"coverage/main_py$performing_algorithms.coverage\" NAME=\"performing_algorithms Coverage Results\" MODIFIED=\"1648365686686\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/src\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision cca69d005446496a4a742e962b2259b3813e93f9)
+++ b/.idea/workspace.xml	(date 1649620047008)
@@ -4,20 +4,32 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="62d33fe8-2ec7-4d31-9bba-7fa36bc76fcb" name="Changes" comment="computing results">
-      <change afterPath="$PROJECT_DIR$/Results/results_sgd_all_2021.csv" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/compute_results_sgd_all.py" afterDir="false" />
+    <list default="true" id="62d33fe8-2ec7-4d31-9bba-7fa36bc76fcb" name="Changes" comment="Report">
+      <change afterPath="$PROJECT_DIR$/Report/fig/nmf_r_w2.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/Report/fig/svd1_r_w2.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/Report/fig/svd2_r_w2.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/Report/fig/svd2_stop.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/Report/fig/svd2_stop2.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/Report/fig/syf/svd2_stop2.png" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/MoCaDR_proj1.iml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/MoCaDR_proj1.iml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/misc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/misc.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_09_04_2022_18_50__Changes_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_09_04_2022_18_50__Changes_.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_09_04_2022_22_22__Changes_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_09_04_2022_22_22__Changes_.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_10_04_2022_09_43__Changes_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_10_04_2022_09_43__Changes_.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Report/report.tex" beforeDir="false" afterPath="$PROJECT_DIR$/Report/report.tex" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/auxil/report.aux" beforeDir="false" afterPath="$PROJECT_DIR$/auxil/report.aux" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/auxil/report.log" beforeDir="false" afterPath="$PROJECT_DIR$/auxil/report.log" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/report.pdf" beforeDir="false" afterPath="$PROJECT_DIR$/out/report.pdf" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/report.synctex.gz" beforeDir="false" afterPath="$PROJECT_DIR$/out/report.synctex.gz" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/presenting_results.ipynb" beforeDir="false" afterPath="$PROJECT_DIR$/src/presenting_results.ipynb" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
     <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
     <option name="LAST_RESOLUTION" value="IGNORE" />
+  </component>
+  <component name="ExportToHTMLSettings">
+    <option name="printScope" value="1" />
+    <option name="OUTPUT_DIRECTORY" value="$USER_HOME$/Downloads" />
   </component>
   <component name="FileTemplateManagerImpl">
     <option name="RECENT_TEMPLATES">
@@ -57,7 +69,7 @@
     <property name="RunOnceActivity.ShowReadmeOnStart" value="true" />
     <property name="SHARE_PROJECT_CONFIGURATION_FILES" value="true" />
     <property name="WebServerToolWindowFactoryState" value="false" />
-    <property name="last_opened_file_path" value="$PROJECT_DIR$/Report" />
+    <property name="last_opened_file_path" value="$USER_HOME$/Desktop" />
     <property name="node.js.detected.package.eslint" value="true" />
     <property name="node.js.detected.package.tslint" value="true" />
     <property name="node.js.selected.package.eslint" value="(autodetect)" />
@@ -66,16 +78,19 @@
   </component>
   <component name="RecentsManager">
     <key name="CopyFile.RECENT_KEYS">
+      <recent name="C:\Users\admin\Desktop" />
       <recent name="D:\Studia\MoCaDR_proj1\Report" />
       <recent name="D:\Studia\MoCaDR_proj1" />
     </key>
     <key name="MoveFile.RECENT_KEYS">
+      <recent name="C:\Users\admin\PycharmProjects\MoCaDR_proj1\Report\fig" />
+      <recent name="C:\Users\admin\PycharmProjects\MoCaDR_proj1\Report\fig\syf" />
       <recent name="D:\Studia\MoCaDR_proj1\Report\fig\syf" />
       <recent name="D:\Studia\MoCaDR_proj1\Results\Syf" />
       <recent name="D:\Studia\MoCaDR_proj1\Report" />
     </key>
   </component>
-  <component name="RunManager" selected="Python.compute_results_sgd_test">
+  <component name="RunManager" selected="LaTeX.report">
     <configuration name="report" type="LATEX_RUN_CONFIGURATION" factoryName="LaTeX configuration factory" temporary="true">
       <texify>
         <compiler>PDFLATEX</compiler>
@@ -86,8 +101,8 @@
         <compiler-arguments />
         <envs />
         <main-file>$PROJECT_DIR$/Report/report.tex</main-file>
-        <output-path>$PROJECT_DIR$/Report/out</output-path>
-        <auxil-path>$PROJECT_DIR$/Report/auxil</auxil-path>
+        <output-path>$PROJECT_DIR$/out</output-path>
+        <auxil-path>$PROJECT_DIR$/auxil</auxil-path>
         <compile-twice>false</compile-twice>
         <output-format>PDF</output-format>
         <latex-distribution>MIKTEX</latex-distribution>
@@ -119,28 +134,6 @@
       <option name="INPUT_FILE" value="" />
       <method v="2" />
     </configuration>
-    <configuration name="compute_results_sgd_test" type="PythonConfigurationType" factoryName="Python" temporary="true" nameIsGenerated="true">
-      <module name="MoCaDR_proj1" />
-      <option name="INTERPRETER_OPTIONS" value="" />
-      <option name="PARENT_ENVS" value="true" />
-      <envs>
-        <env name="PYTHONUNBUFFERED" value="1" />
-      </envs>
-      <option name="SDK_HOME" value="" />
-      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$/src" />
-      <option name="IS_MODULE_SDK" value="true" />
-      <option name="ADD_CONTENT_ROOTS" value="true" />
-      <option name="ADD_SOURCE_ROOTS" value="true" />
-      <EXTENSION ID="PythonCoverageRunConfigurationExtension" runner="coverage.py" />
-      <option name="SCRIPT_NAME" value="$PROJECT_DIR$/src/compute_results_sgd_test.py" />
-      <option name="PARAMETERS" value="" />
-      <option name="SHOW_COMMAND_LINE" value="false" />
-      <option name="EMULATE_TERMINAL" value="false" />
-      <option name="MODULE_MODE" value="false" />
-      <option name="REDIRECT_INPUT" value="false" />
-      <option name="INPUT_FILE" value="" />
-      <method v="2" />
-    </configuration>
     <configuration name="manipulating_datasets" type="PythonConfigurationType" factoryName="Python" nameIsGenerated="true">
       <module name="MoCaDR_proj1" />
       <option name="INTERPRETER_OPTIONS" value="" />
@@ -213,11 +206,9 @@
       <item itemvalue="Python.compute_results3" />
       <item itemvalue="Python.performing_algorithms" />
       <item itemvalue="Python.splitting_data" />
-      <item itemvalue="Python.compute_results_sgd_test" />
     </list>
     <recent_temporary>
       <list>
-        <item itemvalue="Python.compute_results_sgd_test" />
         <item itemvalue="LaTeX.report" />
         <item itemvalue="Python.splitting_data" />
         <item itemvalue="Python.performing_algorithms" />
@@ -275,6 +266,8 @@
       <workItem from="1649407349351" duration="1672000" />
       <workItem from="1649429201664" duration="3019000" />
       <workItem from="1649438274438" duration="1751000" />
+      <workItem from="1649535983650" duration="89000" />
+      <workItem from="1649608218240" duration="5154000" />
     </task>
     <task id="LOCAL-00001" summary="a">
       <created>1646775274557</created>
@@ -465,14 +458,7 @@
       <option name="project" value="LOCAL" />
       <updated>1649492068004</updated>
     </task>
-    <task id="LOCAL-00028" summary="computing results">
-      <created>1649518863744</created>
-      <option name="number" value="00028" />
-      <option name="presentableId" value="LOCAL-00028" />
-      <option name="project" value="LOCAL" />
-      <updated>1649518863744</updated>
-    </task>
-    <option name="localTasksCounter" value="29" />
+    <option name="localTasksCounter" value="28" />
     <servers />
   </component>
   <component name="TypeScriptGeneratedFilesManager">
@@ -508,16 +494,15 @@
     <option name="LAST_COMMIT_MESSAGE" value="computing results" />
   </component>
   <component name="com.intellij.coverage.CoverageDataManagerImpl">
-    <SUITE FILE_PATH="coverage/main_py$splitting_manipulating_data.coverage" NAME="splitting_manipulating_data Coverage Results" MODIFIED="1648627073782" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/src" />
-    <SUITE FILE_PATH="coverage/main_py$algorithm_functions.coverage" NAME="algorithm_functions Coverage Results" MODIFIED="1648826781925" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/src" />
-    <SUITE FILE_PATH="coverage/main_py$computing_results.coverage" NAME="computing_results Coverage Results" MODIFIED="1648727756891" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/src" />
+    <SUITE FILE_PATH="coverage/main_py$performing_algorithms.coverage" NAME="performing_algorithms Coverage Results" MODIFIED="1647784050444" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/src" />
     <SUITE FILE_PATH="coverage/main_py$algorithms_script.coverage" NAME="performing_algorithms Coverage Results" MODIFIED="1647535849226" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/src" />
+    <SUITE FILE_PATH="coverage/main_py$splitting_manipulating_data.coverage" NAME="splitting_manipulating_data Coverage Results" MODIFIED="1648627073782" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/src" />
+    <SUITE FILE_PATH="coverage/main_py$performing_algorithms__1_.coverage" NAME="performing_algorithms (1) Coverage Results" MODIFIED="1648057220868" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/src" />
     <SUITE FILE_PATH="coverage/main_py$splitting_manipulating_data__1_.coverage" NAME="splitting_manipulating_data (1) Coverage Results" MODIFIED="1647870795349" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/src" />
-    <SUITE FILE_PATH="coverage/main_py$a.coverage" NAME="a Coverage Results" MODIFIED="1648057368569" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/src" />
     <SUITE FILE_PATH="coverage/main_py$compute_results3.coverage" NAME="compute_results3 Coverage Results" MODIFIED="1649268385203" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/src" />
-    <SUITE FILE_PATH="coverage/main_py$compute_results_sgd_test.coverage" NAME="compute_results_sgd_test Coverage Results" MODIFIED="1649528622400" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/src" />
     <SUITE FILE_PATH="coverage/MoCaDR_proj1$splitting_data.coverage" NAME="splitting_data Coverage Results" MODIFIED="1647174411611" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
-    <SUITE FILE_PATH="coverage/main_py$performing_algorithms__1_.coverage" NAME="performing_algorithms (1) Coverage Results" MODIFIED="1648057220868" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/src" />
-    <SUITE FILE_PATH="coverage/main_py$performing_algorithms.coverage" NAME="performing_algorithms Coverage Results" MODIFIED="1648365686686" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/src" />
+    <SUITE FILE_PATH="coverage/main_py$a.coverage" NAME="a Coverage Results" MODIFIED="1648057368569" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/src" />
+    <SUITE FILE_PATH="coverage/main_py$algorithm_functions.coverage" NAME="algorithm_functions Coverage Results" MODIFIED="1648826781925" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/src" />
+    <SUITE FILE_PATH="coverage/main_py$computing_results.coverage" NAME="computing_results Coverage Results" MODIFIED="1648727756891" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/src" />
   </component>
 </project>
\ No newline at end of file
