Index: .idea/shelf/Uncommitted_changes_before_Update_at_11_04_2022_17_08_[Changes]/shelved.patch
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_11_04_2022_17_08_[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_11_04_2022_17_08_[Changes]/shelved.patch
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_11_04_2022_17_08_[Changes]/shelved.patch	
+++ /dev/null	
@@ -1,1297 +0,0 @@
-Index: src/compute_results_sgd_reps.py
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/src/compute_results_sgd_reps.py b/src/compute_results_sgd_reps.py
-new file mode 100644
---- /dev/null	(date 1649674699729)
-+++ b/src/compute_results_sgd_reps.py	(date 1649674699729)
-@@ -0,0 +1,24 @@
-+from src.algorithm_functions import *
-+from tqdm import tqdm
-+
-+os.chdir('D:\Studia\MoCaDR_proj1')
-+
-+rep_vec = np.arange(20) + 1
-+lambda_vec = np.array([0.011, 0.0099])
-+eta_vec = np.array([0.001, 0.004, 0.007])
-+r_vec = np.array([2, 4, 7, 9, 16])
-+combs = np.array(np.meshgrid(rep_vec, lambda_vec, eta_vec, r_vec)).T.reshape(-1, 4)
-+results = pd.DataFrame(combs)
-+results['RMSE'] = 0.0
-+results.columns = ['rep', 'lambda', 'eta', 'r', 'RMSE']
-+results = results.reset_index()
-+
-+for ix, row in tqdm(results.iterrows()):
-+    train_df, test_array = split_ratings('Datasets/ratings.csv')
-+    global_mean = train_df.mean().mean()
-+    n, d = train_df.shape
-+    W = np.matrix(np.full((n, int(row['r'])), np.sqrt(global_mean) / np.sqrt(row['r'])), dtype=np.longdouble)
-+    H = np.matrix(np.full((int(row['r']), d), np.sqrt(global_mean) / np.sqrt(int(row['r']))), dtype=np.longdouble)
-+    results.loc[ix, 'RMSE'] = perform_sgd(train_df, test_array, init_W=W, init_H=H, r=int(row['r']), lada=row['lambda'],
-+                                          learning_rate=row['eta'], max_iter=10000, min_diff=5e-10)[0]
-+    results.to_csv('Results/results_sgd_reps.csv', index=False)
-\ No newline at end of file
-Index: .idea/workspace.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"62d33fe8-2ec7-4d31-9bba-7fa36bc76fcb\" name=\"Changes\" comment=\"computing results for sgd and correcting plots\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/presenting_results.ipynb\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/presenting_results.ipynb\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"RMarkdown.document\" />\r\n        <option value=\"Jupyter Notebook\" />\r\n        <option value=\"Python Script\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitSEFilterConfiguration\">\r\n    <file-type-list>\r\n      <filtered-out-file-type name=\"LOCAL_BRANCH\" />\r\n      <filtered-out-file-type name=\"REMOTE_BRANCH\" />\r\n      <filtered-out-file-type name=\"TAG\" />\r\n      <filtered-out-file-type name=\"COMMIT_BY_MESSAGE\" />\r\n    </file-type-list>\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"267VjyGJ9wr8oG7c6vyJzNQTvFk\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\">\r\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">\r\n    <property name=\"ASKED_ADD_EXTERNAL_FILES\" value=\"true\" />\r\n    <property name=\"ASKED_SHARE_PROJECT_CONFIGURATION_FILES\" value=\"true\" />\r\n    <property name=\"RunOnceActivity.OpenProjectViewOnStart\" value=\"true\" />\r\n    <property name=\"RunOnceActivity.ShowReadmeOnStart\" value=\"true\" />\r\n    <property name=\"SHARE_PROJECT_CONFIGURATION_FILES\" value=\"true\" />\r\n    <property name=\"WebServerToolWindowFactoryState\" value=\"false\" />\r\n    <property name=\"last_opened_file_path\" value=\"$PROJECT_DIR$/Report\" />\r\n    <property name=\"node.js.detected.package.eslint\" value=\"true\" />\r\n    <property name=\"node.js.detected.package.tslint\" value=\"true\" />\r\n    <property name=\"node.js.selected.package.eslint\" value=\"(autodetect)\" />\r\n    <property name=\"node.js.selected.package.tslint\" value=\"(autodetect)\" />\r\n    <property name=\"settings.editor.selected.configurable\" value=\"configurable.group.language\" />\r\n  </component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"D:\\Studia\\MoCaDR_proj1\\Report\" />\r\n      <recent name=\"D:\\Studia\\MoCaDR_proj1\" />\r\n    </key>\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"D:\\Studia\\MoCaDR_proj1\\Report\\fig\\syf\" />\r\n      <recent name=\"D:\\Studia\\MoCaDR_proj1\\Results\\Syf\" />\r\n      <recent name=\"D:\\Studia\\MoCaDR_proj1\\Report\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\" selected=\"Python.compute_results_sgd_test\">\r\n    <configuration name=\"report\" type=\"LATEX_RUN_CONFIGURATION\" factoryName=\"LaTeX configuration factory\" temporary=\"true\">\r\n      <texify>\r\n        <compiler>PDFLATEX</compiler>\r\n        <compiler-path />\r\n        <sumatra-path />\r\n        <pdf-viewer>SUMATRA</pdf-viewer>\r\n        <viewer-command />\r\n        <compiler-arguments />\r\n        <envs />\r\n        <main-file>$PROJECT_DIR$/Report/report.tex</main-file>\r\n        <output-path>$PROJECT_DIR$/Report/out</output-path>\r\n        <auxil-path>$PROJECT_DIR$/Report/auxil</auxil-path>\r\n        <compile-twice>false</compile-twice>\r\n        <output-format>PDF</output-format>\r\n        <latex-distribution>MIKTEX</latex-distribution>\r\n        <has-been-run>true</has-been-run>\r\n        <bib-run-config>[]</bib-run-config>\r\n        <makeindex-run-config>[]</makeindex-run-config>\r\n      </texify>\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"compute_results3\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"MoCaDR_proj1\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/src\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/src/compute_results3.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"compute_results_sgd_test\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"MoCaDR_proj1\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/src\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/src/compute_results_sgd_test.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"manipulating_datasets\" type=\"PythonConfigurationType\" factoryName=\"Python\" nameIsGenerated=\"true\">\r\n      <module name=\"MoCaDR_proj1\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"D:\\Studia\\MoCaDR_proj1\\manipulating_datasets.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"performing_algorithms\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"MoCaDR_proj1\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/src\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/src/performing_algorithms.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"splitting_data\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"MoCaDR_proj1\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/splitting_data.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <list>\r\n      <item itemvalue=\"LaTeX.report\" />\r\n      <item itemvalue=\"Python.manipulating_datasets\" />\r\n      <item itemvalue=\"Python.compute_results3\" />\r\n      <item itemvalue=\"Python.performing_algorithms\" />\r\n      <item itemvalue=\"Python.splitting_data\" />\r\n      <item itemvalue=\"Python.compute_results_sgd_test\" />\r\n    </list>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Python.compute_results_sgd_test\" />\r\n        <item itemvalue=\"LaTeX.report\" />\r\n        <item itemvalue=\"Python.splitting_data\" />\r\n        <item itemvalue=\"Python.performing_algorithms\" />\r\n        <item itemvalue=\"Python.compute_results3\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"SvnConfiguration\">\r\n    <configuration>C:\\Users\\dmika\\AppData\\Roaming\\Subversion</configuration>\r\n  </component>\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"62d33fe8-2ec7-4d31-9bba-7fa36bc76fcb\" name=\"Changes\" comment=\"\" />\r\n      <created>1646774751311</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1646774751311</updated>\r\n      <workItem from=\"1646774754054\" duration=\"26000\" />\r\n      <workItem from=\"1646774814002\" duration=\"835000\" />\r\n      <workItem from=\"1646775670059\" duration=\"47000\" />\r\n      <workItem from=\"1646775727774\" duration=\"757000\" />\r\n      <workItem from=\"1646816479175\" duration=\"461000\" />\r\n      <workItem from=\"1646896158453\" duration=\"762000\" />\r\n      <workItem from=\"1646896945682\" duration=\"630000\" />\r\n      <workItem from=\"1646897595717\" duration=\"2651000\" />\r\n      <workItem from=\"1646900622776\" duration=\"425000\" />\r\n      <workItem from=\"1646915517163\" duration=\"449000\" />\r\n      <workItem from=\"1646915983800\" duration=\"240000\" />\r\n      <workItem from=\"1646916258164\" duration=\"389000\" />\r\n      <workItem from=\"1646916663441\" duration=\"393000\" />\r\n      <workItem from=\"1646933050771\" duration=\"1105000\" />\r\n      <workItem from=\"1646936230049\" duration=\"1064000\" />\r\n      <workItem from=\"1647027781891\" duration=\"1279000\" />\r\n      <workItem from=\"1647071928401\" duration=\"2390000\" />\r\n      <workItem from=\"1647181792640\" duration=\"2955000\" />\r\n      <workItem from=\"1647276453225\" duration=\"264000\" />\r\n      <workItem from=\"1647276734574\" duration=\"7710000\" />\r\n      <workItem from=\"1647699257802\" duration=\"1713000\" />\r\n      <workItem from=\"1647774897107\" duration=\"5656000\" />\r\n      <workItem from=\"1648326375030\" duration=\"985000\" />\r\n      <workItem from=\"1648327394372\" duration=\"485000\" />\r\n      <workItem from=\"1648481964443\" duration=\"4660000\" />\r\n      <workItem from=\"1648576643019\" duration=\"4941000\" />\r\n      <workItem from=\"1648885683106\" duration=\"2799000\" />\r\n      <workItem from=\"1649100586613\" duration=\"401000\" />\r\n      <workItem from=\"1649142695450\" duration=\"1248000\" />\r\n      <workItem from=\"1649154173111\" duration=\"1535000\" />\r\n      <workItem from=\"1649225210342\" duration=\"2520000\" />\r\n      <workItem from=\"1649252977347\" duration=\"33000\" />\r\n      <workItem from=\"1649256897698\" duration=\"20000\" />\r\n      <workItem from=\"1649263859461\" duration=\"4502000\" />\r\n      <workItem from=\"1649340598453\" duration=\"3005000\" />\r\n      <workItem from=\"1649345448932\" duration=\"596000\" />\r\n      <workItem from=\"1649407349351\" duration=\"1672000\" />\r\n      <workItem from=\"1649429201664\" duration=\"3019000\" />\r\n      <workItem from=\"1649438274438\" duration=\"1751000\" />\r\n      <workItem from=\"1649601806697\" duration=\"9000\" />\r\n      <workItem from=\"1649617160604\" duration=\"489000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"a\">\r\n      <created>1646775274557</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646775274557</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"init commit\">\r\n      <created>1646775361377</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646775361377</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"init commit\">\r\n      <created>1646775521666</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646775521666</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"init commit\">\r\n      <created>1646775784756</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646775784756</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"init commit\">\r\n      <created>1646775870305</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646775870305</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"Adding dataset\">\r\n      <created>1646816860800</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646816860800</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"Setting up LaTeX\">\r\n      <created>1646898995949</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646898995949</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00008\" summary=\"Setting up LaTeX\">\r\n      <created>1646900639924</created>\r\n      <option name=\"number\" value=\"00008\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646900639924</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00009\" summary=\"Cleaning data\">\r\n      <created>1646934068924</created>\r\n      <option name=\"number\" value=\"00009\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646934068924</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00010\" summary=\"Cleaning data\">\r\n      <created>1647028888721</created>\r\n      <option name=\"number\" value=\"00010\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647028888721</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00011\" summary=\"Cleaning data\">\r\n      <created>1647029054319</created>\r\n      <option name=\"number\" value=\"00011\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647029054319</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00012\" summary=\"Tamarka testing\">\r\n      <created>1647163191686</created>\r\n      <option name=\"number\" value=\"00012\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00012\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647163191686</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00013\" summary=\"Experimenting with 'NaN' values\">\r\n      <created>1647168883206</created>\r\n      <option name=\"number\" value=\"00013\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00013\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647168883206</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00014\" summary=\"Experimenting with 'NaN' values\">\r\n      <created>1647175373237</created>\r\n      <option name=\"number\" value=\"00014\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00014\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647175373237</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00015\" summary=\"Removing duplicated packages\">\r\n      <created>1647175629524</created>\r\n      <option name=\"number\" value=\"00015\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00015\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647175629524</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00016\" summary=\"Testing methods\">\r\n      <created>1647184013664</created>\r\n      <option name=\"number\" value=\"00016\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00016\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647184013664</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00017\" summary=\"Testing methods\">\r\n      <created>1647184756535</created>\r\n      <option name=\"number\" value=\"00017\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00017\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647184756535</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00018\" summary=\"SVD opis Tamarka\">\r\n      <created>1647698852885</created>\r\n      <option name=\"number\" value=\"00018\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00018\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647698852885</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00019\" summary=\"SVD opis Tamarka\">\r\n      <created>1647699044053</created>\r\n      <option name=\"number\" value=\"00019\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00019\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647699044053</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00020\" summary=\"SVD opis Tamarka\">\r\n      <created>1647699173625</created>\r\n      <option name=\"number\" value=\"00020\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00020\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647699173625</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00021\" summary=\"Testing SVD2\">\r\n      <created>1648327858794</created>\r\n      <option name=\"number\" value=\"00021\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00021\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1648327858794</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00022\" summary=\"computing results\">\r\n      <created>1649155805892</created>\r\n      <option name=\"number\" value=\"00022\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00022\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1649155805892</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00023\" summary=\"Computing stop condition svd2\">\r\n      <created>1649345310151</created>\r\n      <option name=\"number\" value=\"00023\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00023\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1649345310151</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00024\" summary=\"Computing stop condition svd2\">\r\n      <created>1649408687739</created>\r\n      <option name=\"number\" value=\"00024\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00024\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1649408687739</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00025\" summary=\"Presenting results for NMF\">\r\n      <created>1649408979238</created>\r\n      <option name=\"number\" value=\"00025\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00025\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1649408979239</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00026\" summary=\"computing results\">\r\n      <created>1649434249565</created>\r\n      <option name=\"number\" value=\"00026\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00026\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1649434249565</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00027\" summary=\"computing results\">\r\n      <created>1649492068004</created>\r\n      <option name=\"number\" value=\"00027\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00027\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1649492068004</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00028\" summary=\"computing results\">\r\n      <created>1649518863744</created>\r\n      <option name=\"number\" value=\"00028\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00028\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1649518863744</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00029\" summary=\"computing results for sgd and correcting plots\">\r\n      <created>1649594927715</created>\r\n      <option name=\"number\" value=\"00029\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00029\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1649594927715</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00030\" summary=\"computing results for sgd and correcting plots\">\r\n      <created>1649594938450</created>\r\n      <option name=\"number\" value=\"00030\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00030\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1649594938450</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"31\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <option name=\"ADD_EXTERNAL_FILES_SILENTLY\" value=\"true\" />\r\n    <MESSAGE value=\"a\" />\r\n    <MESSAGE value=\"init commit\" />\r\n    <MESSAGE value=\"Adding dataset\" />\r\n    <MESSAGE value=\"Setting up LaTeX\" />\r\n    <MESSAGE value=\"Cleaning data\" />\r\n    <MESSAGE value=\"Tamarka testing\" />\r\n    <MESSAGE value=\"Experimenting with 'NaN' values\" />\r\n    <MESSAGE value=\"Removing duplicated packages\" />\r\n    <MESSAGE value=\"Testing methods\" />\r\n    <MESSAGE value=\"SVD opis Tamarka\" />\r\n    <MESSAGE value=\"Testing SVD2\" />\r\n    <MESSAGE value=\"Computing stop condition svd2\" />\r\n    <MESSAGE value=\"Presenting results for NMF\" />\r\n    <MESSAGE value=\"computing results\" />\r\n    <MESSAGE value=\"computing results for sgd and correcting plots\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"computing results for sgd and correcting plots\" />\r\n  </component>\r\n  <component name=\"com.intellij.coverage.CoverageDataManagerImpl\">\r\n    <SUITE FILE_PATH=\"coverage/main_py$splitting_manipulating_data.coverage\" NAME=\"splitting_manipulating_data Coverage Results\" MODIFIED=\"1648627073782\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/src\" />\r\n    <SUITE FILE_PATH=\"coverage/main_py$algorithm_functions.coverage\" NAME=\"algorithm_functions Coverage Results\" MODIFIED=\"1648826781925\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/src\" />\r\n    <SUITE FILE_PATH=\"coverage/main_py$computing_results.coverage\" NAME=\"computing_results Coverage Results\" MODIFIED=\"1648727756891\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/src\" />\r\n    <SUITE FILE_PATH=\"coverage/main_py$algorithms_script.coverage\" NAME=\"performing_algorithms Coverage Results\" MODIFIED=\"1647535849226\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/src\" />\r\n    <SUITE FILE_PATH=\"coverage/main_py$splitting_manipulating_data__1_.coverage\" NAME=\"splitting_manipulating_data (1) Coverage Results\" MODIFIED=\"1647870795349\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/src\" />\r\n    <SUITE FILE_PATH=\"coverage/main_py$a.coverage\" NAME=\"a Coverage Results\" MODIFIED=\"1648057368569\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/src\" />\r\n    <SUITE FILE_PATH=\"coverage/main_py$compute_results3.coverage\" NAME=\"compute_results3 Coverage Results\" MODIFIED=\"1649268385203\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/src\" />\r\n    <SUITE FILE_PATH=\"coverage/main_py$compute_results_sgd_test.coverage\" NAME=\"compute_results_sgd_test Coverage Results\" MODIFIED=\"1649528622400\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/src\" />\r\n    <SUITE FILE_PATH=\"coverage/MoCaDR_proj1$splitting_data.coverage\" NAME=\"splitting_data Coverage Results\" MODIFIED=\"1647174411611\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\r\n    <SUITE FILE_PATH=\"coverage/main_py$performing_algorithms__1_.coverage\" NAME=\"performing_algorithms (1) Coverage Results\" MODIFIED=\"1648057220868\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/src\" />\r\n    <SUITE FILE_PATH=\"coverage/main_py$performing_algorithms.coverage\" NAME=\"performing_algorithms Coverage Results\" MODIFIED=\"1648365686686\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/src\" />\r\n  </component>\r\n</project>
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/.idea/workspace.xml b/.idea/workspace.xml
---- a/.idea/workspace.xml	(revision 334daf19f542c19cd5f934002a5f6a1e6a2315c6)
-+++ b/.idea/workspace.xml	(date 1649689685997)
-@@ -5,7 +5,12 @@
-   </component>
-   <component name="ChangeListManager">
-     <list default="true" id="62d33fe8-2ec7-4d31-9bba-7fa36bc76fcb" name="Changes" comment="computing results for sgd and correcting plots">
-+      <change afterPath="$PROJECT_DIR$/src/compute_results_sgd_reps.py" afterDir="false" />
-       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-+      <change beforePath="$PROJECT_DIR$/Report/auxil/report.aux" beforeDir="false" afterPath="$PROJECT_DIR$/Report/auxil/report.aux" afterDir="false" />
-+      <change beforePath="$PROJECT_DIR$/Report/auxil/report.log" beforeDir="false" afterPath="$PROJECT_DIR$/Report/auxil/report.log" afterDir="false" />
-+      <change beforePath="$PROJECT_DIR$/Report/out/report.pdf" beforeDir="false" afterPath="$PROJECT_DIR$/Report/out/report.pdf" afterDir="false" />
-+      <change beforePath="$PROJECT_DIR$/Report/out/report.synctex.gz" beforeDir="false" afterPath="$PROJECT_DIR$/Report/out/report.synctex.gz" afterDir="false" />
-       <change beforePath="$PROJECT_DIR$/src/presenting_results.ipynb" beforeDir="false" afterPath="$PROJECT_DIR$/src/presenting_results.ipynb" afterDir="false" />
-     </list>
-     <option name="SHOW_DIALOG" value="false" />
-@@ -69,7 +74,7 @@
-       <recent name="D:\Studia\MoCaDR_proj1\Report" />
-     </key>
-   </component>
--  <component name="RunManager" selected="Python.compute_results_sgd_test">
-+  <component name="RunManager" selected="LaTeX.report">
-     <configuration name="report" type="LATEX_RUN_CONFIGURATION" factoryName="LaTeX configuration factory" temporary="true">
-       <texify>
-         <compiler>PDFLATEX</compiler>
-@@ -211,8 +216,8 @@
-     </list>
-     <recent_temporary>
-       <list>
--        <item itemvalue="Python.compute_results_sgd_test" />
-         <item itemvalue="LaTeX.report" />
-+        <item itemvalue="Python.compute_results_sgd_test" />
-         <item itemvalue="Python.splitting_data" />
-         <item itemvalue="Python.performing_algorithms" />
-         <item itemvalue="Python.compute_results3" />
-@@ -270,7 +275,8 @@
-       <workItem from="1649429201664" duration="3019000" />
-       <workItem from="1649438274438" duration="1751000" />
-       <workItem from="1649601806697" duration="9000" />
--      <workItem from="1649617160604" duration="489000" />
-+      <workItem from="1649617160604" duration="513000" />
-+      <workItem from="1649673294361" duration="2605000" />
-     </task>
-     <task id="LOCAL-00001" summary="a">
-       <created>1646775274557</created>
-@@ -482,7 +488,14 @@
-       <option name="project" value="LOCAL" />
-       <updated>1649594938450</updated>
-     </task>
--    <option name="localTasksCounter" value="31" />
-+    <task id="LOCAL-00031" summary="computing results for sgd and correcting plots">
-+      <created>1649617669345</created>
-+      <option name="number" value="00031" />
-+      <option name="presentableId" value="LOCAL-00031" />
-+      <option name="project" value="LOCAL" />
-+      <updated>1649617669345</updated>
-+    </task>
-+    <option name="localTasksCounter" value="32" />
-     <servers />
-   </component>
-   <component name="TypeScriptGeneratedFilesManager">
-Index: Report/auxil/report.log
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>This is pdfTeX, Version 3.14159265-2.6-1.40.21 (MiKTeX 2.9.7300 64-bit) (preloaded format=pdflatex 2020.3.10)  9 APR 2022 22:27\r\nentering extended mode\r\n**./report.tex\r\n(report.tex\r\nLaTeX2e <2020-02-02> patch level 2\r\nL3 programming layer <2020-02-14>\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/amscls\\amsart.cls\"\r\nDocument Class: amsart 2017/10/31 v2.20.4\r\n\\linespacing=\\dimen134\r\n\\normalparindent=\\dimen135\r\n\\normaltopskip=\\skip47\r\n\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/amsmath\\amsmath.st\r\ny\"\r\nPackage: amsmath 2020/01/20 v2.17e AMS math features\r\n\\@mathmargin=\\skip48\r\n\r\nFor additional information on amsmath, use the `?' option.\r\n\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/amsmath\\amstext.st\r\ny\"\r\nPackage: amstext 2000/06/29 v2.01 AMS text\r\n\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/amsmath\\amsgen.sty\r\n\"\r\nFile: amsgen.sty 1999/11/30 v2.0 generic functions\r\n\\@emptytoks=\\toks14\r\n\\ex@=\\dimen136\r\n))\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/amsmath\\amsbsy.sty\r\n\"\r\nPackage: amsbsy 1999/11/29 v1.2d Bold Symbols\r\n\\pmbraise@=\\dimen137\r\n)\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/amsmath\\amsopn.sty\r\n\"\r\nPackage: amsopn 2016/03/08 v2.02 operator names\r\n)\r\n\\inf@bad=\\count167\r\nLaTeX Info: Redefining \\frac on input line 227.\r\n\\uproot@=\\count168\r\n\\leftroot@=\\count169\r\nLaTeX Info: Redefining \\overline on input line 389.\r\n\\classnum@=\\count170\r\n\\DOTSCASE@=\\count171\r\nLaTeX Info: Redefining \\ldots on input line 486.\r\nLaTeX Info: Redefining \\dots on input line 489.\r\nLaTeX Info: Redefining \\cdots on input line 610.\r\n\\Mathstrutbox@=\\box45\r\n\\strutbox@=\\box46\r\n\\big@size=\\dimen138\r\nLaTeX Font Info:    Redeclaring font encoding OML on input line 733.\r\nLaTeX Font Info:    Redeclaring font encoding OMS on input line 734.\r\n\\macc@depth=\\count172\r\n\\c@MaxMatrixCols=\\count173\r\n\\dotsspace@=\\muskip16\r\n\\c@parentequation=\\count174\r\n\\dspbrk@lvl=\\count175\r\n\\tag@help=\\toks15\r\n\\row@=\\count176\r\n\\column@=\\count177\r\n\\maxfields@=\\count178\r\n\\andhelp@=\\toks16\r\n\\eqnshift@=\\dimen139\r\n\\alignsep@=\\dimen140\r\n\\tagshift@=\\dimen141\r\n\\tagwidth@=\\dimen142\r\n\\totwidth@=\\dimen143\r\n\\lineht@=\\dimen144\r\n\\@envbody=\\toks17\r\n\\multlinegap=\\skip49\r\n\\multlinetaggap=\\skip50\r\n\\mathdisplay@stack=\\toks18\r\nLaTeX Info: Redefining \\[ on input line 2859.\r\nLaTeX Info: Redefining \\] on input line 2860.\r\n)\r\nLaTeX Font Info:    Trying to load font information for U+msa on input line 398\r\n.\r\n\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/amsfonts\\umsa.fd\"\r\nFile: umsa.fd 2013/01/14 v3.01 AMS symbols A\r\n)\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/amsfonts\\amsfonts.\r\nsty\"\r\nPackage: amsfonts 2013/01/14 v3.01 Basic AMSFonts support\r\n\\symAMSa=\\mathgroup4\r\n\\symAMSb=\\mathgroup5\r\nLaTeX Font Info:    Redeclaring math symbol \\hbar on input line 98.\r\nLaTeX Font Info:    Overwriting math alphabet `\\mathfrak' in version `bold'\r\n(Font)                  U/euf/m/n --> U/euf/b/n on input line 106.\r\n)\r\n\\copyins=\\insert199\r\n\\abstractbox=\\box47\r\n\\listisep=\\skip51\r\n\\c@part=\\count179\r\n\\c@section=\\count180\r\n\\c@subsection=\\count181\r\n\\c@subsubsection=\\count182\r\n\\c@paragraph=\\count183\r\n\\c@subparagraph=\\count184\r\n\\c@figure=\\count185\r\n\\c@table=\\count186\r\n\\abovecaptionskip=\\skip52\r\n\\belowcaptionskip=\\skip53\r\n\\captionindent=\\dimen145\r\n\\thm@style=\\toks19\r\n\\thm@bodyfont=\\toks20\r\n\\thm@headfont=\\toks21\r\n\\thm@notefont=\\toks22\r\n\\thm@headpunct=\\toks23\r\n\\thm@preskip=\\skip54\r\n\\thm@postskip=\\skip55\r\n\\thm@headsep=\\skip56\r\n\\dth@everypar=\\toks24\r\n)\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/float\\float.sty\"\r\nPackage: float 2001/11/08 v1.3d Float enhancements (AL)\r\n\\c@float@type=\\count187\r\n\\float@exts=\\toks25\r\n\\float@box=\\box48\r\n\\@float@everytoks=\\toks26\r\n\\@floatcapt=\\box49\r\n)\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/base\\fontenc.sty\"\r\nPackage: fontenc 2020/02/11 v2.0o Standard LaTeX package\r\n)\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/geometry\\geometry.\r\nsty\"\r\nPackage: geometry 2020/01/02 v5.9 Page Geometry\r\n\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/graphics\\keyval.st\r\ny\"\r\nPackage: keyval 2014/10/28 v1.15 key=value parser (DPC)\r\n\\KV@toks@=\\toks27\r\n)\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/generic/iftex\\ifvtex.sty\r\n\"\r\nPackage: ifvtex 2019/10/25 v1.7 ifvtex legacy package. Use iftex instead.\r\n (\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/generic/iftex\\iftex.sty\r\n\"\r\nPackage: iftex 2019/11/07 v1.0c TeX engine tests\r\n))\r\n\\Gm@cnth=\\count188\r\n\\Gm@cntv=\\count189\r\n\\c@Gm@tempcnt=\\count190\r\n\\Gm@bindingoffset=\\dimen146\r\n\\Gm@wd@mp=\\dimen147\r\n\\Gm@odd@mp=\\dimen148\r\n\\Gm@even@mp=\\dimen149\r\n\\Gm@layoutwidth=\\dimen150\r\n\\Gm@layoutheight=\\dimen151\r\n\\Gm@layouthoffset=\\dimen152\r\n\\Gm@layoutvoffset=\\dimen153\r\n\\Gm@dimlist=\\toks28\r\n\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/geometry\\geometry.\r\ncfg\"))\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/parskip\\parskip.st\r\ny\"\r\nPackage: parskip 2020-01-22 v2.0d non-zero parskip adjustments\r\n\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/kvoptions\\kvoption\r\ns.sty\"\r\nPackage: kvoptions 2019/11/29 v3.13 Key value format for package options (HO)\r\n\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/generic/ltxcmds\\ltxcmds.\r\nsty\"\r\nPackage: ltxcmds 2019/12/15 v1.24 LaTeX kernel commands for general use (HO)\r\n)\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/generic/kvsetkeys\\kvsetk\r\neys.sty\"\r\nPackage: kvsetkeys 2019/12/15 v1.18 Key value parser (HO)\r\n))\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/etoolbox\\etoolbox.\r\nsty\"\r\nPackage: etoolbox 2019/09/21 v2.5h e-TeX tools for LaTeX (JAW)\r\n\\etb@tempcnta=\\count191\r\n)\r\nCouldn't patch \\@starttoc\r\n)\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/amsfonts\\amssymb.s\r\nty\"\r\nPackage: amssymb 2013/01/14 v3.01 AMS font symbols\r\n)\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/titling\\titling.st\r\ny\"\r\nPackage: titling 2009/09/04 v2.1d maketitle typesetting\r\n\\thanksmarkwidth=\\skip57\r\n\\thanksmargin=\\skip58\r\n\\droptitle=\\skip59\r\n)\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/tools\\enumerate.st\r\ny\"\r\nPackage: enumerate 2015/07/23 v3.00 enumerate extensions (DPC)\r\n\\@enLab=\\toks29\r\n)\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/multirow\\multirow.\r\nsty\"\r\nPackage: multirow 2019/05/31 v2.5 Span multiple rows of a table\r\n\\multirow@colwidth=\\skip60\r\n\\multirow@cntb=\\count192\r\n\\multirow@dima=\\skip61\r\n\\bigstrutjot=\\dimen154\r\n)\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/graphics\\graphics.\r\nsty\"\r\nPackage: graphics 2019/11/30 v1.4a Standard LaTeX Graphics (DPC,SPQR)\r\n\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/graphics\\trig.sty\"\r\nPackage: trig 2016/01/03 v1.10 sin cos tan (DPC)\r\n)\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/graphics-cfg\\graph\r\nics.cfg\"\r\nFile: graphics.cfg 2016/06/04 v1.11 sample graphics configuration\r\n)\r\nPackage graphics Info: Driver file: pdftex.def on input line 105.\r\n\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/graphics-def\\pdfte\r\nx.def\"\r\nFile: pdftex.def 2018/01/08 v1.0l Graphics/color driver for pdftex\r\n))\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/graphics\\graphicx.\r\nsty\"\r\nPackage: graphicx 2019/11/30 v1.2a Enhanced LaTeX Graphics (DPC,SPQR)\r\n\\Gin@req@height=\\dimen155\r\n\\Gin@req@width=\\dimen156\r\n)\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/caption\\caption.st\r\ny\"\r\nPackage: caption 2020/10/26 v3.5g Customizing captions (AR)\r\n\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/caption\\caption3.s\r\nty\"\r\nPackage: caption3 2020/10/21 v2.2e caption3 kernel (AR)\r\n\\captionmargin=\\dimen157\r\n\\captionmargin@=\\dimen158\r\n\\captionwidth=\\dimen159\r\n\\caption@tempdima=\\dimen160\r\n\\caption@indent=\\dimen161\r\n\\caption@parindent=\\dimen162\r\n\\caption@hangindent=\\dimen163\r\nPackage caption Info: AMS or SMF document class detected.\r\n\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/caption\\caption-am\r\ns-smf.sto\"\r\nFile: caption-ams-smf.sto 2020/08/22 v2.0 Adaption of the caption package to th\r\ne AMS and SMF document classes (AR)\r\n))\r\n\\c@caption@flags=\\count193\r\n\\c@continuedfloat=\\count194\r\nPackage caption Info: float package is loaded.\r\n)\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/tools\\array.sty\"\r\nPackage: array 2019/08/31 v2.4l Tabular extension package (FMi)\r\n\\col@sep=\\dimen164\r\n\\ar@mcellbox=\\box50\r\n\\extrarowheight=\\dimen165\r\n\\NC@list=\\toks30\r\n\\extratabsurround=\\skip62\r\n\\backup@length=\\skip63\r\n\\ar@cellbox=\\box51\r\n)\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/xcolor\\xcolor.sty\"\r\nPackage: xcolor 2016/05/11 v2.12 LaTeX color extensions (UK)\r\n\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/graphics-cfg\\color\r\n.cfg\"\r\nFile: color.cfg 2016/01/02 v1.6 sample color configuration\r\n)\r\nPackage xcolor Info: Driver file: pdftex.def on input line 225.\r\nPackage xcolor Info: Model `cmy' substituted by `cmy0' on input line 1348.\r\nPackage xcolor Info: Model `hsb' substituted by `rgb' on input line 1352.\r\nPackage xcolor Info: Model `RGB' extended on input line 1364.\r\nPackage xcolor Info: Model `HTML' substituted by `rgb' on input line 1366.\r\nPackage xcolor Info: Model `Hsb' substituted by `hsb' on input line 1367.\r\nPackage xcolor Info: Model `tHsb' substituted by `hsb' on input line 1368.\r\nPackage xcolor Info: Model `HSB' substituted by `hsb' on input line 1369.\r\nPackage xcolor Info: Model `Gray' substituted by `gray' on input line 1370.\r\nPackage xcolor Info: Model `wave' substituted by `hsb' on input line 1371.\r\n)\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/caption\\subcaption\r\n.sty\"\r\nPackage: subcaption 2020/10/07 v1.3j Sub-captions (AR)\r\n\\c@subfigure=\\count195\r\n\\c@subtable=\\count196\r\n)\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/l3backend\\l3backen\r\nd-pdfmode.def\"\r\nFile: l3backend-pdfmode.def 2020-02-03 L3 backend support: PDF mode\r\n\\l__kernel_color_stack_int=\\count197\r\n\\l__pdf_internal_box=\\box52\r\n)\r\n(C:/Users\\admin\\PycharmProjects\\MoCaDR_proj1\\Report\\out\\report.aux\r\n\r\nLaTeX Warning: Label `fig:figure' multiply defined.\r\n\r\n\r\nLaTeX Warning: Label `fig:figure' multiply defined.\r\n\r\n\r\nLaTeX Warning: Label `fig:figure' multiply defined.\r\n\r\n\r\nLaTeX Warning: Label `fig:figure' multiply defined.\r\n\r\n)\r\n\\openout1 = `report.aux'.\r\n\r\nLaTeX Font Info:    Checking defaults for OML/cmm/m/it on input line 44.\r\nLaTeX Font Info:    ... okay on input line 44.\r\nLaTeX Font Info:    Checking defaults for OMS/cmsy/m/n on input line 44.\r\nLaTeX Font Info:    ... okay on input line 44.\r\nLaTeX Font Info:    Checking defaults for OT1/cmr/m/n on input line 44.\r\nLaTeX Font Info:    ... okay on input line 44.\r\nLaTeX Font Info:    Checking defaults for T1/cmr/m/n on input line 44.\r\nLaTeX Font Info:    ... okay on input line 44.\r\nLaTeX Font Info:    Checking defaults for TS1/cmr/m/n on input line 44.\r\nLaTeX Font Info:    ... okay on input line 44.\r\nLaTeX Font Info:    Checking defaults for OMX/cmex/m/n on input line 44.\r\nLaTeX Font Info:    ... okay on input line 44.\r\nLaTeX Font Info:    Checking defaults for U/cmr/m/n on input line 44.\r\nLaTeX Font Info:    ... okay on input line 44.\r\nLaTeX Font Info:    Trying to load font information for U+msa on input line 44.\r\n\r\n (\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/amsfonts\\umsa.fd\"\r\nFile: umsa.fd 2013/01/14 v3.01 AMS symbols A\r\n)\r\nLaTeX Font Info:    Trying to load font information for U+msb on input line 44.\r\n\r\n (\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/amsfonts\\umsb.fd\"\r\nFile: umsb.fd 2013/01/14 v3.01 AMS symbols B\r\n)\r\n*geometry* driver: auto-detecting\r\n*geometry* detected driver: pdftex\r\n*geometry* verbose mode - [ preamble ] result:\r\n* driver: pdftex\r\n* paper: <default>\r\n* layout: <same size as paper>\r\n* layoutoffset:(h,v)=(0.0pt,0.0pt)\r\n* modes: twoside \r\n* h-part:(L,W,R)=(73.71613pt, 430.00462pt, 110.57425pt)\r\n* v-part:(T,H,B)=(95.39737pt, 556.47656pt, 143.09605pt)\r\n* \\paperwidth=614.295pt\r\n* \\paperheight=794.96999pt\r\n* \\textwidth=430.00462pt\r\n* \\textheight=556.47656pt\r\n* \\oddsidemargin=1.44614pt\r\n* \\evensidemargin=38.30426pt\r\n* \\topmargin=1.12738pt\r\n* \\headheight=8.0pt\r\n* \\headsep=14.0pt\r\n* \\topskip=10.0pt\r\n* \\footskip=12.0pt\r\n* \\marginparwidth=90.0pt\r\n* \\marginparsep=11.0pt\r\n* \\columnsep=10.0pt\r\n* \\skip\\footins=7.0pt plus 11.0pt\r\n* \\hoffset=0.0pt\r\n* \\voffset=0.0pt\r\n* \\mag=1000\r\n* \\@twocolumnfalse\r\n* \\@twosidetrue\r\n* \\@mparswitchtrue\r\n* \\@reversemarginfalse\r\n* (1in=72.27pt=25.4mm, 1cm=28.453pt)\r\n\r\n\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/context/base/mkii\\supp-p\r\ndf.mkii\"\r\n[Loading MPS to PDF converter (version 2006.09.02).]\r\n\\scratchcounter=\\count198\r\n\\scratchdimen=\\dimen166\r\n\\scratchbox=\\box53\r\n\\nofMPsegments=\\count266\r\n\\nofMParguments=\\count267\r\n\\everyMPshowfont=\\toks31\r\n\\MPscratchCnt=\\count268\r\n\\MPscratchDim=\\dimen167\r\n\\MPnumerator=\\count269\r\n\\makeMPintoPDFobject=\\count270\r\n\\everyMPtoPDFconversion=\\toks32\r\n)\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/epstopdf-pkg\\epsto\r\npdf-base.sty\"\r\nPackage: epstopdf-base 2020-01-24 v2.11 Base part for package epstopdf\r\nPackage epstopdf-base Info: Redefining graphics rule for `.eps' on input line 4\r\n85.\r\n)\r\nPackage caption Info: Begin \\AtBeginDocument code.\r\nPackage caption Info: End \\AtBeginDocument code.\r\n\r\n\r\nLaTeX Warning: No \\author given.\r\n\r\n[1{C:/Users/admin/AppData/Local/MiKTeX/2.9/pdftex/config/pdftex.map}]\r\nLaTeX Font Info:    Trying to load font information for T1+cmss on input line 1\r\n17.\r\n\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/base\\t1cmss.fd\"\r\nFile: t1cmss.fd 2019/12/16 v2.5j Standard LaTeX font definitions\r\n)\r\n[2]\r\n<./fig/svd1_1.png, id=26, 544.9158pt x 329.5512pt>\r\nFile: ./fig/svd1_1.png Graphic file (type png)\r\n<use ./fig/svd1_1.png>\r\nPackage pdftex.def Info: ./fig/svd1_1.png  used on input line 191.\r\n(pdftex.def)             Requested size: 234.30922pt x 141.70424pt.\r\n\r\nOverfull \\hbox (19.30692pt too wide) in paragraph at lines 191--194\r\n [][] \r\n []\r\n\r\n<./fig/svd1_2.png, id=28, 412.6617pt x 329.5512pt>\r\nFile: ./fig/svd1_2.png Graphic file (type png)\r\n<use ./fig/svd1_2.png>\r\nPackage pdftex.def Info: ./fig/svd1_2.png  used on input line 197.\r\n(pdftex.def)             Requested size: 177.44106pt x 141.70424pt.\r\n[3 <./fig/svd1_1.png> <./fig/svd1_2.png>]\r\n<fig/svd1_r_w.png, id=34, 1084.05pt x 722.7pt>\r\nFile: fig/svd1_r_w.png Graphic file (type png)\r\n<use fig/svd1_r_w.png>\r\nPackage pdftex.def Info: fig/svd1_r_w.png  used on input line 231.\r\n(pdftex.def)             Requested size: 487.818pt x 325.21199pt.\r\n\r\nOverfull \\hbox (57.81337pt too wide) in paragraph at lines 231--233\r\n [][] \r\n []\r\n\r\nreport.tex:238: Undefined control sequence.\r\nl.238 \\toprule\r\n              \r\nThe control sequence at the end of the top line\r\nof your error message was never \\def'ed. If you have\r\nmisspelled it (e.g., `\\hobx'), type `I' and the correct\r\nspelling (e.g., `I\\hbox'). Otherwise just continue,\r\nand I'll forget about whatever was undefined.\r\n\r\nreport.tex:240: Undefined control sequence.\r\n<recently read> \\midrule \r\n                         \r\nl.240 \\midrule\r\n              \r\nThe control sequence at the end of the top line\r\nof your error message was never \\def'ed. If you have\r\nmisspelled it (e.g., `\\hobx'), type `I' and the correct\r\nspelling (e.g., `I\\hbox'). Otherwise just continue,\r\nand I'll forget about whatever was undefined.\r\n\r\nreport.tex:247: Undefined control sequence.\r\n<recently read> \\bottomrule \r\n                            \r\nl.247 \\bottomrule\r\n                 \r\nThe control sequence at the end of the top line\r\nof your error message was never \\def'ed. If you have\r\nmisspelled it (e.g., `\\hobx'), type `I' and the correct\r\nspelling (e.g., `I\\hbox'). Otherwise just continue,\r\nand I'll forget about whatever was undefined.\r\n\r\n[4 <./fig/svd1_r_w.png>]\r\n<./fig/svd2_1.png, id=39, 544.9158pt x 329.5512pt>\r\nFile: ./fig/svd2_1.png Graphic file (type png)\r\n<use ./fig/svd2_1.png>\r\nPackage pdftex.def Info: ./fig/svd2_1.png  used on input line 277.\r\n(pdftex.def)             Requested size: 234.30922pt x 141.70424pt.\r\n\r\nOverfull \\hbox (19.30692pt too wide) in paragraph at lines 277--280\r\n [][] \r\n []\r\n\r\n<./fig/svd2_2.png, id=40, 412.6617pt x 329.5512pt>\r\nFile: ./fig/svd2_2.png Graphic file (type png)\r\n<use ./fig/svd2_2.png>\r\nPackage pdftex.def Info: ./fig/svd2_2.png  used on input line 283.\r\n(pdftex.def)             Requested size: 177.44106pt x 141.70424pt.\r\n<./fig/svd2_r_w.png, id=41, 1084.05pt x 722.7pt>\r\nFile: ./fig/svd2_r_w.png Graphic file (type png)\r\n<use ./fig/svd2_r_w.png>\r\nPackage pdftex.def Info: ./fig/svd2_r_w.png  used on input line 299.\r\n(pdftex.def)             Requested size: 487.818pt x 325.21199pt.\r\n\r\nOverfull \\hbox (57.81337pt too wide) in paragraph at lines 299--300\r\n [][] \r\n []\r\n\r\n[5 <./fig/svd2_1.png> <./fig/svd2_2.png>]\r\nreport.tex:304: Undefined control sequence.\r\nl.304 \\toprule\r\n              \r\nThe control sequence at the end of the top line\r\nof your error message was never \\def'ed. If you have\r\nmisspelled it (e.g., `\\hobx'), type `I' and the correct\r\nspelling (e.g., `I\\hbox'). Otherwise just continue,\r\nand I'll forget about whatever was undefined.\r\n\r\nreport.tex:306: Undefined control sequence.\r\n<recently read> \\midrule \r\n                         \r\nl.306 \\midrule\r\n              \r\nThe control sequence at the end of the top line\r\nof your error message was never \\def'ed. If you have\r\nmisspelled it (e.g., `\\hobx'), type `I' and the correct\r\nspelling (e.g., `I\\hbox'). Otherwise just continue,\r\nand I'll forget about whatever was undefined.\r\n\r\nreport.tex:313: Undefined control sequence.\r\n<recently read> \\bottomrule \r\n                            \r\nl.313 \\bottomrule\r\n                 \r\nThe control sequence at the end of the top line\r\nof your error message was never \\def'ed. If you have\r\nmisspelled it (e.g., `\\hobx'), type `I' and the correct\r\nspelling (e.g., `I\\hbox'). Otherwise just continue,\r\nand I'll forget about whatever was undefined.\r\n\r\n<./fig/nmf_1.png, id=47, 544.9158pt x 329.5512pt>\r\nFile: ./fig/nmf_1.png Graphic file (type png)\r\n<use ./fig/nmf_1.png>\r\nPackage pdftex.def Info: ./fig/nmf_1.png  used on input line 326.\r\n(pdftex.def)             Requested size: 234.30922pt x 141.70424pt.\r\n\r\nOverfull \\hbox (19.30692pt too wide) in paragraph at lines 326--329\r\n [][] \r\n []\r\n\r\n<./fig/nmf_2.png, id=48, 412.6617pt x 329.5512pt>\r\nFile: ./fig/nmf_2.png Graphic file (type png)\r\n<use ./fig/nmf_2.png>\r\nPackage pdftex.def Info: ./fig/nmf_2.png  used on input line 332.\r\n(pdftex.def)             Requested size: 177.44106pt x 141.70424pt.\r\n\r\nUnderfull \\vbox (badness 4341) has occurred while \\output is active []\r\n\r\n [6 <./fig/svd2_r_w.png>]\r\nreport.tex:353: Undefined control sequence.\r\nl.353 \\toprule\r\n              \r\nThe control sequence at the end of the top line\r\nof your error message was never \\def'ed. If you have\r\nmisspelled it (e.g., `\\hobx'), type `I' and the correct\r\nspelling (e.g., `I\\hbox'). Otherwise just continue,\r\nand I'll forget about whatever was undefined.\r\n\r\nreport.tex:355: Undefined control sequence.\r\n<recently read> \\midrule \r\n                         \r\nl.355 \\midrule\r\n              \r\nThe control sequence at the end of the top line\r\nof your error message was never \\def'ed. If you have\r\nmisspelled it (e.g., `\\hobx'), type `I' and the correct\r\nspelling (e.g., `I\\hbox'). Otherwise just continue,\r\nand I'll forget about whatever was undefined.\r\n\r\nreport.tex:362: Undefined control sequence.\r\n<recently read> \\bottomrule \r\n                            \r\nl.362 \\bottomrule\r\n                 \r\nThe control sequence at the end of the top line\r\nof your error message was never \\def'ed. If you have\r\nmisspelled it (e.g., `\\hobx'), type `I' and the correct\r\nspelling (e.g., `I\\hbox'). Otherwise just continue,\r\nand I'll forget about whatever was undefined.\r\n\r\n<./fig/nmf_r_w.png, id=53, 1084.05pt x 722.7pt>\r\nFile: ./fig/nmf_r_w.png Graphic file (type png)\r\n<use ./fig/nmf_r_w.png>\r\nPackage pdftex.def Info: ./fig/nmf_r_w.png  used on input line 372.\r\n(pdftex.def)             Requested size: 487.818pt x 325.21199pt.\r\n\r\nOverfull \\hbox (57.81337pt too wide) in paragraph at lines 372--373\r\n [][] \r\n []\r\n\r\n\r\nUnderfull \\vbox (badness 1975) has occurred while \\output is active []\r\n\r\n [7 <./fig/nmf_1.png> <./fig/nmf_2.png>]\r\nFile: ./fig/svd1_1.png Graphic file (type png)\r\n<use ./fig/svd1_1.png>\r\nPackage pdftex.def Info: ./fig/svd1_1.png  used on input line 386.\r\n(pdftex.def)             Requested size: 234.30922pt x 141.70424pt.\r\n\r\nOverfull \\hbox (19.30692pt too wide) in paragraph at lines 386--389\r\n [][] \r\n []\r\n\r\nFile: ./fig/svd1_2.png Graphic file (type png)\r\n<use ./fig/svd1_2.png>\r\nPackage pdftex.def Info: ./fig/svd1_2.png  used on input line 392.\r\n(pdftex.def)             Requested size: 177.44106pt x 141.70424pt.\r\n[8 <./fig/nmf_r_w.png>] [9]\r\n(C:/Users\\admin\\PycharmProjects\\MoCaDR_proj1\\Report\\out\\report.aux)\r\n\r\nLaTeX Warning: There were multiply-defined labels.\r\n\r\n ) \r\nHere is how much of TeX's memory you used:\r\n 6284 strings out of 481556\r\n 91032 string characters out of 2913869\r\n 336023 words of memory out of 3000000\r\n 21271 multiletter control sequences out of 15000+200000\r\n 552539 words of font info for 78 fonts, out of 3000000 for 9000\r\n 1302 hyphenation exceptions out of 8191\r\n 39i,10n,43p,815b,294s stack positions out of 5000i,500n,10000p,200000b,50000s\r\n <C:\\Users\\admin\\AppData\\Local\\MiKTeX\\2.9\\fonts/pk/ljfour/jknappen/ec/dpi600\\\r\necss1095.pk> <C:\\Users\\admin\\AppData\\Local\\MiKTeX\\2.9\\fonts/pk/ljfour/jknappen/\r\nec/dpi600\\ecrm0800.pk> <C:\\Users\\admin\\AppData\\Local\\MiKTeX\\2.9\\fonts/pk/ljfour\r\n/jknappen/ec/dpi600\\ecti1095.pk> <C:\\Users\\admin\\AppData\\Local\\MiKTeX\\2.9\\fonts\r\n/pk/ljfour/jknappen/ec/dpi600\\ecbx1095.pk> <C:\\Users\\admin\\AppData\\Local\\MiKTeX\r\n\\2.9\\fonts/pk/ljfour/jknappen/ec/dpi600\\eccc1095.pk> <C:\\Users\\admin\\AppData\\Lo\r\ncal\\MiKTeX\\2.9\\fonts/pk/ljfour/jknappen/ec/dpi600\\ecrm1095.pk> <C:\\Users\\admin\\\r\nAppData\\Local\\MiKTeX\\2.9\\fonts/pk/ljfour/jknappen/ec/dpi600\\ecrm1200.pk> <C:\\Us\r\ners\\admin\\AppData\\Local\\MiKTeX\\2.9\\fonts/pk/ljfour/jknappen/ec/dpi600\\ecrm1728.\r\npk><C:/Users/admin/AppData/Local/Programs/MiKTeX 2.9/fonts/type1/public/amsfont\r\ns/cm/cmex10.pfb><C:/Users/admin/AppData/Local/Programs/MiKTeX 2.9/fonts/type1/p\r\nublic/amsfonts/cm/cmmi10.pfb><C:/Users/admin/AppData/Local/Programs/MiKTeX 2.9/\r\nfonts/type1/public/amsfonts/cm/cmmi8.pfb><C:/Users/admin/AppData/Local/Programs\r\n/MiKTeX 2.9/fonts/type1/public/amsfonts/cm/cmmib10.pfb><C:/Users/admin/AppData/\r\nLocal/Programs/MiKTeX 2.9/fonts/type1/public/amsfonts/cm/cmr10.pfb><C:/Users/ad\r\nmin/AppData/Local/Programs/MiKTeX 2.9/fonts/type1/public/amsfonts/cm/cmr6.pfb><\r\nC:/Users/admin/AppData/Local/Programs/MiKTeX 2.9/fonts/type1/public/amsfonts/cm\r\n/cmr8.pfb><C:/Users/admin/AppData/Local/Programs/MiKTeX 2.9/fonts/type1/public/\r\namsfonts/cm/cmsy10.pfb><C:/Users/admin/AppData/Local/Programs/MiKTeX 2.9/fonts/\r\ntype1/public/amsfonts/cm/cmsy6.pfb><C:/Users/admin/AppData/Local/Programs/MiKTe\r\nX 2.9/fonts/type1/public/amsfonts/cm/cmsy8.pfb>\r\nOutput written on C:/Users\\admin\\PycharmProjects\\MoCaDR_proj1\\Report\\out\\report\r\n.pdf (9 pages, 581368 bytes).\r\nPDF statistics:\r\n 322 PDF objects out of 1000 (max. 8388607)\r\n 0 named destinations out of 1000 (max. 500000)\r\n 46 words of extra memory for PDF output out of 10000 (max. 10000000)\r\n\r\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/Report/auxil/report.log b/Report/auxil/report.log
---- a/Report/auxil/report.log	(revision 334daf19f542c19cd5f934002a5f6a1e6a2315c6)
-+++ b/Report/auxil/report.log	(date 1649673806307)
-@@ -1,87 +1,82 @@
--This is pdfTeX, Version 3.14159265-2.6-1.40.21 (MiKTeX 2.9.7300 64-bit) (preloaded format=pdflatex 2020.3.10)  9 APR 2022 22:27
-+This is pdfTeX, Version 3.141592653-2.6-1.40.24 (MiKTeX 22.1) (preloaded format=pdflatex 2022.3.10)  11 APR 2022 12:43
- entering extended mode
-+ restricted \write18 enabled.
-+ file:line:error style messages enabled.
-+ %&-line parsing enabled.
- **./report.tex
- (report.tex
--LaTeX2e <2020-02-02> patch level 2
--L3 programming layer <2020-02-14>
--("C:\Users\admin\AppData\Local\Programs\MiKTeX 2.9\tex/latex/amscls\amsart.cls"
--Document Class: amsart 2017/10/31 v2.20.4
--\linespacing=\dimen134
--\normalparindent=\dimen135
-+LaTeX2e <2021-11-15> patch level 1
-+L3 programming layer <2022-02-24>
-+(D:\Programy\MikTeX\tex/latex/amscls\amsart.cls
-+Document Class: amsart 2020/05/29 v2.20.6
-+\linespacing=\dimen138
-+\normalparindent=\dimen139
- \normaltopskip=\skip47
--
--("C:\Users\admin\AppData\Local\Programs\MiKTeX 2.9\tex/latex/amsmath\amsmath.st
--y"
--Package: amsmath 2020/01/20 v2.17e AMS math features
-+(D:\Programy\MikTeX\tex/latex/amsmath\amsmath.sty
-+Package: amsmath 2021/10/15 v2.17l AMS math features
- \@mathmargin=\skip48
- 
- For additional information on amsmath, use the `?' option.
-+(D:\Programy\MikTeX\tex/latex/amsmath\amstext.sty
-+Package: amstext 2021/08/26 v2.01 AMS text
- 
--("C:\Users\admin\AppData\Local\Programs\MiKTeX 2.9\tex/latex/amsmath\amstext.st
--y"
--Package: amstext 2000/06/29 v2.01 AMS text
--
--("C:\Users\admin\AppData\Local\Programs\MiKTeX 2.9\tex/latex/amsmath\amsgen.sty
--"
-+(D:\Programy\MikTeX\tex/latex/amsmath\amsgen.sty
- File: amsgen.sty 1999/11/30 v2.0 generic functions
--\@emptytoks=\toks14
--\ex@=\dimen136
-+\@emptytoks=\toks16
-+\ex@=\dimen140
- ))
--("C:\Users\admin\AppData\Local\Programs\MiKTeX 2.9\tex/latex/amsmath\amsbsy.sty
--"
-+(D:\Programy\MikTeX\tex/latex/amsmath\amsbsy.sty
- Package: amsbsy 1999/11/29 v1.2d Bold Symbols
--\pmbraise@=\dimen137
-+\pmbraise@=\dimen141
- )
--("C:\Users\admin\AppData\Local\Programs\MiKTeX 2.9\tex/latex/amsmath\amsopn.sty
--"
--Package: amsopn 2016/03/08 v2.02 operator names
-+(D:\Programy\MikTeX\tex/latex/amsmath\amsopn.sty
-+Package: amsopn 2021/08/26 v2.02 operator names
- )
--\inf@bad=\count167
--LaTeX Info: Redefining \frac on input line 227.
--\uproot@=\count168
--\leftroot@=\count169
--LaTeX Info: Redefining \overline on input line 389.
--\classnum@=\count170
--\DOTSCASE@=\count171
--LaTeX Info: Redefining \ldots on input line 486.
--LaTeX Info: Redefining \dots on input line 489.
--LaTeX Info: Redefining \cdots on input line 610.
--\Mathstrutbox@=\box45
--\strutbox@=\box46
--\big@size=\dimen138
--LaTeX Font Info:    Redeclaring font encoding OML on input line 733.
--LaTeX Font Info:    Redeclaring font encoding OMS on input line 734.
--\macc@depth=\count172
--\c@MaxMatrixCols=\count173
-+\inf@bad=\count185
-+LaTeX Info: Redefining \frac on input line 234.
-+\uproot@=\count186
-+\leftroot@=\count187
-+LaTeX Info: Redefining \overline on input line 399.
-+\classnum@=\count188
-+\DOTSCASE@=\count189
-+LaTeX Info: Redefining \ldots on input line 496.
-+LaTeX Info: Redefining \dots on input line 499.
-+LaTeX Info: Redefining \cdots on input line 620.
-+\Mathstrutbox@=\box50
-+\strutbox@=\box51
-+\big@size=\dimen142
-+LaTeX Font Info:    Redeclaring font encoding OML on input line 743.
-+LaTeX Font Info:    Redeclaring font encoding OMS on input line 744.
-+\macc@depth=\count190
-+\c@MaxMatrixCols=\count191
- \dotsspace@=\muskip16
--\c@parentequation=\count174
--\dspbrk@lvl=\count175
--\tag@help=\toks15
--\row@=\count176
--\column@=\count177
--\maxfields@=\count178
--\andhelp@=\toks16
--\eqnshift@=\dimen139
--\alignsep@=\dimen140
--\tagshift@=\dimen141
--\tagwidth@=\dimen142
--\totwidth@=\dimen143
--\lineht@=\dimen144
--\@envbody=\toks17
-+\c@parentequation=\count192
-+\dspbrk@lvl=\count193
-+\tag@help=\toks17
-+\row@=\count194
-+\column@=\count195
-+\maxfields@=\count196
-+\andhelp@=\toks18
-+\eqnshift@=\dimen143
-+\alignsep@=\dimen144
-+\tagshift@=\dimen145
-+\tagwidth@=\dimen146
-+\totwidth@=\dimen147
-+\lineht@=\dimen148
-+\@envbody=\toks19
- \multlinegap=\skip49
- \multlinetaggap=\skip50
--\mathdisplay@stack=\toks18
--LaTeX Info: Redefining \[ on input line 2859.
--LaTeX Info: Redefining \] on input line 2860.
-+\mathdisplay@stack=\toks20
-+LaTeX Info: Redefining \[ on input line 2938.
-+LaTeX Info: Redefining \] on input line 2939.
- )
--LaTeX Font Info:    Trying to load font information for U+msa on input line 398
-+LaTeX Font Info:    Trying to load font information for U+msa on input line 397
- .
- 
--("C:\Users\admin\AppData\Local\Programs\MiKTeX 2.9\tex/latex/amsfonts\umsa.fd"
-+(D:\Programy\MikTeX\tex/latex/amsfonts\umsa.fd
- File: umsa.fd 2013/01/14 v3.01 AMS symbols A
- )
--("C:\Users\admin\AppData\Local\Programs\MiKTeX 2.9\tex/latex/amsfonts\amsfonts.
--sty"
-+(D:\Programy\MikTeX\tex/latex/amsfonts\amsfonts.sty
- Package: amsfonts 2013/01/14 v3.01 Basic AMSFonts support
- \symAMSa=\mathgroup4
- \symAMSb=\mathgroup5
-@@ -90,207 +85,184 @@
- (Font)                  U/euf/m/n --> U/euf/b/n on input line 106.
- )
- \copyins=\insert199
--\abstractbox=\box47
-+\abstractbox=\box52
- \listisep=\skip51
--\c@part=\count179
--\c@section=\count180
--\c@subsection=\count181
--\c@subsubsection=\count182
--\c@paragraph=\count183
--\c@subparagraph=\count184
--\c@figure=\count185
--\c@table=\count186
-+\c@part=\count197
-+\c@section=\count198
-+\c@subsection=\count266
-+\c@subsubsection=\count267
-+\c@paragraph=\count268
-+\c@subparagraph=\count269
-+\c@figure=\count270
-+\c@table=\count271
- \abovecaptionskip=\skip52
- \belowcaptionskip=\skip53
--\captionindent=\dimen145
--\thm@style=\toks19
--\thm@bodyfont=\toks20
--\thm@headfont=\toks21
--\thm@notefont=\toks22
--\thm@headpunct=\toks23
-+\captionindent=\dimen149
-+\thm@style=\toks21
-+\thm@bodyfont=\toks22
-+\thm@headfont=\toks23
-+\thm@notefont=\toks24
-+\thm@headpunct=\toks25
- \thm@preskip=\skip54
- \thm@postskip=\skip55
- \thm@headsep=\skip56
--\dth@everypar=\toks24
-+\dth@everypar=\toks26
- )
--("C:\Users\admin\AppData\Local\Programs\MiKTeX 2.9\tex/latex/float\float.sty"
-+(D:\Programy\MikTeX\tex/latex/float\float.sty
- Package: float 2001/11/08 v1.3d Float enhancements (AL)
--\c@float@type=\count187
--\float@exts=\toks25
--\float@box=\box48
--\@float@everytoks=\toks26
--\@floatcapt=\box49
-+\c@float@type=\count272
-+\float@exts=\toks27
-+\float@box=\box53
-+\@float@everytoks=\toks28
-+\@floatcapt=\box54
- )
--("C:\Users\admin\AppData\Local\Programs\MiKTeX 2.9\tex/latex/base\fontenc.sty"
--Package: fontenc 2020/02/11 v2.0o Standard LaTeX package
-+(D:\Programy\MikTeX\tex/latex/base\fontenc.sty
-+Package: fontenc 2021/04/29 v2.0v Standard LaTeX package
- )
--("C:\Users\admin\AppData\Local\Programs\MiKTeX 2.9\tex/latex/geometry\geometry.
--sty"
-+(D:\Programy\MikTeX\tex/latex/geometry\geometry.sty
- Package: geometry 2020/01/02 v5.9 Page Geometry
- 
--("C:\Users\admin\AppData\Local\Programs\MiKTeX 2.9\tex/latex/graphics\keyval.st
--y"
-+(D:\Programy\MikTeX\tex/latex/graphics\keyval.sty
- Package: keyval 2014/10/28 v1.15 key=value parser (DPC)
--\KV@toks@=\toks27
-+\KV@toks@=\toks29
- )
--("C:\Users\admin\AppData\Local\Programs\MiKTeX 2.9\tex/generic/iftex\ifvtex.sty
--"
-+(D:\Programy\MikTeX\tex/generic/iftex\ifvtex.sty
- Package: ifvtex 2019/10/25 v1.7 ifvtex legacy package. Use iftex instead.
-- ("C:\Users\admin\AppData\Local\Programs\MiKTeX 2.9\tex/generic/iftex\iftex.sty
--"
--Package: iftex 2019/11/07 v1.0c TeX engine tests
-+
-+(D:\Programy\MikTeX\tex/generic/iftex\iftex.sty
-+Package: iftex 2022/02/03 v1.0f TeX engine tests
- ))
--\Gm@cnth=\count188
--\Gm@cntv=\count189
--\c@Gm@tempcnt=\count190
--\Gm@bindingoffset=\dimen146
--\Gm@wd@mp=\dimen147
--\Gm@odd@mp=\dimen148
--\Gm@even@mp=\dimen149
--\Gm@layoutwidth=\dimen150
--\Gm@layoutheight=\dimen151
--\Gm@layouthoffset=\dimen152
--\Gm@layoutvoffset=\dimen153
--\Gm@dimlist=\toks28
-+\Gm@cnth=\count273
-+\Gm@cntv=\count274
-+\c@Gm@tempcnt=\count275
-+\Gm@bindingoffset=\dimen150
-+\Gm@wd@mp=\dimen151
-+\Gm@odd@mp=\dimen152
-+\Gm@even@mp=\dimen153
-+\Gm@layoutwidth=\dimen154
-+\Gm@layoutheight=\dimen155
-+\Gm@layouthoffset=\dimen156
-+\Gm@layoutvoffset=\dimen157
-+\Gm@dimlist=\toks30
- 
--("C:\Users\admin\AppData\Local\Programs\MiKTeX 2.9\tex/latex/geometry\geometry.
--cfg"))
--("C:\Users\admin\AppData\Local\Programs\MiKTeX 2.9\tex/latex/parskip\parskip.st
--y"
--Package: parskip 2020-01-22 v2.0d non-zero parskip adjustments
-+(D:\Programy\MikTeX\tex/latex/geometry\geometry.cfg))
-+(D:\Programy\MikTeX\tex/latex/parskip\parskip.sty
-+Package: parskip 2021-03-14 v2.0h non-zero parskip adjustments
- 
--("C:\Users\admin\AppData\Local\Programs\MiKTeX 2.9\tex/latex/kvoptions\kvoption
--s.sty"
--Package: kvoptions 2019/11/29 v3.13 Key value format for package options (HO)
-+(D:\Programy\MikTeX\tex/latex/kvoptions\kvoptions.sty
-+Package: kvoptions 2020-10-07 v3.14 Key value format for package options (HO)
- 
--("C:\Users\admin\AppData\Local\Programs\MiKTeX 2.9\tex/generic/ltxcmds\ltxcmds.
--sty"
--Package: ltxcmds 2019/12/15 v1.24 LaTeX kernel commands for general use (HO)
-+(D:\Programy\MikTeX\tex/generic/ltxcmds\ltxcmds.sty
-+Package: ltxcmds 2020-05-10 v1.25 LaTeX kernel commands for general use (HO)
- )
--("C:\Users\admin\AppData\Local\Programs\MiKTeX 2.9\tex/generic/kvsetkeys\kvsetk
--eys.sty"
-+(D:\Programy\MikTeX\tex/generic/kvsetkeys\kvsetkeys.sty
- Package: kvsetkeys 2019/12/15 v1.18 Key value parser (HO)
- ))
--("C:\Users\admin\AppData\Local\Programs\MiKTeX 2.9\tex/latex/etoolbox\etoolbox.
--sty"
--Package: etoolbox 2019/09/21 v2.5h e-TeX tools for LaTeX (JAW)
--\etb@tempcnta=\count191
-+(D:\Programy\MikTeX\tex/latex/etoolbox\etoolbox.sty
-+Package: etoolbox 2020/10/05 v2.5k e-TeX tools for LaTeX (JAW)
-+\etb@tempcnta=\count276
- )
- Couldn't patch \@starttoc
--)
--("C:\Users\admin\AppData\Local\Programs\MiKTeX 2.9\tex/latex/amsfonts\amssymb.s
--ty"
-+) (D:\Programy\MikTeX\tex/latex/amsfonts\amssymb.sty
- Package: amssymb 2013/01/14 v3.01 AMS font symbols
- )
--("C:\Users\admin\AppData\Local\Programs\MiKTeX 2.9\tex/latex/titling\titling.st
--y"
-+(D:\Programy\MikTeX\tex/latex/titling\titling.sty
- Package: titling 2009/09/04 v2.1d maketitle typesetting
- \thanksmarkwidth=\skip57
- \thanksmargin=\skip58
- \droptitle=\skip59
- )
--("C:\Users\admin\AppData\Local\Programs\MiKTeX 2.9\tex/latex/tools\enumerate.st
--y"
-+(D:\Programy\MikTeX\tex/latex/tools\enumerate.sty
- Package: enumerate 2015/07/23 v3.00 enumerate extensions (DPC)
--\@enLab=\toks29
-+\@enLab=\toks31
- )
--("C:\Users\admin\AppData\Local\Programs\MiKTeX 2.9\tex/latex/multirow\multirow.
--sty"
--Package: multirow 2019/05/31 v2.5 Span multiple rows of a table
-+(D:\Programy\MikTeX\tex/latex/multirow\multirow.sty
-+Package: multirow 2021/03/15 v2.8 Span multiple rows of a table
- \multirow@colwidth=\skip60
--\multirow@cntb=\count192
-+\multirow@cntb=\count277
- \multirow@dima=\skip61
--\bigstrutjot=\dimen154
-+\bigstrutjot=\dimen158
- )
--("C:\Users\admin\AppData\Local\Programs\MiKTeX 2.9\tex/latex/graphics\graphics.
--sty"
--Package: graphics 2019/11/30 v1.4a Standard LaTeX Graphics (DPC,SPQR)
-+(D:\Programy\MikTeX\tex/latex/graphics\graphics.sty
-+Package: graphics 2021/03/04 v1.4d Standard LaTeX Graphics (DPC,SPQR)
- 
--("C:\Users\admin\AppData\Local\Programs\MiKTeX 2.9\tex/latex/graphics\trig.sty"
--Package: trig 2016/01/03 v1.10 sin cos tan (DPC)
-+(D:\Programy\MikTeX\tex/latex/graphics\trig.sty
-+Package: trig 2021/08/11 v1.11 sin cos tan (DPC)
- )
--("C:\Users\admin\AppData\Local\Programs\MiKTeX 2.9\tex/latex/graphics-cfg\graph
--ics.cfg"
-+(D:\Programy\MikTeX\tex/latex/graphics-cfg\graphics.cfg
- File: graphics.cfg 2016/06/04 v1.11 sample graphics configuration
- )
--Package graphics Info: Driver file: pdftex.def on input line 105.
-+Package graphics Info: Driver file: pdftex.def on input line 107.
- 
--("C:\Users\admin\AppData\Local\Programs\MiKTeX 2.9\tex/latex/graphics-def\pdfte
--x.def"
--File: pdftex.def 2018/01/08 v1.0l Graphics/color driver for pdftex
-+(D:\Programy\MikTeX\tex/latex/graphics-def\pdftex.def
-+File: pdftex.def 2020/10/05 v1.2a Graphics/color driver for pdftex
- ))
--("C:\Users\admin\AppData\Local\Programs\MiKTeX 2.9\tex/latex/graphics\graphicx.
--sty"
--Package: graphicx 2019/11/30 v1.2a Enhanced LaTeX Graphics (DPC,SPQR)
--\Gin@req@height=\dimen155
--\Gin@req@width=\dimen156
-+(D:\Programy\MikTeX\tex/latex/graphics\graphicx.sty
-+Package: graphicx 2021/09/16 v1.2d Enhanced LaTeX Graphics (DPC,SPQR)
-+\Gin@req@height=\dimen159
-+\Gin@req@width=\dimen160
- )
--("C:\Users\admin\AppData\Local\Programs\MiKTeX 2.9\tex/latex/caption\caption.st
--y"
--Package: caption 2020/10/26 v3.5g Customizing captions (AR)
-+(D:\Programy\MikTeX\tex/latex/caption\caption.sty
-+Package: caption 2022/02/28 v3.6a Customizing captions (AR)
- 
--("C:\Users\admin\AppData\Local\Programs\MiKTeX 2.9\tex/latex/caption\caption3.s
--ty"
--Package: caption3 2020/10/21 v2.2e caption3 kernel (AR)
--\captionmargin=\dimen157
--\captionmargin@=\dimen158
--\captionwidth=\dimen159
--\caption@tempdima=\dimen160
--\caption@indent=\dimen161
--\caption@parindent=\dimen162
--\caption@hangindent=\dimen163
-+(D:\Programy\MikTeX\tex/latex/caption\caption3.sty
-+Package: caption3 2022/02/28 v2.3a caption3 kernel (AR)
-+\caption@tempdima=\dimen161
-+\captionmargin=\dimen162
-+\caption@leftmargin=\dimen163
-+\caption@rightmargin=\dimen164
-+\caption@width=\dimen165
-+\caption@indent=\dimen166
-+\caption@parindent=\dimen167
-+\caption@hangindent=\dimen168
- Package caption Info: AMS or SMF document class detected.
- 
--("C:\Users\admin\AppData\Local\Programs\MiKTeX 2.9\tex/latex/caption\caption-am
--s-smf.sto"
-+(D:\Programy\MikTeX\tex/latex/caption\caption-ams-smf.sto
- File: caption-ams-smf.sto 2020/08/22 v2.0 Adaption of the caption package to th
- e AMS and SMF document classes (AR)
- ))
--\c@caption@flags=\count193
--\c@continuedfloat=\count194
-+\c@caption@flags=\count278
-+\c@continuedfloat=\count279
- Package caption Info: float package is loaded.
- )
--("C:\Users\admin\AppData\Local\Programs\MiKTeX 2.9\tex/latex/tools\array.sty"
--Package: array 2019/08/31 v2.4l Tabular extension package (FMi)
--\col@sep=\dimen164
--\ar@mcellbox=\box50
--\extrarowheight=\dimen165
--\NC@list=\toks30
-+(D:\Programy\MikTeX\tex/latex/tools\array.sty
-+Package: array 2021/10/04 v2.5f Tabular extension package (FMi)
-+\col@sep=\dimen169
-+\ar@mcellbox=\box55
-+\extrarowheight=\dimen170
-+\NC@list=\toks32
- \extratabsurround=\skip62
- \backup@length=\skip63
--\ar@cellbox=\box51
-+\ar@cellbox=\box56
- )
--("C:\Users\admin\AppData\Local\Programs\MiKTeX 2.9\tex/latex/xcolor\xcolor.sty"
--Package: xcolor 2016/05/11 v2.12 LaTeX color extensions (UK)
-+(D:\Programy\MikTeX\tex/latex/xcolor\xcolor.sty
-+Package: xcolor 2021/10/31 v2.13 LaTeX color extensions (UK)
- 
--("C:\Users\admin\AppData\Local\Programs\MiKTeX 2.9\tex/latex/graphics-cfg\color
--.cfg"
-+(D:\Programy\MikTeX\tex/latex/graphics-cfg\color.cfg
- File: color.cfg 2016/01/02 v1.6 sample color configuration
- )
--Package xcolor Info: Driver file: pdftex.def on input line 225.
--Package xcolor Info: Model `cmy' substituted by `cmy0' on input line 1348.
--Package xcolor Info: Model `hsb' substituted by `rgb' on input line 1352.
--Package xcolor Info: Model `RGB' extended on input line 1364.
--Package xcolor Info: Model `HTML' substituted by `rgb' on input line 1366.
--Package xcolor Info: Model `Hsb' substituted by `hsb' on input line 1367.
--Package xcolor Info: Model `tHsb' substituted by `hsb' on input line 1368.
--Package xcolor Info: Model `HSB' substituted by `hsb' on input line 1369.
--Package xcolor Info: Model `Gray' substituted by `gray' on input line 1370.
--Package xcolor Info: Model `wave' substituted by `hsb' on input line 1371.
-+Package xcolor Info: Driver file: pdftex.def on input line 227.
-+Package xcolor Info: Model `cmy' substituted by `cmy0' on input line 1352.
-+Package xcolor Info: Model `hsb' substituted by `rgb' on input line 1356.
-+Package xcolor Info: Model `RGB' extended on input line 1368.
-+Package xcolor Info: Model `HTML' substituted by `rgb' on input line 1370.
-+Package xcolor Info: Model `Hsb' substituted by `hsb' on input line 1371.
-+Package xcolor Info: Model `tHsb' substituted by `hsb' on input line 1372.
-+Package xcolor Info: Model `HSB' substituted by `hsb' on input line 1373.
-+Package xcolor Info: Model `Gray' substituted by `gray' on input line 1374.
-+Package xcolor Info: Model `wave' substituted by `hsb' on input line 1375.
- )
--("C:\Users\admin\AppData\Local\Programs\MiKTeX 2.9\tex/latex/caption\subcaption
--.sty"
--Package: subcaption 2020/10/07 v1.3j Sub-captions (AR)
--\c@subfigure=\count195
--\c@subtable=\count196
-+(D:\Programy\MikTeX\tex/latex/caption\subcaption.sty
-+Package: subcaption 2022/01/07 v1.5 Sub-captions (AR)
-+\c@subfigure=\count280
-+\c@subtable=\count281
- )
--("C:\Users\admin\AppData\Local\Programs\MiKTeX 2.9\tex/latex/l3backend\l3backen
--d-pdfmode.def"
--File: l3backend-pdfmode.def 2020-02-03 L3 backend support: PDF mode
--\l__kernel_color_stack_int=\count197
--\l__pdf_internal_box=\box52
-+(D:\Programy\MikTeX\tex/latex/l3backend\l3backend-pdftex.def
-+File: l3backend-pdftex.def 2022-02-07 L3 backend support: PDF output (pdfTeX)
-+\l__color_backend_stack_int=\count282
-+\l__pdf_internal_box=\box57
- )
--(C:/Users\admin\PycharmProjects\MoCaDR_proj1\Report\out\report.aux
-+(D:/Studia\MoCaDR_proj1\Report\out\report.aux
- 
- LaTeX Warning: Label `fig:figure' multiply defined.
- 
-@@ -322,12 +294,13 @@
- LaTeX Font Info:    ... okay on input line 44.
- LaTeX Font Info:    Trying to load font information for U+msa on input line 44.
- 
-- ("C:\Users\admin\AppData\Local\Programs\MiKTeX 2.9\tex/latex/amsfonts\umsa.fd"
-+ (D:\Programy\MikTeX\tex/latex/amsfonts\umsa.fd
- File: umsa.fd 2013/01/14 v3.01 AMS symbols A
- )
- LaTeX Font Info:    Trying to load font information for U+msb on input line 44.
- 
-- ("C:\Users\admin\AppData\Local\Programs\MiKTeX 2.9\tex/latex/amsfonts\umsb.fd"
-+
-+(D:\Programy\MikTeX\tex/latex/amsfonts\umsb.fd
- File: umsb.fd 2013/01/14 v3.01 AMS symbols B
- )
- *geometry* driver: auto-detecting
-@@ -364,58 +337,56 @@
- * \@reversemarginfalse
- * (1in=72.27pt=25.4mm, 1cm=28.453pt)
- 
--
--("C:\Users\admin\AppData\Local\Programs\MiKTeX 2.9\tex/context/base/mkii\supp-p
--df.mkii"
-+(D:\Programy\MikTeX\tex/context/base/mkii\supp-pdf.mkii
- [Loading MPS to PDF converter (version 2006.09.02).]
--\scratchcounter=\count198
--\scratchdimen=\dimen166
--\scratchbox=\box53
--\nofMPsegments=\count266
--\nofMParguments=\count267
--\everyMPshowfont=\toks31
--\MPscratchCnt=\count268
--\MPscratchDim=\dimen167
--\MPnumerator=\count269
--\makeMPintoPDFobject=\count270
--\everyMPtoPDFconversion=\toks32
--)
--("C:\Users\admin\AppData\Local\Programs\MiKTeX 2.9\tex/latex/epstopdf-pkg\epsto
--pdf-base.sty"
-+\scratchcounter=\count283
-+\scratchdimen=\dimen171
-+\scratchbox=\box58
-+\nofMPsegments=\count284
-+\nofMParguments=\count285
-+\everyMPshowfont=\toks33
-+\MPscratchCnt=\count286
-+\MPscratchDim=\dimen172
-+\MPnumerator=\count287
-+\makeMPintoPDFobject=\count288
-+\everyMPtoPDFconversion=\toks34
-+) (D:\Programy\MikTeX\tex/latex/epstopdf-pkg\epstopdf-base.sty
- Package: epstopdf-base 2020-01-24 v2.11 Base part for package epstopdf
- Package epstopdf-base Info: Redefining graphics rule for `.eps' on input line 4
- 85.
--)
-+
-+(D:\Programy\MikTeX\tex/latex/00miktex\epstopdf-sys.cfg
-+File: epstopdf-sys.cfg 2021/03/18 v2.0 Configuration of epstopdf for MiKTeX
-+))
- Package caption Info: Begin \AtBeginDocument code.
- Package caption Info: End \AtBeginDocument code.
- 
- 
- LaTeX Warning: No \author given.
- 
--[1{C:/Users/admin/AppData/Local/MiKTeX/2.9/pdftex/config/pdftex.map}]
-+[1{C:/Users/dmika/AppData/Local/MiKTeX/fonts/map/pdftex/pdftex.map}]
- LaTeX Font Info:    Trying to load font information for T1+cmss on input line 1
- 17.
- 
--("C:\Users\admin\AppData\Local\Programs\MiKTeX 2.9\tex/latex/base\t1cmss.fd"
-+(D:\Programy\MikTeX\tex/latex/base\t1cmss.fd
- File: t1cmss.fd 2019/12/16 v2.5j Standard LaTeX font definitions
--)
--[2]
--<./fig/svd1_1.png, id=26, 544.9158pt x 329.5512pt>
--File: ./fig/svd1_1.png Graphic file (type png)
--<use ./fig/svd1_1.png>
--Package pdftex.def Info: ./fig/svd1_1.png  used on input line 191.
--(pdftex.def)             Requested size: 234.30922pt x 141.70424pt.
-+) [2]
-+<./fig//svd1_1.png, id=26, 575.9919pt x 335.3328pt>
-+File: ./fig//svd1_1.png Graphic file (type png)
-+<use ./fig//svd1_1.png>
-+Package pdftex.def Info: ./fig//svd1_1.png  used on input line 191.
-+(pdftex.def)             Requested size: 247.67168pt x 144.19028pt.
- 
--Overfull \hbox (19.30692pt too wide) in paragraph at lines 191--194
-+Overfull \hbox (32.66937pt too wide) in paragraph at lines 191--194
-  [][] 
-  []
- 
--<./fig/svd1_2.png, id=28, 412.6617pt x 329.5512pt>
--File: ./fig/svd1_2.png Graphic file (type png)
--<use ./fig/svd1_2.png>
--Package pdftex.def Info: ./fig/svd1_2.png  used on input line 197.
--(pdftex.def)             Requested size: 177.44106pt x 141.70424pt.
--[3 <./fig/svd1_1.png> <./fig/svd1_2.png>]
-+<./fig//svd1_2.png, id=28, 423.5022pt x 335.3328pt>
-+File: ./fig//svd1_2.png Graphic file (type png)
-+<use ./fig//svd1_2.png>
-+Package pdftex.def Info: ./fig//svd1_2.png  used on input line 197.
-+(pdftex.def)             Requested size: 182.10239pt x 144.19028pt.
-+[3 <./fig//svd1_1.png> <./fig//svd1_2.png>]
- <fig/svd1_r_w.png, id=34, 1084.05pt x 722.7pt>
- File: fig/svd1_r_w.png Graphic file (type png)
- <use fig/svd1_r_w.png>
-@@ -458,32 +429,32 @@
- and I'll forget about whatever was undefined.
- 
- [4 <./fig/svd1_r_w.png>]
--<./fig/svd2_1.png, id=39, 544.9158pt x 329.5512pt>
--File: ./fig/svd2_1.png Graphic file (type png)
--<use ./fig/svd2_1.png>
--Package pdftex.def Info: ./fig/svd2_1.png  used on input line 277.
--(pdftex.def)             Requested size: 234.30922pt x 141.70424pt.
-+<./fig//svd2_1.png, id=39, 575.9919pt x 335.3328pt>
-+File: ./fig//svd2_1.png Graphic file (type png)
-+<use ./fig//svd2_1.png>
-+Package pdftex.def Info: ./fig//svd2_1.png  used on input line 277.
-+(pdftex.def)             Requested size: 247.67168pt x 144.19028pt.
- 
--Overfull \hbox (19.30692pt too wide) in paragraph at lines 277--280
-+Overfull \hbox (32.66937pt too wide) in paragraph at lines 277--280
-  [][] 
-  []
- 
--<./fig/svd2_2.png, id=40, 412.6617pt x 329.5512pt>
--File: ./fig/svd2_2.png Graphic file (type png)
--<use ./fig/svd2_2.png>
--Package pdftex.def Info: ./fig/svd2_2.png  used on input line 283.
--(pdftex.def)             Requested size: 177.44106pt x 141.70424pt.
--<./fig/svd2_r_w.png, id=41, 1084.05pt x 722.7pt>
--File: ./fig/svd2_r_w.png Graphic file (type png)
--<use ./fig/svd2_r_w.png>
--Package pdftex.def Info: ./fig/svd2_r_w.png  used on input line 299.
-+<./fig//svd2_2.png, id=40, 423.5022pt x 335.3328pt>
-+File: ./fig//svd2_2.png Graphic file (type png)
-+<use ./fig//svd2_2.png>
-+Package pdftex.def Info: ./fig//svd2_2.png  used on input line 283.
-+(pdftex.def)             Requested size: 182.10239pt x 144.19028pt.
-+<./fig//svd2_r_w.png, id=41, 1084.05pt x 722.7pt>
-+File: ./fig//svd2_r_w.png Graphic file (type png)
-+<use ./fig//svd2_r_w.png>
-+Package pdftex.def Info: ./fig//svd2_r_w.png  used on input line 299.
- (pdftex.def)             Requested size: 487.818pt x 325.21199pt.
- 
- Overfull \hbox (57.81337pt too wide) in paragraph at lines 299--300
-  [][] 
-  []
- 
--[5 <./fig/svd2_1.png> <./fig/svd2_2.png>]
-+[5 <./fig//svd2_1.png> <./fig//svd2_2.png>]
- report.tex:304: Undefined control sequence.
- l.304 \toprule
-               
-@@ -515,25 +486,25 @@
- spelling (e.g., `I\hbox'). Otherwise just continue,
- and I'll forget about whatever was undefined.
- 
--<./fig/nmf_1.png, id=47, 544.9158pt x 329.5512pt>
--File: ./fig/nmf_1.png Graphic file (type png)
--<use ./fig/nmf_1.png>
--Package pdftex.def Info: ./fig/nmf_1.png  used on input line 326.
--(pdftex.def)             Requested size: 234.30922pt x 141.70424pt.
-+<./fig//nmf_1.png, id=47, 575.9919pt x 335.3328pt>
-+File: ./fig//nmf_1.png Graphic file (type png)
-+<use ./fig//nmf_1.png>
-+Package pdftex.def Info: ./fig//nmf_1.png  used on input line 326.
-+(pdftex.def)             Requested size: 247.67168pt x 144.19028pt.
- 
--Overfull \hbox (19.30692pt too wide) in paragraph at lines 326--329
-+Overfull \hbox (32.66937pt too wide) in paragraph at lines 326--329
-  [][] 
-  []
- 
--<./fig/nmf_2.png, id=48, 412.6617pt x 329.5512pt>
--File: ./fig/nmf_2.png Graphic file (type png)
--<use ./fig/nmf_2.png>
--Package pdftex.def Info: ./fig/nmf_2.png  used on input line 332.
--(pdftex.def)             Requested size: 177.44106pt x 141.70424pt.
-+<./fig//nmf_2.png, id=48, 423.5022pt x 335.3328pt>
-+File: ./fig//nmf_2.png Graphic file (type png)
-+<use ./fig//nmf_2.png>
-+Package pdftex.def Info: ./fig//nmf_2.png  used on input line 332.
-+(pdftex.def)             Requested size: 182.10239pt x 144.19028pt.
- 
- Underfull \vbox (badness 4341) has occurred while \output is active []
- 
-- [6 <./fig/svd2_r_w.png>]
-+ [6 <./fig//svd2_r_w.png>]
- report.tex:353: Undefined control sequence.
- l.353 \toprule
-               
-@@ -565,10 +536,10 @@
- spelling (e.g., `I\hbox'). Otherwise just continue,
- and I'll forget about whatever was undefined.
- 
--<./fig/nmf_r_w.png, id=53, 1084.05pt x 722.7pt>
--File: ./fig/nmf_r_w.png Graphic file (type png)
--<use ./fig/nmf_r_w.png>
--Package pdftex.def Info: ./fig/nmf_r_w.png  used on input line 372.
-+<./fig//nmf_r_w.png, id=53, 1084.05pt x 722.7pt>
-+File: ./fig//nmf_r_w.png Graphic file (type png)
-+<use ./fig//nmf_r_w.png>
-+Package pdftex.def Info: ./fig//nmf_r_w.png  used on input line 372.
- (pdftex.def)             Requested size: 487.818pt x 325.21199pt.
- 
- Overfull \hbox (57.81337pt too wide) in paragraph at lines 372--373
-@@ -576,61 +547,56 @@
-  []
- 
- 
--Underfull \vbox (badness 1975) has occurred while \output is active []
-+Underfull \vbox (badness 1838) has occurred while \output is active []
- 
-- [7 <./fig/nmf_1.png> <./fig/nmf_2.png>]
--File: ./fig/svd1_1.png Graphic file (type png)
--<use ./fig/svd1_1.png>
--Package pdftex.def Info: ./fig/svd1_1.png  used on input line 386.
--(pdftex.def)             Requested size: 234.30922pt x 141.70424pt.
-+ [7 <./fig//nmf_1.png> <./fig//nmf_2.png>]
-+File: ./fig//svd1_1.png Graphic file (type png)
-+<use ./fig//svd1_1.png>
-+Package pdftex.def Info: ./fig//svd1_1.png  used on input line 386.
-+(pdftex.def)             Requested size: 247.67168pt x 144.19028pt.
- 
--Overfull \hbox (19.30692pt too wide) in paragraph at lines 386--389
-+Overfull \hbox (32.66937pt too wide) in paragraph at lines 386--389
-  [][] 
-  []
- 
--File: ./fig/svd1_2.png Graphic file (type png)
--<use ./fig/svd1_2.png>
--Package pdftex.def Info: ./fig/svd1_2.png  used on input line 392.
--(pdftex.def)             Requested size: 177.44106pt x 141.70424pt.
--[8 <./fig/nmf_r_w.png>] [9]
--(C:/Users\admin\PycharmProjects\MoCaDR_proj1\Report\out\report.aux)
-+File: ./fig//svd1_2.png Graphic file (type png)
-+<use ./fig//svd1_2.png>
-+Package pdftex.def Info: ./fig//svd1_2.png  used on input line 392.
-+(pdftex.def)             Requested size: 182.10239pt x 144.19028pt.
-+[8 <./fig//nmf_r_w.png>] [9] (D:/Studia\MoCaDR_proj1\Report\out\report.aux)
- 
- LaTeX Warning: There were multiply-defined labels.
- 
-  ) 
- Here is how much of TeX's memory you used:
-- 6284 strings out of 481556
-- 91032 string characters out of 2913869
-- 336023 words of memory out of 3000000
-- 21271 multiletter control sequences out of 15000+200000
-- 552539 words of font info for 78 fonts, out of 3000000 for 9000
-+ 6911 strings out of 478582
-+ 105770 string characters out of 2856538
-+ 404528 words of memory out of 3000000
-+ 24834 multiletter control sequences out of 15000+600000
-+ 489460 words of font info for 82 fonts, out of 8000000 for 9000
-  1302 hyphenation exceptions out of 8191
-- 39i,10n,43p,815b,294s stack positions out of 5000i,500n,10000p,200000b,50000s
-- <C:\Users\admin\AppData\Local\MiKTeX\2.9\fonts/pk/ljfour/jknappen/ec/dpi600\
--ecss1095.pk> <C:\Users\admin\AppData\Local\MiKTeX\2.9\fonts/pk/ljfour/jknappen/
--ec/dpi600\ecrm0800.pk> <C:\Users\admin\AppData\Local\MiKTeX\2.9\fonts/pk/ljfour
--/jknappen/ec/dpi600\ecti1095.pk> <C:\Users\admin\AppData\Local\MiKTeX\2.9\fonts
--/pk/ljfour/jknappen/ec/dpi600\ecbx1095.pk> <C:\Users\admin\AppData\Local\MiKTeX
--\2.9\fonts/pk/ljfour/jknappen/ec/dpi600\eccc1095.pk> <C:\Users\admin\AppData\Lo
--cal\MiKTeX\2.9\fonts/pk/ljfour/jknappen/ec/dpi600\ecrm1095.pk> <C:\Users\admin\
--AppData\Local\MiKTeX\2.9\fonts/pk/ljfour/jknappen/ec/dpi600\ecrm1200.pk> <C:\Us
--ers\admin\AppData\Local\MiKTeX\2.9\fonts/pk/ljfour/jknappen/ec/dpi600\ecrm1728.
--pk><C:/Users/admin/AppData/Local/Programs/MiKTeX 2.9/fonts/type1/public/amsfont
--s/cm/cmex10.pfb><C:/Users/admin/AppData/Local/Programs/MiKTeX 2.9/fonts/type1/p
--ublic/amsfonts/cm/cmmi10.pfb><C:/Users/admin/AppData/Local/Programs/MiKTeX 2.9/
--fonts/type1/public/amsfonts/cm/cmmi8.pfb><C:/Users/admin/AppData/Local/Programs
--/MiKTeX 2.9/fonts/type1/public/amsfonts/cm/cmmib10.pfb><C:/Users/admin/AppData/
--Local/Programs/MiKTeX 2.9/fonts/type1/public/amsfonts/cm/cmr10.pfb><C:/Users/ad
--min/AppData/Local/Programs/MiKTeX 2.9/fonts/type1/public/amsfonts/cm/cmr6.pfb><
--C:/Users/admin/AppData/Local/Programs/MiKTeX 2.9/fonts/type1/public/amsfonts/cm
--/cmr8.pfb><C:/Users/admin/AppData/Local/Programs/MiKTeX 2.9/fonts/type1/public/
--amsfonts/cm/cmsy10.pfb><C:/Users/admin/AppData/Local/Programs/MiKTeX 2.9/fonts/
--type1/public/amsfonts/cm/cmsy6.pfb><C:/Users/admin/AppData/Local/Programs/MiKTe
--X 2.9/fonts/type1/public/amsfonts/cm/cmsy8.pfb>
--Output written on C:/Users\admin\PycharmProjects\MoCaDR_proj1\Report\out\report
--.pdf (9 pages, 581368 bytes).
-+ 69i,10n,76p,585b,301s stack positions out of 5000i,500n,10000p,200000b,80000s
-+ <C:\Users\dmika\AppData\Local\MiKTeX\fonts/pk/ljfour/jknappen/ec/dpi600\ecss
-+1095.pk> <C:\Users\dmika\AppData\Local\MiKTeX\fonts/pk/ljfour/jknappen/ec/dpi60
-+0\ecrm0800.pk> <C:\Users\dmika\AppData\Local\MiKTeX\fonts/pk/ljfour/jknappen/ec
-+/dpi600\ecti1095.pk> <C:\Users\dmika\AppData\Local\MiKTeX\fonts/pk/ljfour/jknap
-+pen/ec/dpi600\ecbx1095.pk> <C:\Users\dmika\AppData\Local\MiKTeX\fonts/pk/ljfour
-+/jknappen/ec/dpi600\eccc1095.pk> <C:\Users\dmika\AppData\Local\MiKTeX\fonts/pk/
-+ljfour/jknappen/ec/dpi600\ecrm1095.pk> <C:\Users\dmika\AppData\Local\MiKTeX\fon
-+ts/pk/ljfour/jknappen/ec/dpi600\ecrm1200.pk> <C:\Users\dmika\AppData\Local\MiKT
-+eX\fonts/pk/ljfour/jknappen/ec/dpi600\ecrm1728.pk><D:/Programy/MikTeX/fonts/typ
-+e1/public/amsfonts/cm/cmex10.pfb><D:/Programy/MikTeX/fonts/type1/public/amsfont
-+s/cm/cmmi10.pfb><D:/Programy/MikTeX/fonts/type1/public/amsfonts/cm/cmmi8.pfb><D
-+:/Programy/MikTeX/fonts/type1/public/amsfonts/cm/cmmib10.pfb><D:/Programy/MikTe
-+X/fonts/type1/public/amsfonts/cm/cmr10.pfb><D:/Programy/MikTeX/fonts/type1/publ
-+ic/amsfonts/cm/cmr6.pfb><D:/Programy/MikTeX/fonts/type1/public/amsfonts/cm/cmr8
-+.pfb><D:/Programy/MikTeX/fonts/type1/public/amsfonts/cm/cmsy10.pfb><D:/Programy
-+/MikTeX/fonts/type1/public/amsfonts/cm/cmsy6.pfb><D:/Programy/MikTeX/fonts/type
-+1/public/amsfonts/cm/cmsy8.pfb>
-+Output written on D:/Studia\MoCaDR_proj1\Report\out\report.pdf (9 pages, 624165
-+ bytes).
- PDF statistics:
-- 322 PDF objects out of 1000 (max. 8388607)
-+ 332 PDF objects out of 1000 (max. 8388607)
-  0 named destinations out of 1000 (max. 500000)
-  46 words of extra memory for PDF output out of 10000 (max. 10000000)
- 
-Index: Report/auxil/report.aux
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>\\relax \r\n\\@writefile{toc}{\\contentsline {section}{\\tocsection {}{1}{Introduction}}{1}\\protected@file@percent }\r\n\\@writefile{toc}{\\contentsline {subsection}{\\tocsubsection {}{}{Statement of the problem}}{1}\\protected@file@percent }\r\n\\@writefile{toc}{\\contentsline {subsection}{\\tocsubsection {}{}{Description of methods}}{1}\\protected@file@percent }\r\n\\@writefile{toc}{\\contentsline {subsubsection}{\\tocsubsubsection {}{}{SVD1}}{1}\\protected@file@percent }\r\n\\@writefile{toc}{\\contentsline {subsubsection}{\\tocsubsubsection {}{}{SVD2}}{1}\\protected@file@percent }\r\n\\@writefile{toc}{\\contentsline {subsubsection}{\\tocsubsubsection {}{}{NMF}}{1}\\protected@file@percent }\r\n\\@writefile{toc}{\\contentsline {subsubsection}{\\tocsubsubsection {}{}{SGD}}{2}\\protected@file@percent }\r\n\\@writefile{toc}{\\contentsline {section}{\\tocsection {}{2}{Implementation}}{2}\\protected@file@percent }\r\n\\@writefile{toc}{\\contentsline {subsection}{\\tocsubsection {}{}{Description of the data}}{2}\\protected@file@percent }\r\n\\@writefile{toc}{\\contentsline {subsection}{\\tocsubsection {}{}{Performing methods}}{2}\\protected@file@percent }\r\n\\@writefile{toc}{\\contentsline {subsection}{\\tocsubsection {}{}{Quality of the system}}{2}\\protected@file@percent }\r\n\\@writefile{toc}{\\contentsline {subsection}{\\tocsubsection {}{}{Imputing the missing data}}{3}\\protected@file@percent }\r\n\\@writefile{toc}{\\contentsline {section}{\\tocsection {}{3}{Parameters tuning and results}}{3}\\protected@file@percent }\r\n\\@writefile{toc}{\\contentsline {subsection}{\\tocsubsection {}{}{SVD1}}{3}\\protected@file@percent }\r\n\\providecommand*\\caption@xref[2]{\\@setref\\relax\\@undefined{#1}}\r\n\\newlabel{fig:figure}{{\\caption@xref {fig:figure}{ on input line 232}}{4}}\r\n\\@writefile{toc}{\\contentsline {subsection}{\\tocsubsection {}{}{SVD2}}{5}\\protected@file@percent }\r\n\\@writefile{toc}{\\contentsline {subsection}{\\tocsubsection {}{}{NMF}}{6}\\protected@file@percent }\r\n\\newlabel{tocindent-1}{0pt}\r\n\\newlabel{tocindent0}{15.98535pt}\r\n\\newlabel{tocindent1}{19.35791pt}\r\n\\newlabel{tocindent2}{0pt}\r\n\\newlabel{tocindent3}{0pt}\r\n\\@writefile{toc}{\\contentsline {subsection}{\\tocsubsection {}{}{SGD}}{8}\\protected@file@percent }\r\n\\@writefile{toc}{\\contentsline {section}{\\tocsection {}{4}{}}{9}\\protected@file@percent }\r\n\\@writefile{toc}{\\contentsline {section}{\\tocsection {}{5}{Conclusions}}{9}\\protected@file@percent }\r\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/Report/auxil/report.aux b/Report/auxil/report.aux
---- a/Report/auxil/report.aux	(revision 334daf19f542c19cd5f934002a5f6a1e6a2315c6)
-+++ b/Report/auxil/report.aux	(date 1649673806236)
-@@ -1,27 +1,28 @@
- \relax 
--\@writefile{toc}{\contentsline {section}{\tocsection {}{1}{Introduction}}{1}\protected@file@percent }
--\@writefile{toc}{\contentsline {subsection}{\tocsubsection {}{}{Statement of the problem}}{1}\protected@file@percent }
--\@writefile{toc}{\contentsline {subsection}{\tocsubsection {}{}{Description of methods}}{1}\protected@file@percent }
--\@writefile{toc}{\contentsline {subsubsection}{\tocsubsubsection {}{}{SVD1}}{1}\protected@file@percent }
--\@writefile{toc}{\contentsline {subsubsection}{\tocsubsubsection {}{}{SVD2}}{1}\protected@file@percent }
--\@writefile{toc}{\contentsline {subsubsection}{\tocsubsubsection {}{}{NMF}}{1}\protected@file@percent }
--\@writefile{toc}{\contentsline {subsubsection}{\tocsubsubsection {}{}{SGD}}{2}\protected@file@percent }
--\@writefile{toc}{\contentsline {section}{\tocsection {}{2}{Implementation}}{2}\protected@file@percent }
--\@writefile{toc}{\contentsline {subsection}{\tocsubsection {}{}{Description of the data}}{2}\protected@file@percent }
--\@writefile{toc}{\contentsline {subsection}{\tocsubsection {}{}{Performing methods}}{2}\protected@file@percent }
--\@writefile{toc}{\contentsline {subsection}{\tocsubsection {}{}{Quality of the system}}{2}\protected@file@percent }
--\@writefile{toc}{\contentsline {subsection}{\tocsubsection {}{}{Imputing the missing data}}{3}\protected@file@percent }
--\@writefile{toc}{\contentsline {section}{\tocsection {}{3}{Parameters tuning and results}}{3}\protected@file@percent }
--\@writefile{toc}{\contentsline {subsection}{\tocsubsection {}{}{SVD1}}{3}\protected@file@percent }
-+\@writefile{toc}{\contentsline {section}{\tocsection {}{1}{Introduction}}{1}{}\protected@file@percent }
-+\@writefile{toc}{\contentsline {subsection}{\tocsubsection {}{}{Statement of the problem}}{1}{}\protected@file@percent }
-+\@writefile{toc}{\contentsline {subsection}{\tocsubsection {}{}{Description of methods}}{1}{}\protected@file@percent }
-+\@writefile{toc}{\contentsline {subsubsection}{\tocsubsubsection {}{}{SVD1}}{1}{}\protected@file@percent }
-+\@writefile{toc}{\contentsline {subsubsection}{\tocsubsubsection {}{}{SVD2}}{1}{}\protected@file@percent }
-+\@writefile{toc}{\contentsline {subsubsection}{\tocsubsubsection {}{}{NMF}}{1}{}\protected@file@percent }
-+\@writefile{toc}{\contentsline {subsubsection}{\tocsubsubsection {}{}{SGD}}{2}{}\protected@file@percent }
-+\@writefile{toc}{\contentsline {section}{\tocsection {}{2}{Implementation}}{2}{}\protected@file@percent }
-+\@writefile{toc}{\contentsline {subsection}{\tocsubsection {}{}{Description of the data}}{2}{}\protected@file@percent }
-+\@writefile{toc}{\contentsline {subsection}{\tocsubsection {}{}{Performing methods}}{2}{}\protected@file@percent }
-+\@writefile{toc}{\contentsline {subsection}{\tocsubsection {}{}{Quality of the system}}{2}{}\protected@file@percent }
-+\@writefile{toc}{\contentsline {subsection}{\tocsubsection {}{}{Imputing the missing data}}{3}{}\protected@file@percent }
-+\@writefile{toc}{\contentsline {section}{\tocsection {}{3}{Parameters tuning and results}}{3}{}\protected@file@percent }
-+\@writefile{toc}{\contentsline {subsection}{\tocsubsection {}{}{SVD1}}{3}{}\protected@file@percent }
- \providecommand*\caption@xref[2]{\@setref\relax\@undefined{#1}}
- \newlabel{fig:figure}{{\caption@xref {fig:figure}{ on input line 232}}{4}}
--\@writefile{toc}{\contentsline {subsection}{\tocsubsection {}{}{SVD2}}{5}\protected@file@percent }
--\@writefile{toc}{\contentsline {subsection}{\tocsubsection {}{}{NMF}}{6}\protected@file@percent }
-+\@writefile{toc}{\contentsline {subsection}{\tocsubsection {}{}{SVD2}}{5}{}\protected@file@percent }
-+\@writefile{toc}{\contentsline {subsection}{\tocsubsection {}{}{NMF}}{6}{}\protected@file@percent }
- \newlabel{tocindent-1}{0pt}
- \newlabel{tocindent0}{15.98535pt}
- \newlabel{tocindent1}{19.35791pt}
- \newlabel{tocindent2}{0pt}
- \newlabel{tocindent3}{0pt}
--\@writefile{toc}{\contentsline {subsection}{\tocsubsection {}{}{SGD}}{8}\protected@file@percent }
--\@writefile{toc}{\contentsline {section}{\tocsection {}{4}{}}{9}\protected@file@percent }
--\@writefile{toc}{\contentsline {section}{\tocsection {}{5}{Conclusions}}{9}\protected@file@percent }
-+\@writefile{toc}{\contentsline {subsection}{\tocsubsection {}{}{SGD}}{8}{}\protected@file@percent }
-+\@writefile{toc}{\contentsline {section}{\tocsection {}{4}{}}{9}{}\protected@file@percent }
-+\@writefile{toc}{\contentsline {section}{\tocsection {}{5}{Conclusions}}{9}{}\protected@file@percent }
-+\gdef \@abspage@last{9}
-Index: src/presenting_results.ipynb
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/src/presenting_results.ipynb b/src/presenting_results.ipynb
---- a/src/presenting_results.ipynb	(revision 334daf19f542c19cd5f934002a5f6a1e6a2315c6)
-+++ b/src/presenting_results.ipynb	(date 1649674204273)
-@@ -2,7 +2,7 @@
-  "cells": [
-   {
-    "cell_type": "code",
--   "execution_count": 2,
-+   "execution_count": 1,
-    "outputs": [
-     {
-      "data": {
-@@ -45,7 +45,7 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 14,
-+   "execution_count": 2,
-    "outputs": [],
-    "source": [
-     "# SVD1\n",
-@@ -85,7 +85,7 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 25,
-+   "execution_count": 3,
-    "outputs": [],
-    "source": [
-     "plot_svd1_1 = ggplot(res_svd1_long) + \\\n",
-@@ -116,7 +116,7 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 26,
-+   "execution_count": 4,
-    "outputs": [
-     {
-      "data": {
-@@ -128,9 +128,9 @@
-     },
-     {
-      "data": {
--      "text/plain": "<ggplot: (84572512503)>"
-+      "text/plain": "<ggplot: (169005874969)>"
-      },
--     "execution_count": 26,
-+     "execution_count": 4,
-      "metadata": {},
-      "output_type": "execute_result"
-     }
-@@ -159,7 +159,7 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 27,
-+   "execution_count": 5,
-    "outputs": [],
-    "source": [
-     "plot_svd2_1 = ggplot(res_svd2_long) + \\\n",
-@@ -191,14 +191,14 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 5,
-+   "execution_count": 6,
-    "outputs": [
-     {
-      "data": {
-       "text/plain": "       r        variable     value\n0      1          rmse_0  3.095144\n1      2          rmse_0  3.006560\n2      3          rmse_0  2.943416\n3      4          rmse_0  2.903454\n4      5          rmse_0  2.877835\n..   ...             ...       ...\n495   96  rmse_col_means  0.957780\n496   97  rmse_col_means  0.959530\n497   98  rmse_col_means  0.958531\n498   99  rmse_col_means  0.958267\n499  100  rmse_col_means  0.959624\n\n[500 rows x 3 columns]",
-       "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>r</th>\n      <th>variable</th>\n      <th>value</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>rmse_0</td>\n      <td>3.095144</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>rmse_0</td>\n      <td>3.006560</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>rmse_0</td>\n      <td>2.943416</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>rmse_0</td>\n      <td>2.903454</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>rmse_0</td>\n      <td>2.877835</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>495</th>\n      <td>96</td>\n      <td>rmse_col_means</td>\n      <td>0.957780</td>\n    </tr>\n    <tr>\n      <th>496</th>\n      <td>97</td>\n      <td>rmse_col_means</td>\n      <td>0.959530</td>\n    </tr>\n    <tr>\n      <th>497</th>\n      <td>98</td>\n      <td>rmse_col_means</td>\n      <td>0.958531</td>\n    </tr>\n    <tr>\n      <th>498</th>\n      <td>99</td>\n      <td>rmse_col_means</td>\n      <td>0.958267</td>\n    </tr>\n    <tr>\n      <th>499</th>\n      <td>100</td>\n      <td>rmse_col_means</td>\n      <td>0.959624</td>\n    </tr>\n  </tbody>\n</table>\n<p>500 rows × 3 columns</p>\n</div>"
-      },
--     "execution_count": 5,
-+     "execution_count": 6,
-      "metadata": {},
-      "output_type": "execute_result"
-     }
-@@ -228,7 +228,7 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 37,
-+   "execution_count": 7,
-    "outputs": [],
-    "source": [
-     "plot_nmf_1 = ggplot(res_nmf_long) + \\\n",
-@@ -273,7 +273,7 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 7,
-+   "execution_count": 8,
-    "outputs": [],
-    "source": [
-     "res_svd2_stop = pd.read_csv('Results/results_stop_svd2.csv')"
-@@ -287,14 +287,14 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 8,
-+   "execution_count": 9,
-    "outputs": [
-     {
-      "data": {
-       "text/plain": "       stop   r      RMSE\n378  0.0086   9  0.879578\n356  0.0085   9  0.880032\n400  0.0087   9  0.880051\n421  0.0088   8  0.880321\n232  0.0079  17  0.880356\n399  0.0087   8  0.880363\n210  0.0078  17  0.880485\n299  0.0082  18  0.880578\n275  0.0081  16  0.880597\n384  0.0086  15  0.880600",
-       "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>stop</th>\n      <th>r</th>\n      <th>RMSE</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>378</th>\n      <td>0.0086</td>\n      <td>9</td>\n      <td>0.879578</td>\n    </tr>\n    <tr>\n      <th>356</th>\n      <td>0.0085</td>\n      <td>9</td>\n      <td>0.880032</td>\n    </tr>\n    <tr>\n      <th>400</th>\n      <td>0.0087</td>\n      <td>9</td>\n      <td>0.880051</td>\n    </tr>\n    <tr>\n      <th>421</th>\n      <td>0.0088</td>\n      <td>8</td>\n      <td>0.880321</td>\n    </tr>\n    <tr>\n      <th>232</th>\n      <td>0.0079</td>\n      <td>17</td>\n      <td>0.880356</td>\n    </tr>\n    <tr>\n      <th>399</th>\n      <td>0.0087</td>\n      <td>8</td>\n      <td>0.880363</td>\n    </tr>\n    <tr>\n      <th>210</th>\n      <td>0.0078</td>\n      <td>17</td>\n      <td>0.880485</td>\n    </tr>\n    <tr>\n      <th>299</th>\n      <td>0.0082</td>\n      <td>18</td>\n      <td>0.880578</td>\n    </tr>\n    <tr>\n      <th>275</th>\n      <td>0.0081</td>\n      <td>16</td>\n      <td>0.880597</td>\n    </tr>\n    <tr>\n      <th>384</th>\n      <td>0.0086</td>\n      <td>15</td>\n      <td>0.880600</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
-      },
--     "execution_count": 8,
-+     "execution_count": 9,
-      "metadata": {},
-      "output_type": "execute_result"
-     }
-@@ -312,13 +312,13 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 34,
-+   "execution_count": 10,
-    "outputs": [
-     {
-      "data": {
--      "text/plain": "<matplotlib.colorbar.Colorbar at 0x13b106368c0>"
-+      "text/plain": "<matplotlib.colorbar.Colorbar at 0x2759b6d3d60>"
-      },
--     "execution_count": 34,
-+     "execution_count": 10,
-      "metadata": {},
-      "output_type": "execute_result"
-     },
-@@ -366,7 +366,7 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 32,
-+   "execution_count": 11,
-    "outputs": [],
-    "source": [
-     "res_svd1_3d = pd.read_csv('Results/results_r_w_svd1.csv')\n",
-@@ -394,14 +394,14 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 18,
-+   "execution_count": 12,
-    "outputs": [
-     {
-      "data": {
-       "text/plain": "     col_weight   r      RMSE\n423        0.39  10  0.873987\n401        0.38  10  0.874244\n489        0.42  10  0.874274\n357        0.36  10  0.874449\n424        0.39  11  0.874469\n379        0.37  10  0.874475\n467        0.41  10  0.874490\n445        0.40  10  0.874498\n466        0.41   9  0.874507\n470        0.41  13  0.874532",
-       "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>col_weight</th>\n      <th>r</th>\n      <th>RMSE</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>423</th>\n      <td>0.39</td>\n      <td>10</td>\n      <td>0.873987</td>\n    </tr>\n    <tr>\n      <th>401</th>\n      <td>0.38</td>\n      <td>10</td>\n      <td>0.874244</td>\n    </tr>\n    <tr>\n      <th>489</th>\n      <td>0.42</td>\n      <td>10</td>\n      <td>0.874274</td>\n    </tr>\n    <tr>\n      <th>357</th>\n      <td>0.36</td>\n      <td>10</td>\n      <td>0.874449</td>\n    </tr>\n    <tr>\n      <th>424</th>\n      <td>0.39</td>\n      <td>11</td>\n      <td>0.874469</td>\n    </tr>\n    <tr>\n      <th>379</th>\n      <td>0.37</td>\n      <td>10</td>\n      <td>0.874475</td>\n    </tr>\n    <tr>\n      <th>467</th>\n      <td>0.41</td>\n      <td>10</td>\n      <td>0.874490</td>\n    </tr>\n    <tr>\n      <th>445</th>\n      <td>0.40</td>\n      <td>10</td>\n      <td>0.874498</td>\n    </tr>\n    <tr>\n      <th>466</th>\n      <td>0.41</td>\n      <td>9</td>\n      <td>0.874507</td>\n    </tr>\n    <tr>\n      <th>470</th>\n      <td>0.41</td>\n      <td>13</td>\n      <td>0.874532</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
-      },
--     "execution_count": 18,
-+     "execution_count": 12,
-      "metadata": {},
-      "output_type": "execute_result"
-     }
-@@ -419,7 +419,7 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 33,
-+   "execution_count": 13,
-    "outputs": [
-     {
-      "data": {
-@@ -465,14 +465,14 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 13,
-+   "execution_count": 14,
-    "outputs": [
-     {
-      "data": {
-       "text/plain": "     col_weight  r      RMSE\n73         0.25  8  0.867393\n87         0.26  8  0.867397\n59         0.24  8  0.867402\n101        0.27  8  0.867410\n115        0.28  8  0.867494\n45         0.23  8  0.867501\n31         0.22  8  0.867509\n129        0.29  8  0.867578\n17         0.21  8  0.867675\n143        0.30  8  0.867697",
-       "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>col_weight</th>\n      <th>r</th>\n      <th>RMSE</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>73</th>\n      <td>0.25</td>\n      <td>8</td>\n      <td>0.867393</td>\n    </tr>\n    <tr>\n      <th>87</th>\n      <td>0.26</td>\n      <td>8</td>\n      <td>0.867397</td>\n    </tr>\n    <tr>\n      <th>59</th>\n      <td>0.24</td>\n      <td>8</td>\n      <td>0.867402</td>\n    </tr>\n    <tr>\n      <th>101</th>\n      <td>0.27</td>\n      <td>8</td>\n      <td>0.867410</td>\n    </tr>\n    <tr>\n      <th>115</th>\n      <td>0.28</td>\n      <td>8</td>\n      <td>0.867494</td>\n    </tr>\n    <tr>\n      <th>45</th>\n      <td>0.23</td>\n      <td>8</td>\n      <td>0.867501</td>\n    </tr>\n    <tr>\n      <th>31</th>\n      <td>0.22</td>\n      <td>8</td>\n      <td>0.867509</td>\n    </tr>\n    <tr>\n      <th>129</th>\n      <td>0.29</td>\n      <td>8</td>\n      <td>0.867578</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>0.21</td>\n      <td>8</td>\n      <td>0.867675</td>\n    </tr>\n    <tr>\n      <th>143</th>\n      <td>0.30</td>\n      <td>8</td>\n      <td>0.867697</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
-      },
--     "execution_count": 13,
-+     "execution_count": 14,
-      "metadata": {},
-      "output_type": "execute_result"
-     }
-@@ -490,7 +490,7 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 35,
-+   "execution_count": 15,
-    "outputs": [
-     {
-      "data": {
-@@ -536,14 +536,14 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 19,
-+   "execution_count": 16,
-    "outputs": [
-     {
-      "data": {
-       "text/plain": "     col_weight   r      RMSE\n884        0.40  37  0.874794\n927        0.41  37  0.874817\n822        0.39  18  0.874841\n841        0.39  37  0.874848\n865        0.40  18  0.874849\n779        0.38  18  0.874881\n970        0.42  37  0.874892\n908        0.41  18  0.874909\n736        0.37  18  0.874958\n798        0.38  37  0.874959",
-       "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>col_weight</th>\n      <th>r</th>\n      <th>RMSE</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>884</th>\n      <td>0.40</td>\n      <td>37</td>\n      <td>0.874794</td>\n    </tr>\n    <tr>\n      <th>927</th>\n      <td>0.41</td>\n      <td>37</td>\n      <td>0.874817</td>\n    </tr>\n    <tr>\n      <th>822</th>\n      <td>0.39</td>\n      <td>18</td>\n      <td>0.874841</td>\n    </tr>\n    <tr>\n      <th>841</th>\n      <td>0.39</td>\n      <td>37</td>\n      <td>0.874848</td>\n    </tr>\n    <tr>\n      <th>865</th>\n      <td>0.40</td>\n      <td>18</td>\n      <td>0.874849</td>\n    </tr>\n    <tr>\n      <th>779</th>\n      <td>0.38</td>\n      <td>18</td>\n      <td>0.874881</td>\n    </tr>\n    <tr>\n      <th>970</th>\n      <td>0.42</td>\n      <td>37</td>\n      <td>0.874892</td>\n    </tr>\n    <tr>\n      <th>908</th>\n      <td>0.41</td>\n      <td>18</td>\n      <td>0.874909</td>\n    </tr>\n    <tr>\n      <th>736</th>\n      <td>0.37</td>\n      <td>18</td>\n      <td>0.874958</td>\n    </tr>\n    <tr>\n      <th>798</th>\n      <td>0.38</td>\n      <td>37</td>\n      <td>0.874959</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
-      },
--     "execution_count": 19,
-+     "execution_count": 16,
-      "metadata": {},
-      "output_type": "execute_result"
-     }
-@@ -561,7 +561,7 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 36,
-+   "execution_count": 17,
-    "outputs": [
-     {
-      "data": {
-@@ -619,7 +619,7 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 10,
-+   "execution_count": 18,
-    "outputs": [],
-    "source": [
-     "res_sgd_all = pd.read_csv('Results/results_sgd_all.csv')\n",
-@@ -636,14 +636,14 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 9,
-+   "execution_count": 19,
-    "outputs": [
-     {
-      "data": {
-       "text/plain": "     lambda     eta      r      RMSE\n0     0.001  0.0001    1.0  1.062113\n32    0.001  0.0100    5.0  0.974318\n33    0.001  0.0500    5.0  1.045763\n34    0.001  0.1000    5.0  1.244860\n154   0.001  0.1000   50.0  1.428379\n..      ...     ...    ...       ...\n177   1.000  0.0100   50.0  1.079815\n178   1.000  0.0500   50.0  1.365974\n179   1.000  0.1000   50.0  1.560010\n115   1.000  0.0001   15.0  1.068008\n239   1.000  0.1000  100.0  1.511697\n\n[240 rows x 4 columns]",
-       "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>lambda</th>\n      <th>eta</th>\n      <th>r</th>\n      <th>RMSE</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0.001</td>\n      <td>0.0001</td>\n      <td>1.0</td>\n      <td>1.062113</td>\n    </tr>\n    <tr>\n      <th>32</th>\n      <td>0.001</td>\n      <td>0.0100</td>\n      <td>5.0</td>\n      <td>0.974318</td>\n    </tr>\n    <tr>\n      <th>33</th>\n      <td>0.001</td>\n      <td>0.0500</td>\n      <td>5.0</td>\n      <td>1.045763</td>\n    </tr>\n    <tr>\n      <th>34</th>\n      <td>0.001</td>\n      <td>0.1000</td>\n      <td>5.0</td>\n      <td>1.244860</td>\n    </tr>\n    <tr>\n      <th>154</th>\n      <td>0.001</td>\n      <td>0.1000</td>\n      <td>50.0</td>\n      <td>1.428379</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>177</th>\n      <td>1.000</td>\n      <td>0.0100</td>\n      <td>50.0</td>\n      <td>1.079815</td>\n    </tr>\n    <tr>\n      <th>178</th>\n      <td>1.000</td>\n      <td>0.0500</td>\n      <td>50.0</td>\n      <td>1.365974</td>\n    </tr>\n    <tr>\n      <th>179</th>\n      <td>1.000</td>\n      <td>0.1000</td>\n      <td>50.0</td>\n      <td>1.560010</td>\n    </tr>\n    <tr>\n      <th>115</th>\n      <td>1.000</td>\n      <td>0.0001</td>\n      <td>15.0</td>\n      <td>1.068008</td>\n    </tr>\n    <tr>\n      <th>239</th>\n      <td>1.000</td>\n      <td>0.1000</td>\n      <td>100.0</td>\n      <td>1.511697</td>\n    </tr>\n  </tbody>\n</table>\n<p>240 rows × 4 columns</p>\n</div>"
-      },
--     "execution_count": 9,
-+     "execution_count": 19,
-      "metadata": {},
-      "output_type": "execute_result"
-     }
-@@ -660,14 +660,14 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 11,
-+   "execution_count": 20,
-    "outputs": [
-     {
-      "data": {
-       "text/plain": "     lambda     eta      r      RMSE\n0     0.001  0.0001    1.0  1.060065\n1     0.001  0.0010    1.0  1.015277\n2     0.001  0.0100    1.0  0.967272\n3     0.001  0.0500    1.0  1.051208\n4     0.001  0.1000    1.0  1.410866\n..      ...     ...    ...       ...\n235   1.000  0.0001  100.0  1.065621\n236   1.000  0.0010  100.0  1.066486\n237   1.000  0.0100  100.0  1.119838\n238   1.000  0.0500  100.0  1.271468\n239   1.000  0.1000  100.0  1.385446\n\n[240 rows x 4 columns]",
-       "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>lambda</th>\n      <th>eta</th>\n      <th>r</th>\n      <th>RMSE</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0.001</td>\n      <td>0.0001</td>\n      <td>1.0</td>\n      <td>1.060065</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0.001</td>\n      <td>0.0010</td>\n      <td>1.0</td>\n      <td>1.015277</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0.001</td>\n      <td>0.0100</td>\n      <td>1.0</td>\n      <td>0.967272</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>0.001</td>\n      <td>0.0500</td>\n      <td>1.0</td>\n      <td>1.051208</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0.001</td>\n      <td>0.1000</td>\n      <td>1.0</td>\n      <td>1.410866</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>235</th>\n      <td>1.000</td>\n      <td>0.0001</td>\n      <td>100.0</td>\n      <td>1.065621</td>\n    </tr>\n    <tr>\n      <th>236</th>\n      <td>1.000</td>\n      <td>0.0010</td>\n      <td>100.0</td>\n      <td>1.066486</td>\n    </tr>\n    <tr>\n      <th>237</th>\n      <td>1.000</td>\n      <td>0.0100</td>\n      <td>100.0</td>\n      <td>1.119838</td>\n    </tr>\n    <tr>\n      <th>238</th>\n      <td>1.000</td>\n      <td>0.0500</td>\n      <td>100.0</td>\n      <td>1.271468</td>\n    </tr>\n    <tr>\n      <th>239</th>\n      <td>1.000</td>\n      <td>0.1000</td>\n      <td>100.0</td>\n      <td>1.385446</td>\n    </tr>\n  </tbody>\n</table>\n<p>240 rows × 4 columns</p>\n</div>"
-      },
--     "execution_count": 11,
-+     "execution_count": 20,
-      "metadata": {},
-      "output_type": "execute_result"
-     }
-@@ -684,18 +684,8 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 4,
--   "outputs": [
--    {
--     "data": {
--      "text/plain": "      lambda     eta     r      RMSE\n0      0.001  0.0080   1.0  0.954649\n1      0.001  0.0090   1.0  0.956765\n2      0.001  0.0099   1.0  0.971456\n3      0.001  0.0100   1.0  0.940564\n4      0.001  0.0110   1.0  0.940409\n...      ...     ...   ...       ...\n4181   0.050  0.0099  50.0  1.019674\n4182   0.050  0.0100  50.0  0.978794\n4183   0.050  0.0110  50.0  1.029345\n4184   0.050  0.0120  50.0  1.038733\n4185   0.050  0.0200  50.0  0.992154\n\n[4186 rows x 4 columns]",
--      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>lambda</th>\n      <th>eta</th>\n      <th>r</th>\n      <th>RMSE</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0.001</td>\n      <td>0.0080</td>\n      <td>1.0</td>\n      <td>0.954649</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0.001</td>\n      <td>0.0090</td>\n      <td>1.0</td>\n      <td>0.956765</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0.001</td>\n      <td>0.0099</td>\n      <td>1.0</td>\n      <td>0.971456</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>0.001</td>\n      <td>0.0100</td>\n      <td>1.0</td>\n      <td>0.940564</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0.001</td>\n      <td>0.0110</td>\n      <td>1.0</td>\n      <td>0.940409</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>4181</th>\n      <td>0.050</td>\n      <td>0.0099</td>\n      <td>50.0</td>\n      <td>1.019674</td>\n    </tr>\n    <tr>\n      <th>4182</th>\n      <td>0.050</td>\n      <td>0.0100</td>\n      <td>50.0</td>\n      <td>0.978794</td>\n    </tr>\n    <tr>\n      <th>4183</th>\n      <td>0.050</td>\n      <td>0.0110</td>\n      <td>50.0</td>\n      <td>1.029345</td>\n    </tr>\n    <tr>\n      <th>4184</th>\n      <td>0.050</td>\n      <td>0.0120</td>\n      <td>50.0</td>\n      <td>1.038733</td>\n    </tr>\n    <tr>\n      <th>4185</th>\n      <td>0.050</td>\n      <td>0.0200</td>\n      <td>50.0</td>\n      <td>0.992154</td>\n    </tr>\n  </tbody>\n</table>\n<p>4186 rows × 4 columns</p>\n</div>"
--     },
--     "execution_count": 4,
--     "metadata": {},
--     "output_type": "execute_result"
--    }
--   ],
-+   "execution_count": 21,
-+   "outputs": [],
-    "source": [
-     "res_sgd_all3 = pd.read_csv('Results/results_sgd_all2.csv')\n",
-     "res_sgd_all3.drop('index', inplace=True, axis=1)"
-@@ -709,14 +699,14 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 5,
-+   "execution_count": 22,
-    "outputs": [
-     {
-      "data": {
-       "text/plain": "      lambda     eta     r      RMSE\n0      0.001  0.0080   1.0  0.954649\n1      0.001  0.0090   1.0  0.956765\n2      0.001  0.0099   1.0  0.971456\n3      0.001  0.0100   1.0  0.940564\n4      0.001  0.0110   1.0  0.940409\n...      ...     ...   ...       ...\n4181   0.050  0.0099  50.0  1.019674\n4182   0.050  0.0100  50.0  0.978794\n4183   0.050  0.0110  50.0  1.029345\n4184   0.050  0.0120  50.0  1.038733\n4185   0.050  0.0200  50.0  0.992154\n\n[4186 rows x 4 columns]",
-       "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>lambda</th>\n      <th>eta</th>\n      <th>r</th>\n      <th>RMSE</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0.001</td>\n      <td>0.0080</td>\n      <td>1.0</td>\n      <td>0.954649</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0.001</td>\n      <td>0.0090</td>\n      <td>1.0</td>\n      <td>0.956765</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0.001</td>\n      <td>0.0099</td>\n      <td>1.0</td>\n      <td>0.971456</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>0.001</td>\n      <td>0.0100</td>\n      <td>1.0</td>\n      <td>0.940564</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0.001</td>\n      <td>0.0110</td>\n      <td>1.0</td>\n      <td>0.940409</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>4181</th>\n      <td>0.050</td>\n      <td>0.0099</td>\n      <td>50.0</td>\n      <td>1.019674</td>\n    </tr>\n    <tr>\n      <th>4182</th>\n      <td>0.050</td>\n      <td>0.0100</td>\n      <td>50.0</td>\n      <td>0.978794</td>\n    </tr>\n    <tr>\n      <th>4183</th>\n      <td>0.050</td>\n      <td>0.0110</td>\n      <td>50.0</td>\n      <td>1.029345</td>\n    </tr>\n    <tr>\n      <th>4184</th>\n      <td>0.050</td>\n      <td>0.0120</td>\n      <td>50.0</td>\n      <td>1.038733</td>\n    </tr>\n    <tr>\n      <th>4185</th>\n      <td>0.050</td>\n      <td>0.0200</td>\n      <td>50.0</td>\n      <td>0.992154</td>\n    </tr>\n  </tbody>\n</table>\n<p>4186 rows × 4 columns</p>\n</div>"
-      },
--     "execution_count": 5,
-+     "execution_count": 22,
-      "metadata": {},
-      "output_type": "execute_result"
-     }
-@@ -745,7 +735,7 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 51,
-+   "execution_count": 23,
-    "outputs": [],
-    "source": [
-     "res_svd1_reps = pd.read_csv('Results/results_reps_svd1.csv')"
-@@ -759,14 +749,14 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 56,
-+   "execution_count": 24,
-    "outputs": [
-     {
-      "data": {
-       "text/plain": "     rep  weight     r      RMSE\n5      1    0.37  10.0  0.878849\n19     2    0.41  13.0  0.871667\n21     3    0.38  10.0  0.883794\n39     4    0.41  13.0  0.865293\n49     5    0.41  13.0  0.885750\n59     6    0.41  13.0  0.868848\n69     7    0.41  13.0  0.878588\n79     8    0.41  13.0  0.887374\n88     9    0.41   9.0  0.879621\n99    10    0.41  13.0  0.867972\n109   11    0.41  13.0  0.877385\n119   12    0.41  13.0  0.872681\n124   13    0.39  11.0  0.879833\n139   14    0.41  13.0  0.872548\n149   15    0.41  13.0  0.888480\n159   16    0.41  13.0  0.867906\n168   17    0.41   9.0  0.868453\n179   18    0.41  13.0  0.867510\n189   19    0.41  13.0  0.873485\n199   20    0.41  13.0  0.879318",
-       "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>rep</th>\n      <th>weight</th>\n      <th>r</th>\n      <th>RMSE</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>5</th>\n      <td>1</td>\n      <td>0.37</td>\n      <td>10.0</td>\n      <td>0.878849</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>2</td>\n      <td>0.41</td>\n      <td>13.0</td>\n      <td>0.871667</td>\n    </tr>\n    <tr>\n      <th>21</th>\n      <td>3</td>\n      <td>0.38</td>\n      <td>10.0</td>\n      <td>0.883794</td>\n    </tr>\n    <tr>\n      <th>39</th>\n      <td>4</td>\n      <td>0.41</td>\n      <td>13.0</td>\n      <td>0.865293</td>\n    </tr>\n    <tr>\n      <th>49</th>\n      <td>5</td>\n      <td>0.41</td>\n      <td>13.0</td>\n      <td>0.885750</td>\n    </tr>\n    <tr>\n      <th>59</th>\n      <td>6</td>\n      <td>0.41</td>\n      <td>13.0</td>\n      <td>0.868848</td>\n    </tr>\n    <tr>\n      <th>69</th>\n      <td>7</td>\n      <td>0.41</td>\n      <td>13.0</td>\n      <td>0.878588</td>\n    </tr>\n    <tr>\n      <th>79</th>\n      <td>8</td>\n      <td>0.41</td>\n      <td>13.0</td>\n      <td>0.887374</td>\n    </tr>\n    <tr>\n      <th>88</th>\n      <td>9</td>\n      <td>0.41</td>\n      <td>9.0</td>\n      <td>0.879621</td>\n    </tr>\n    <tr>\n      <th>99</th>\n      <td>10</td>\n      <td>0.41</td>\n      <td>13.0</td>\n      <td>0.867972</td>\n    </tr>\n    <tr>\n      <th>109</th>\n      <td>11</td>\n      <td>0.41</td>\n      <td>13.0</td>\n      <td>0.877385</td>\n    </tr>\n    <tr>\n      <th>119</th>\n      <td>12</td>\n      <td>0.41</td>\n      <td>13.0</td>\n      <td>0.872681</td>\n    </tr>\n    <tr>\n      <th>124</th>\n      <td>13</td>\n      <td>0.39</td>\n      <td>11.0</td>\n      <td>0.879833</td>\n    </tr>\n    <tr>\n      <th>139</th>\n      <td>14</td>\n      <td>0.41</td>\n      <td>13.0</td>\n      <td>0.872548</td>\n    </tr>\n    <tr>\n      <th>149</th>\n      <td>15</td>\n      <td>0.41</td>\n      <td>13.0</td>\n      <td>0.888480</td>\n    </tr>\n    <tr>\n      <th>159</th>\n      <td>16</td>\n      <td>0.41</td>\n      <td>13.0</td>\n      <td>0.867906</td>\n    </tr>\n    <tr>\n      <th>168</th>\n      <td>17</td>\n      <td>0.41</td>\n      <td>9.0</td>\n      <td>0.868453</td>\n    </tr>\n    <tr>\n      <th>179</th>\n      <td>18</td>\n      <td>0.41</td>\n      <td>13.0</td>\n      <td>0.867510</td>\n    </tr>\n    <tr>\n      <th>189</th>\n      <td>19</td>\n      <td>0.41</td>\n      <td>13.0</td>\n      <td>0.873485</td>\n    </tr>\n    <tr>\n      <th>199</th>\n      <td>20</td>\n      <td>0.41</td>\n      <td>13.0</td>\n      <td>0.879318</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
-      },
--     "execution_count": 56,
-+     "execution_count": 24,
-      "metadata": {},
-      "output_type": "execute_result"
-     }
-@@ -783,14 +773,14 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 52,
-+   "execution_count": 25,
-    "outputs": [
-     {
-      "data": {
-       "text/plain": "     rep  weight     r      RMSE\n39     4    0.41  13.0  0.865293\n30     4    0.39  10.0  0.865373\n33     4    0.36  10.0  0.865408\n31     4    0.38  10.0  0.865569\n34     4    0.39  11.0  0.865717\n35     4    0.37  10.0  0.866763\n37     4    0.40  10.0  0.867131\n179   18    0.41  13.0  0.867510\n32     4    0.42  10.0  0.867536\n36     4    0.41  10.0  0.867569",
-       "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>rep</th>\n      <th>weight</th>\n      <th>r</th>\n      <th>RMSE</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>39</th>\n      <td>4</td>\n      <td>0.41</td>\n      <td>13.0</td>\n      <td>0.865293</td>\n    </tr>\n    <tr>\n      <th>30</th>\n      <td>4</td>\n      <td>0.39</td>\n      <td>10.0</td>\n      <td>0.865373</td>\n    </tr>\n    <tr>\n      <th>33</th>\n      <td>4</td>\n      <td>0.36</td>\n      <td>10.0</td>\n      <td>0.865408</td>\n    </tr>\n    <tr>\n      <th>31</th>\n      <td>4</td>\n      <td>0.38</td>\n      <td>10.0</td>\n      <td>0.865569</td>\n    </tr>\n    <tr>\n      <th>34</th>\n      <td>4</td>\n      <td>0.39</td>\n      <td>11.0</td>\n      <td>0.865717</td>\n    </tr>\n    <tr>\n      <th>35</th>\n      <td>4</td>\n      <td>0.37</td>\n      <td>10.0</td>\n      <td>0.866763</td>\n    </tr>\n    <tr>\n      <th>37</th>\n      <td>4</td>\n      <td>0.40</td>\n      <td>10.0</td>\n      <td>0.867131</td>\n    </tr>\n    <tr>\n      <th>179</th>\n      <td>18</td>\n      <td>0.41</td>\n      <td>13.0</td>\n      <td>0.867510</td>\n    </tr>\n    <tr>\n      <th>32</th>\n      <td>4</td>\n      <td>0.42</td>\n      <td>10.0</td>\n      <td>0.867536</td>\n    </tr>\n    <tr>\n      <th>36</th>\n      <td>4</td>\n      <td>0.41</td>\n      <td>10.0</td>\n      <td>0.867569</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
-      },
--     "execution_count": 52,
-+     "execution_count": 25,
-      "metadata": {},
-      "output_type": "execute_result"
-     }
Index: .idea/shelf/Uncommitted_changes_before_Update_at_12_04_2022_09_09__Changes_.xml
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_12_04_2022_09_09__Changes_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_12_04_2022_09_09__Changes_.xml
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_12_04_2022_09_09__Changes_.xml	
+++ /dev/null	
@@ -1,14 +0,0 @@
-<changelist name="Uncommitted_changes_before_Update_at_12_04_2022_09_09_[Changes]" date="1649747390063" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_12_04_2022_09_09_[Changes]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Update at 12.04.2022 09:09 [Changes]" />
-  <binary>
-    <option name="BEFORE_PATH" value="Report/out/report.synctex.gz" />
-    <option name="AFTER_PATH" value="Report/out/report.synctex.gz" />
-    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_12_04_2022_09_09_[Changes]/report.synctex.gz" />
-  </binary>
-  <binary>
-    <option name="BEFORE_PATH" value="Report/out/report.pdf" />
-    <option name="AFTER_PATH" value="Report/out/report.pdf" />
-    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_12_04_2022_09_09_[Changes]/report.pdf" />
-  </binary>
-</changelist>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_10_04_2022_17_19__Changes_.xml
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_10_04_2022_17_19__Changes_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_10_04_2022_17_19__Changes_.xml
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_10_04_2022_17_19__Changes_.xml	
+++ /dev/null	
@@ -1,14 +0,0 @@
-<changelist name="Uncommitted_changes_before_Update_at_10_04_2022_17_19_[Changes]" date="1649604004904" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_10_04_2022_17_19_[Changes]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Update at 10.04.2022 17:19 [Changes]" />
-  <binary>
-    <option name="BEFORE_PATH" value="out/report.pdf" />
-    <option name="AFTER_PATH" value="out/report.pdf" />
-    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_10_04_2022_17_19_[Changes]/report.pdf" />
-  </binary>
-  <binary>
-    <option name="BEFORE_PATH" value="out/report.synctex.gz" />
-    <option name="AFTER_PATH" value="out/report.synctex.gz" />
-    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_10_04_2022_17_19_[Changes]/report.synctex.gz" />
-  </binary>
-</changelist>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_12_04_2022_09_09_[Changes]/shelved.patch
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_12_04_2022_09_09_[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_12_04_2022_09_09_[Changes]/shelved.patch
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_12_04_2022_09_09_[Changes]/shelved.patch	
+++ /dev/null	
@@ -1,575 +0,0 @@
-Index: .idea/shelf/Uncommitted_changes_before_Update_at_04_04_2022_19_49__Changes_.xml
-===================================================================
-diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_04_04_2022_19_49__Changes_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_04_04_2022_19_49__Changes_.xml
-deleted file mode 100644
---- a/.idea/shelf/Uncommitted_changes_before_Update_at_04_04_2022_19_49__Changes_.xml	(revision 68fcad456ec86d517548ebd17fadc1a0a7b9b657)
-+++ /dev/null	(revision 68fcad456ec86d517548ebd17fadc1a0a7b9b657)
-@@ -1,4 +0,0 @@
--<changelist name="Uncommitted_changes_before_Update_at_04_04_2022_19_49_[Changes]" date="1649094589962" recycled="true" deleted="true">
--  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_04_04_2022_19_49_[Changes]/shelved.patch" />
--  <option name="DESCRIPTION" value="Uncommitted changes before Update at 04.04.2022 19:49 [Changes]" />
--</changelist>
-\ No newline at end of file
-Index: .idea/workspace.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"62d33fe8-2ec7-4d31-9bba-7fa36bc76fcb\" name=\"Changes\" comment=\"computing results for sgd and correcting plots\">\r\n      <change afterPath=\"$PROJECT_DIR$/Results/results_sgd_reps.csv\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/recom_system_309585_306393.py\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/res.txt\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/src/compute_results_sgd_reps.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/MoCaDR_proj1.iml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/MoCaDR_proj1.iml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/misc.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/misc.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_10_04_2022_17_19__Changes_.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_10_04_2022_17_19__Changes_.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_10_04_2022_22_04__Changes_.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_10_04_2022_22_04__Changes_.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Report/auxil/report.aux\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Report/auxil/report.aux\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Report/auxil/report.log\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Report/auxil/report.log\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Report/out/report.pdf\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Report/out/report.pdf\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Report/out/report.synctex.gz\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Report/out/report.synctex.gz\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/algorithm_functions.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/algorithm_functions.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/presenting_results.ipynb\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/presenting_results.ipynb\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"RMarkdown.document\" />\r\n        <option value=\"Jupyter Notebook\" />\r\n        <option value=\"Python Script\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitSEFilterConfiguration\">\r\n    <file-type-list>\r\n      <filtered-out-file-type name=\"LOCAL_BRANCH\" />\r\n      <filtered-out-file-type name=\"REMOTE_BRANCH\" />\r\n      <filtered-out-file-type name=\"TAG\" />\r\n      <filtered-out-file-type name=\"COMMIT_BY_MESSAGE\" />\r\n    </file-type-list>\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"267VjyGJ9wr8oG7c6vyJzNQTvFk\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\">\r\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">\r\n    <property name=\"ASKED_ADD_EXTERNAL_FILES\" value=\"true\" />\r\n    <property name=\"ASKED_SHARE_PROJECT_CONFIGURATION_FILES\" value=\"true\" />\r\n    <property name=\"RunOnceActivity.OpenProjectViewOnStart\" value=\"true\" />\r\n    <property name=\"RunOnceActivity.ShowReadmeOnStart\" value=\"true\" />\r\n    <property name=\"SHARE_PROJECT_CONFIGURATION_FILES\" value=\"true\" />\r\n    <property name=\"WebServerToolWindowFactoryState\" value=\"false\" />\r\n    <property name=\"last_opened_file_path\" value=\"$PROJECT_DIR$/Report\" />\r\n    <property name=\"node.js.detected.package.eslint\" value=\"true\" />\r\n    <property name=\"node.js.detected.package.tslint\" value=\"true\" />\r\n    <property name=\"node.js.selected.package.eslint\" value=\"(autodetect)\" />\r\n    <property name=\"node.js.selected.package.tslint\" value=\"(autodetect)\" />\r\n    <property name=\"settings.editor.selected.configurable\" value=\"org.jetbrains.plugins.notebooks.jupyter.connections.configuration.JupyterServerConfigurable\" />\r\n  </component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"D:\\Studia\\MoCaDR_proj1\\Report\" />\r\n      <recent name=\"D:\\Studia\\MoCaDR_proj1\" />\r\n    </key>\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"D:\\Studia\\MoCaDR_proj1\\Report\\fig\\syf\" />\r\n      <recent name=\"D:\\Studia\\MoCaDR_proj1\\Results\\Syf\" />\r\n      <recent name=\"D:\\Studia\\MoCaDR_proj1\\Report\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\" selected=\"Python.compute_results_sgd_test\">\r\n    <configuration name=\"report\" type=\"LATEX_RUN_CONFIGURATION\" factoryName=\"LaTeX configuration factory\" temporary=\"true\">\r\n      <texify>\r\n        <compiler>PDFLATEX</compiler>\r\n        <compiler-path />\r\n        <sumatra-path />\r\n        <pdf-viewer>SUMATRA</pdf-viewer>\r\n        <viewer-command />\r\n        <compiler-arguments />\r\n        <envs />\r\n        <main-file>$PROJECT_DIR$/Report/report.tex</main-file>\r\n        <output-path>$PROJECT_DIR$/Report/out</output-path>\r\n        <auxil-path>$PROJECT_DIR$/Report/auxil</auxil-path>\r\n        <compile-twice>false</compile-twice>\r\n        <output-format>PDF</output-format>\r\n        <latex-distribution>MIKTEX</latex-distribution>\r\n        <has-been-run>true</has-been-run>\r\n        <bib-run-config>[]</bib-run-config>\r\n        <makeindex-run-config>[]</makeindex-run-config>\r\n      </texify>\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"compute_results3\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"MoCaDR_proj1\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/src\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/src/compute_results3.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"compute_results_sgd_test\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"MoCaDR_proj1\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/src\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/src/compute_results_sgd_test.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"manipulating_datasets\" type=\"PythonConfigurationType\" factoryName=\"Python\" nameIsGenerated=\"true\">\r\n      <module name=\"MoCaDR_proj1\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"D:\\Studia\\MoCaDR_proj1\\manipulating_datasets.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"performing_algorithms\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"MoCaDR_proj1\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/src\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/src/performing_algorithms.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"splitting_data\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"MoCaDR_proj1\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/splitting_data.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <list>\r\n      <item itemvalue=\"LaTeX.report\" />\r\n      <item itemvalue=\"Python.manipulating_datasets\" />\r\n      <item itemvalue=\"Python.compute_results3\" />\r\n      <item itemvalue=\"Python.performing_algorithms\" />\r\n      <item itemvalue=\"Python.splitting_data\" />\r\n      <item itemvalue=\"Python.compute_results_sgd_test\" />\r\n    </list>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Python.compute_results_sgd_test\" />\r\n        <item itemvalue=\"LaTeX.report\" />\r\n        <item itemvalue=\"Python.splitting_data\" />\r\n        <item itemvalue=\"Python.performing_algorithms\" />\r\n        <item itemvalue=\"Python.compute_results3\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"SvnConfiguration\">\r\n    <configuration>C:\\Users\\dmika\\AppData\\Roaming\\Subversion</configuration>\r\n  </component>\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"62d33fe8-2ec7-4d31-9bba-7fa36bc76fcb\" name=\"Changes\" comment=\"\" />\r\n      <created>1646774751311</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1646774751311</updated>\r\n      <workItem from=\"1646774754054\" duration=\"26000\" />\r\n      <workItem from=\"1646774814002\" duration=\"835000\" />\r\n      <workItem from=\"1646775670059\" duration=\"47000\" />\r\n      <workItem from=\"1646775727774\" duration=\"757000\" />\r\n      <workItem from=\"1646816479175\" duration=\"461000\" />\r\n      <workItem from=\"1646896158453\" duration=\"762000\" />\r\n      <workItem from=\"1646896945682\" duration=\"630000\" />\r\n      <workItem from=\"1646897595717\" duration=\"2651000\" />\r\n      <workItem from=\"1646900622776\" duration=\"425000\" />\r\n      <workItem from=\"1646915517163\" duration=\"449000\" />\r\n      <workItem from=\"1646915983800\" duration=\"240000\" />\r\n      <workItem from=\"1646916258164\" duration=\"389000\" />\r\n      <workItem from=\"1646916663441\" duration=\"393000\" />\r\n      <workItem from=\"1646933050771\" duration=\"1105000\" />\r\n      <workItem from=\"1646936230049\" duration=\"1064000\" />\r\n      <workItem from=\"1647027781891\" duration=\"1279000\" />\r\n      <workItem from=\"1647071928401\" duration=\"2390000\" />\r\n      <workItem from=\"1647181792640\" duration=\"2955000\" />\r\n      <workItem from=\"1647276453225\" duration=\"264000\" />\r\n      <workItem from=\"1647276734574\" duration=\"7710000\" />\r\n      <workItem from=\"1647699257802\" duration=\"1713000\" />\r\n      <workItem from=\"1647774897107\" duration=\"5656000\" />\r\n      <workItem from=\"1648326375030\" duration=\"985000\" />\r\n      <workItem from=\"1648327394372\" duration=\"485000\" />\r\n      <workItem from=\"1648481964443\" duration=\"4660000\" />\r\n      <workItem from=\"1648576643019\" duration=\"4941000\" />\r\n      <workItem from=\"1648885683106\" duration=\"2799000\" />\r\n      <workItem from=\"1649100586613\" duration=\"401000\" />\r\n      <workItem from=\"1649142695450\" duration=\"1248000\" />\r\n      <workItem from=\"1649154173111\" duration=\"1535000\" />\r\n      <workItem from=\"1649225210342\" duration=\"2520000\" />\r\n      <workItem from=\"1649252977347\" duration=\"33000\" />\r\n      <workItem from=\"1649256897698\" duration=\"20000\" />\r\n      <workItem from=\"1649263859461\" duration=\"4502000\" />\r\n      <workItem from=\"1649340598453\" duration=\"3005000\" />\r\n      <workItem from=\"1649345448932\" duration=\"596000\" />\r\n      <workItem from=\"1649407349351\" duration=\"1672000\" />\r\n      <workItem from=\"1649429201664\" duration=\"3019000\" />\r\n      <workItem from=\"1649438274438\" duration=\"1751000\" />\r\n      <workItem from=\"1649601806697\" duration=\"9000\" />\r\n      <workItem from=\"1649617160604\" duration=\"489000\" />\r\n      <workItem from=\"1649690370612\" duration=\"139000\" />\r\n      <workItem from=\"1649690526520\" duration=\"5389000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"a\">\r\n      <created>1646775274557</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646775274557</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"init commit\">\r\n      <created>1646775361377</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646775361377</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"init commit\">\r\n      <created>1646775521666</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646775521666</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"init commit\">\r\n      <created>1646775784756</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646775784756</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"init commit\">\r\n      <created>1646775870305</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646775870305</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"Adding dataset\">\r\n      <created>1646816860800</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646816860800</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"Setting up LaTeX\">\r\n      <created>1646898995949</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646898995949</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00008\" summary=\"Setting up LaTeX\">\r\n      <created>1646900639924</created>\r\n      <option name=\"number\" value=\"00008\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646900639924</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00009\" summary=\"Cleaning data\">\r\n      <created>1646934068924</created>\r\n      <option name=\"number\" value=\"00009\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646934068924</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00010\" summary=\"Cleaning data\">\r\n      <created>1647028888721</created>\r\n      <option name=\"number\" value=\"00010\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647028888721</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00011\" summary=\"Cleaning data\">\r\n      <created>1647029054319</created>\r\n      <option name=\"number\" value=\"00011\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647029054319</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00012\" summary=\"Tamarka testing\">\r\n      <created>1647163191686</created>\r\n      <option name=\"number\" value=\"00012\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00012\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647163191686</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00013\" summary=\"Experimenting with 'NaN' values\">\r\n      <created>1647168883206</created>\r\n      <option name=\"number\" value=\"00013\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00013\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647168883206</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00014\" summary=\"Experimenting with 'NaN' values\">\r\n      <created>1647175373237</created>\r\n      <option name=\"number\" value=\"00014\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00014\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647175373237</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00015\" summary=\"Removing duplicated packages\">\r\n      <created>1647175629524</created>\r\n      <option name=\"number\" value=\"00015\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00015\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647175629524</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00016\" summary=\"Testing methods\">\r\n      <created>1647184013664</created>\r\n      <option name=\"number\" value=\"00016\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00016\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647184013664</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00017\" summary=\"Testing methods\">\r\n      <created>1647184756535</created>\r\n      <option name=\"number\" value=\"00017\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00017\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647184756535</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00018\" summary=\"SVD opis Tamarka\">\r\n      <created>1647698852885</created>\r\n      <option name=\"number\" value=\"00018\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00018\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647698852885</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00019\" summary=\"SVD opis Tamarka\">\r\n      <created>1647699044053</created>\r\n      <option name=\"number\" value=\"00019\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00019\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647699044053</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00020\" summary=\"SVD opis Tamarka\">\r\n      <created>1647699173625</created>\r\n      <option name=\"number\" value=\"00020\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00020\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647699173625</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00021\" summary=\"Testing SVD2\">\r\n      <created>1648327858794</created>\r\n      <option name=\"number\" value=\"00021\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00021\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1648327858794</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00022\" summary=\"computing results\">\r\n      <created>1649155805892</created>\r\n      <option name=\"number\" value=\"00022\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00022\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1649155805892</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00023\" summary=\"Computing stop condition svd2\">\r\n      <created>1649345310151</created>\r\n      <option name=\"number\" value=\"00023\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00023\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1649345310151</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00024\" summary=\"Computing stop condition svd2\">\r\n      <created>1649408687739</created>\r\n      <option name=\"number\" value=\"00024\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00024\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1649408687739</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00025\" summary=\"Presenting results for NMF\">\r\n      <created>1649408979238</created>\r\n      <option name=\"number\" value=\"00025\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00025\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1649408979239</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00026\" summary=\"computing results\">\r\n      <created>1649434249565</created>\r\n      <option name=\"number\" value=\"00026\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00026\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1649434249565</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00027\" summary=\"computing results\">\r\n      <created>1649492068004</created>\r\n      <option name=\"number\" value=\"00027\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00027\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1649492068004</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00028\" summary=\"computing results\">\r\n      <created>1649518863744</created>\r\n      <option name=\"number\" value=\"00028\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00028\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1649518863744</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00029\" summary=\"computing results for sgd and correcting plots\">\r\n      <created>1649594927715</created>\r\n      <option name=\"number\" value=\"00029\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00029\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1649594927715</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00030\" summary=\"computing results for sgd and correcting plots\">\r\n      <created>1649594938450</created>\r\n      <option name=\"number\" value=\"00030\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00030\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1649594938450</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"31\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <option name=\"ADD_EXTERNAL_FILES_SILENTLY\" value=\"true\" />\r\n    <MESSAGE value=\"a\" />\r\n    <MESSAGE value=\"init commit\" />\r\n    <MESSAGE value=\"Adding dataset\" />\r\n    <MESSAGE value=\"Setting up LaTeX\" />\r\n    <MESSAGE value=\"Cleaning data\" />\r\n    <MESSAGE value=\"Tamarka testing\" />\r\n    <MESSAGE value=\"Experimenting with 'NaN' values\" />\r\n    <MESSAGE value=\"Removing duplicated packages\" />\r\n    <MESSAGE value=\"Testing methods\" />\r\n    <MESSAGE value=\"SVD opis Tamarka\" />\r\n    <MESSAGE value=\"Testing SVD2\" />\r\n    <MESSAGE value=\"Computing stop condition svd2\" />\r\n    <MESSAGE value=\"Presenting results for NMF\" />\r\n    <MESSAGE value=\"computing results\" />\r\n    <MESSAGE value=\"computing results for sgd and correcting plots\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"computing results for sgd and correcting plots\" />\r\n  </component>\r\n  <component name=\"com.intellij.coverage.CoverageDataManagerImpl\">\r\n    <SUITE FILE_PATH=\"coverage/main_py$splitting_manipulating_data.coverage\" NAME=\"splitting_manipulating_data Coverage Results\" MODIFIED=\"1648627073782\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/src\" />\r\n    <SUITE FILE_PATH=\"coverage/main_py$algorithm_functions.coverage\" NAME=\"algorithm_functions Coverage Results\" MODIFIED=\"1648826781925\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/src\" />\r\n    <SUITE FILE_PATH=\"coverage/main_py$computing_results.coverage\" NAME=\"computing_results Coverage Results\" MODIFIED=\"1648727756891\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/src\" />\r\n    <SUITE FILE_PATH=\"coverage/main_py$algorithms_script.coverage\" NAME=\"performing_algorithms Coverage Results\" MODIFIED=\"1647535849226\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/src\" />\r\n    <SUITE FILE_PATH=\"coverage/main_py$splitting_manipulating_data__1_.coverage\" NAME=\"splitting_manipulating_data (1) Coverage Results\" MODIFIED=\"1647870795349\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/src\" />\r\n    <SUITE FILE_PATH=\"coverage/main_py$a.coverage\" NAME=\"a Coverage Results\" MODIFIED=\"1648057368569\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/src\" />\r\n    <SUITE FILE_PATH=\"coverage/main_py$compute_results3.coverage\" NAME=\"compute_results3 Coverage Results\" MODIFIED=\"1649268385203\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/src\" />\r\n    <SUITE FILE_PATH=\"coverage/main_py$compute_results_sgd_test.coverage\" NAME=\"compute_results_sgd_test Coverage Results\" MODIFIED=\"1649528622400\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/src\" />\r\n    <SUITE FILE_PATH=\"coverage/MoCaDR_proj1$splitting_data.coverage\" NAME=\"splitting_data Coverage Results\" MODIFIED=\"1647174411611\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\r\n    <SUITE FILE_PATH=\"coverage/main_py$performing_algorithms__1_.coverage\" NAME=\"performing_algorithms (1) Coverage Results\" MODIFIED=\"1648057220868\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/src\" />\r\n    <SUITE FILE_PATH=\"coverage/main_py$performing_algorithms.coverage\" NAME=\"performing_algorithms Coverage Results\" MODIFIED=\"1648365686686\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/src\" />\r\n  </component>\r\n</project>
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/.idea/workspace.xml b/.idea/workspace.xml
---- a/.idea/workspace.xml	(revision 68fcad456ec86d517548ebd17fadc1a0a7b9b657)
-+++ b/.idea/workspace.xml	(date 1649747318463)
-@@ -4,23 +4,7 @@
-     <option name="autoReloadType" value="SELECTIVE" />
-   </component>
-   <component name="ChangeListManager">
--    <list default="true" id="62d33fe8-2ec7-4d31-9bba-7fa36bc76fcb" name="Changes" comment="computing results for sgd and correcting plots">
--      <change afterPath="$PROJECT_DIR$/Results/results_sgd_reps.csv" afterDir="false" />
--      <change afterPath="$PROJECT_DIR$/recom_system_309585_306393.py" afterDir="false" />
--      <change afterPath="$PROJECT_DIR$/res.txt" afterDir="false" />
--      <change afterPath="$PROJECT_DIR$/src/compute_results_sgd_reps.py" afterDir="false" />
--      <change beforePath="$PROJECT_DIR$/.idea/MoCaDR_proj1.iml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/MoCaDR_proj1.iml" afterDir="false" />
--      <change beforePath="$PROJECT_DIR$/.idea/misc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/misc.xml" afterDir="false" />
--      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_10_04_2022_17_19__Changes_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_10_04_2022_17_19__Changes_.xml" afterDir="false" />
--      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_10_04_2022_22_04__Changes_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_10_04_2022_22_04__Changes_.xml" afterDir="false" />
--      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
--      <change beforePath="$PROJECT_DIR$/Report/auxil/report.aux" beforeDir="false" afterPath="$PROJECT_DIR$/Report/auxil/report.aux" afterDir="false" />
--      <change beforePath="$PROJECT_DIR$/Report/auxil/report.log" beforeDir="false" afterPath="$PROJECT_DIR$/Report/auxil/report.log" afterDir="false" />
--      <change beforePath="$PROJECT_DIR$/Report/out/report.pdf" beforeDir="false" afterPath="$PROJECT_DIR$/Report/out/report.pdf" afterDir="false" />
--      <change beforePath="$PROJECT_DIR$/Report/out/report.synctex.gz" beforeDir="false" afterPath="$PROJECT_DIR$/Report/out/report.synctex.gz" afterDir="false" />
--      <change beforePath="$PROJECT_DIR$/src/algorithm_functions.py" beforeDir="false" afterPath="$PROJECT_DIR$/src/algorithm_functions.py" afterDir="false" />
--      <change beforePath="$PROJECT_DIR$/src/presenting_results.ipynb" beforeDir="false" afterPath="$PROJECT_DIR$/src/presenting_results.ipynb" afterDir="false" />
--    </list>
-+    <list default="true" id="62d33fe8-2ec7-4d31-9bba-7fa36bc76fcb" name="Changes" comment="preparing main script" />
-     <option name="SHOW_DIALOG" value="false" />
-     <option name="HIGHLIGHT_CONFLICTS" value="true" />
-     <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
-@@ -82,7 +66,7 @@
-       <recent name="D:\Studia\MoCaDR_proj1\Report" />
-     </key>
-   </component>
--  <component name="RunManager" selected="Python.compute_results_sgd_test">
-+  <component name="RunManager" selected="LaTeX.report">
-     <configuration name="report" type="LATEX_RUN_CONFIGURATION" factoryName="LaTeX configuration factory" temporary="true">
-       <texify>
-         <compiler>PDFLATEX</compiler>
-@@ -104,7 +88,7 @@
-       </texify>
-       <method v="2" />
-     </configuration>
--    <configuration name="compute_results3" type="PythonConfigurationType" factoryName="Python" temporary="true" nameIsGenerated="true">
-+    <configuration name="compute_results_sgd_test" type="PythonConfigurationType" factoryName="Python" temporary="true" nameIsGenerated="true">
-       <module name="MoCaDR_proj1" />
-       <option name="INTERPRETER_OPTIONS" value="" />
-       <option name="PARENT_ENVS" value="true" />
-@@ -117,7 +101,7 @@
-       <option name="ADD_CONTENT_ROOTS" value="true" />
-       <option name="ADD_SOURCE_ROOTS" value="true" />
-       <EXTENSION ID="PythonCoverageRunConfigurationExtension" runner="coverage.py" />
--      <option name="SCRIPT_NAME" value="$PROJECT_DIR$/src/compute_results3.py" />
-+      <option name="SCRIPT_NAME" value="$PROJECT_DIR$/src/compute_results_sgd_test.py" />
-       <option name="PARAMETERS" value="" />
-       <option name="SHOW_COMMAND_LINE" value="false" />
-       <option name="EMULATE_TERMINAL" value="false" />
-@@ -126,7 +110,7 @@
-       <option name="INPUT_FILE" value="" />
-       <method v="2" />
-     </configuration>
--    <configuration name="compute_results_sgd_test" type="PythonConfigurationType" factoryName="Python" temporary="true" nameIsGenerated="true">
-+    <configuration name="manipulating_datasets" type="PythonConfigurationType" factoryName="Python" nameIsGenerated="true">
-       <module name="MoCaDR_proj1" />
-       <option name="INTERPRETER_OPTIONS" value="" />
-       <option name="PARENT_ENVS" value="true" />
-@@ -134,12 +118,12 @@
-         <env name="PYTHONUNBUFFERED" value="1" />
-       </envs>
-       <option name="SDK_HOME" value="" />
--      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$/src" />
-+      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$" />
-       <option name="IS_MODULE_SDK" value="true" />
-       <option name="ADD_CONTENT_ROOTS" value="true" />
-       <option name="ADD_SOURCE_ROOTS" value="true" />
-       <EXTENSION ID="PythonCoverageRunConfigurationExtension" runner="coverage.py" />
--      <option name="SCRIPT_NAME" value="$PROJECT_DIR$/src/compute_results_sgd_test.py" />
-+      <option name="SCRIPT_NAME" value="D:\Studia\MoCaDR_proj1\manipulating_datasets.py" />
-       <option name="PARAMETERS" value="" />
-       <option name="SHOW_COMMAND_LINE" value="false" />
-       <option name="EMULATE_TERMINAL" value="false" />
-@@ -148,7 +132,7 @@
-       <option name="INPUT_FILE" value="" />
-       <method v="2" />
-     </configuration>
--    <configuration name="manipulating_datasets" type="PythonConfigurationType" factoryName="Python" nameIsGenerated="true">
-+    <configuration name="performing_algorithms" type="PythonConfigurationType" factoryName="Python" temporary="true" nameIsGenerated="true">
-       <module name="MoCaDR_proj1" />
-       <option name="INTERPRETER_OPTIONS" value="" />
-       <option name="PARENT_ENVS" value="true" />
-@@ -156,12 +140,12 @@
-         <env name="PYTHONUNBUFFERED" value="1" />
-       </envs>
-       <option name="SDK_HOME" value="" />
--      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$" />
-+      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$/src" />
-       <option name="IS_MODULE_SDK" value="true" />
-       <option name="ADD_CONTENT_ROOTS" value="true" />
-       <option name="ADD_SOURCE_ROOTS" value="true" />
-       <EXTENSION ID="PythonCoverageRunConfigurationExtension" runner="coverage.py" />
--      <option name="SCRIPT_NAME" value="D:\Studia\MoCaDR_proj1\manipulating_datasets.py" />
-+      <option name="SCRIPT_NAME" value="$PROJECT_DIR$/src/performing_algorithms.py" />
-       <option name="PARAMETERS" value="" />
-       <option name="SHOW_COMMAND_LINE" value="false" />
-       <option name="EMULATE_TERMINAL" value="false" />
-@@ -170,7 +154,7 @@
-       <option name="INPUT_FILE" value="" />
-       <method v="2" />
-     </configuration>
--    <configuration name="performing_algorithms" type="PythonConfigurationType" factoryName="Python" temporary="true" nameIsGenerated="true">
-+    <configuration name="recom_system_309585_306393" type="PythonConfigurationType" factoryName="Python" temporary="true" nameIsGenerated="true">
-       <module name="MoCaDR_proj1" />
-       <option name="INTERPRETER_OPTIONS" value="" />
-       <option name="PARENT_ENVS" value="true" />
-@@ -178,12 +162,12 @@
-         <env name="PYTHONUNBUFFERED" value="1" />
-       </envs>
-       <option name="SDK_HOME" value="" />
--      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$/src" />
-+      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$" />
-       <option name="IS_MODULE_SDK" value="true" />
-       <option name="ADD_CONTENT_ROOTS" value="true" />
-       <option name="ADD_SOURCE_ROOTS" value="true" />
-       <EXTENSION ID="PythonCoverageRunConfigurationExtension" runner="coverage.py" />
--      <option name="SCRIPT_NAME" value="$PROJECT_DIR$/src/performing_algorithms.py" />
-+      <option name="SCRIPT_NAME" value="$PROJECT_DIR$/recom_system_309585_306393.py" />
-       <option name="PARAMETERS" value="" />
-       <option name="SHOW_COMMAND_LINE" value="false" />
-       <option name="EMULATE_TERMINAL" value="false" />
-@@ -217,18 +201,18 @@
-     <list>
-       <item itemvalue="LaTeX.report" />
-       <item itemvalue="Python.manipulating_datasets" />
--      <item itemvalue="Python.compute_results3" />
-       <item itemvalue="Python.performing_algorithms" />
-       <item itemvalue="Python.splitting_data" />
-       <item itemvalue="Python.compute_results_sgd_test" />
-+      <item itemvalue="Python.recom_system_309585_306393" />
-     </list>
-     <recent_temporary>
-       <list>
-+        <item itemvalue="LaTeX.report" />
-+        <item itemvalue="Python.recom_system_309585_306393" />
-         <item itemvalue="Python.compute_results_sgd_test" />
--        <item itemvalue="LaTeX.report" />
-         <item itemvalue="Python.splitting_data" />
-         <item itemvalue="Python.performing_algorithms" />
--        <item itemvalue="Python.compute_results3" />
-       </list>
-     </recent_temporary>
-   </component>
-@@ -286,6 +270,7 @@
-       <workItem from="1649617160604" duration="489000" />
-       <workItem from="1649690370612" duration="139000" />
-       <workItem from="1649690526520" duration="5389000" />
-+      <workItem from="1649710371650" duration="619000" />
-     </task>
-     <task id="LOCAL-00001" summary="a">
-       <created>1646775274557</created>
-@@ -497,7 +482,14 @@
-       <option name="project" value="LOCAL" />
-       <updated>1649594938450</updated>
-     </task>
--    <option name="localTasksCounter" value="31" />
-+    <task id="LOCAL-00031" summary="preparing main script">
-+      <created>1649711302354</created>
-+      <option name="number" value="00031" />
-+      <option name="presentableId" value="LOCAL-00031" />
-+      <option name="project" value="LOCAL" />
-+      <updated>1649711302355</updated>
-+    </task>
-+    <option name="localTasksCounter" value="32" />
-     <servers />
-   </component>
-   <component name="TypeScriptGeneratedFilesManager">
-@@ -531,7 +523,8 @@
-     <MESSAGE value="Presenting results for NMF" />
-     <MESSAGE value="computing results" />
-     <MESSAGE value="computing results for sgd and correcting plots" />
--    <option name="LAST_COMMIT_MESSAGE" value="computing results for sgd and correcting plots" />
-+    <MESSAGE value="preparing main script" />
-+    <option name="LAST_COMMIT_MESSAGE" value="preparing main script" />
-   </component>
-   <component name="com.intellij.coverage.CoverageDataManagerImpl">
-     <SUITE FILE_PATH="coverage/main_py$splitting_manipulating_data.coverage" NAME="splitting_manipulating_data Coverage Results" MODIFIED="1648627073782" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/src" />
-Index: Report/auxil/report.log
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>This is pdfTeX, Version 3.141592653-2.6-1.40.24 (MiKTeX 22.1) (preloaded format=pdflatex 2022.3.10)  11 APR 2022 12:43\r\nentering extended mode\r\n restricted \\write18 enabled.\r\n file:line:error style messages enabled.\r\n %&-line parsing enabled.\r\n**./report.tex\r\n(report.tex\r\nLaTeX2e <2021-11-15> patch level 1\r\nL3 programming layer <2022-02-24>\r\n(D:\\Programy\\MikTeX\\tex/latex/amscls\\amsart.cls\r\nDocument Class: amsart 2020/05/29 v2.20.6\r\n\\linespacing=\\dimen138\r\n\\normalparindent=\\dimen139\r\n\\normaltopskip=\\skip47\r\n(D:\\Programy\\MikTeX\\tex/latex/amsmath\\amsmath.sty\r\nPackage: amsmath 2021/10/15 v2.17l AMS math features\r\n\\@mathmargin=\\skip48\r\n\r\nFor additional information on amsmath, use the `?' option.\r\n(D:\\Programy\\MikTeX\\tex/latex/amsmath\\amstext.sty\r\nPackage: amstext 2021/08/26 v2.01 AMS text\r\n\r\n(D:\\Programy\\MikTeX\\tex/latex/amsmath\\amsgen.sty\r\nFile: amsgen.sty 1999/11/30 v2.0 generic functions\r\n\\@emptytoks=\\toks16\r\n\\ex@=\\dimen140\r\n))\r\n(D:\\Programy\\MikTeX\\tex/latex/amsmath\\amsbsy.sty\r\nPackage: amsbsy 1999/11/29 v1.2d Bold Symbols\r\n\\pmbraise@=\\dimen141\r\n)\r\n(D:\\Programy\\MikTeX\\tex/latex/amsmath\\amsopn.sty\r\nPackage: amsopn 2021/08/26 v2.02 operator names\r\n)\r\n\\inf@bad=\\count185\r\nLaTeX Info: Redefining \\frac on input line 234.\r\n\\uproot@=\\count186\r\n\\leftroot@=\\count187\r\nLaTeX Info: Redefining \\overline on input line 399.\r\n\\classnum@=\\count188\r\n\\DOTSCASE@=\\count189\r\nLaTeX Info: Redefining \\ldots on input line 496.\r\nLaTeX Info: Redefining \\dots on input line 499.\r\nLaTeX Info: Redefining \\cdots on input line 620.\r\n\\Mathstrutbox@=\\box50\r\n\\strutbox@=\\box51\r\n\\big@size=\\dimen142\r\nLaTeX Font Info:    Redeclaring font encoding OML on input line 743.\r\nLaTeX Font Info:    Redeclaring font encoding OMS on input line 744.\r\n\\macc@depth=\\count190\r\n\\c@MaxMatrixCols=\\count191\r\n\\dotsspace@=\\muskip16\r\n\\c@parentequation=\\count192\r\n\\dspbrk@lvl=\\count193\r\n\\tag@help=\\toks17\r\n\\row@=\\count194\r\n\\column@=\\count195\r\n\\maxfields@=\\count196\r\n\\andhelp@=\\toks18\r\n\\eqnshift@=\\dimen143\r\n\\alignsep@=\\dimen144\r\n\\tagshift@=\\dimen145\r\n\\tagwidth@=\\dimen146\r\n\\totwidth@=\\dimen147\r\n\\lineht@=\\dimen148\r\n\\@envbody=\\toks19\r\n\\multlinegap=\\skip49\r\n\\multlinetaggap=\\skip50\r\n\\mathdisplay@stack=\\toks20\r\nLaTeX Info: Redefining \\[ on input line 2938.\r\nLaTeX Info: Redefining \\] on input line 2939.\r\n)\r\nLaTeX Font Info:    Trying to load font information for U+msa on input line 397\r\n.\r\n\r\n(D:\\Programy\\MikTeX\\tex/latex/amsfonts\\umsa.fd\r\nFile: umsa.fd 2013/01/14 v3.01 AMS symbols A\r\n)\r\n(D:\\Programy\\MikTeX\\tex/latex/amsfonts\\amsfonts.sty\r\nPackage: amsfonts 2013/01/14 v3.01 Basic AMSFonts support\r\n\\symAMSa=\\mathgroup4\r\n\\symAMSb=\\mathgroup5\r\nLaTeX Font Info:    Redeclaring math symbol \\hbar on input line 98.\r\nLaTeX Font Info:    Overwriting math alphabet `\\mathfrak' in version `bold'\r\n(Font)                  U/euf/m/n --> U/euf/b/n on input line 106.\r\n)\r\n\\copyins=\\insert199\r\n\\abstractbox=\\box52\r\n\\listisep=\\skip51\r\n\\c@part=\\count197\r\n\\c@section=\\count198\r\n\\c@subsection=\\count266\r\n\\c@subsubsection=\\count267\r\n\\c@paragraph=\\count268\r\n\\c@subparagraph=\\count269\r\n\\c@figure=\\count270\r\n\\c@table=\\count271\r\n\\abovecaptionskip=\\skip52\r\n\\belowcaptionskip=\\skip53\r\n\\captionindent=\\dimen149\r\n\\thm@style=\\toks21\r\n\\thm@bodyfont=\\toks22\r\n\\thm@headfont=\\toks23\r\n\\thm@notefont=\\toks24\r\n\\thm@headpunct=\\toks25\r\n\\thm@preskip=\\skip54\r\n\\thm@postskip=\\skip55\r\n\\thm@headsep=\\skip56\r\n\\dth@everypar=\\toks26\r\n)\r\n(D:\\Programy\\MikTeX\\tex/latex/float\\float.sty\r\nPackage: float 2001/11/08 v1.3d Float enhancements (AL)\r\n\\c@float@type=\\count272\r\n\\float@exts=\\toks27\r\n\\float@box=\\box53\r\n\\@float@everytoks=\\toks28\r\n\\@floatcapt=\\box54\r\n)\r\n(D:\\Programy\\MikTeX\\tex/latex/base\\fontenc.sty\r\nPackage: fontenc 2021/04/29 v2.0v Standard LaTeX package\r\n)\r\n(D:\\Programy\\MikTeX\\tex/latex/geometry\\geometry.sty\r\nPackage: geometry 2020/01/02 v5.9 Page Geometry\r\n\r\n(D:\\Programy\\MikTeX\\tex/latex/graphics\\keyval.sty\r\nPackage: keyval 2014/10/28 v1.15 key=value parser (DPC)\r\n\\KV@toks@=\\toks29\r\n)\r\n(D:\\Programy\\MikTeX\\tex/generic/iftex\\ifvtex.sty\r\nPackage: ifvtex 2019/10/25 v1.7 ifvtex legacy package. Use iftex instead.\r\n\r\n(D:\\Programy\\MikTeX\\tex/generic/iftex\\iftex.sty\r\nPackage: iftex 2022/02/03 v1.0f TeX engine tests\r\n))\r\n\\Gm@cnth=\\count273\r\n\\Gm@cntv=\\count274\r\n\\c@Gm@tempcnt=\\count275\r\n\\Gm@bindingoffset=\\dimen150\r\n\\Gm@wd@mp=\\dimen151\r\n\\Gm@odd@mp=\\dimen152\r\n\\Gm@even@mp=\\dimen153\r\n\\Gm@layoutwidth=\\dimen154\r\n\\Gm@layoutheight=\\dimen155\r\n\\Gm@layouthoffset=\\dimen156\r\n\\Gm@layoutvoffset=\\dimen157\r\n\\Gm@dimlist=\\toks30\r\n\r\n(D:\\Programy\\MikTeX\\tex/latex/geometry\\geometry.cfg))\r\n(D:\\Programy\\MikTeX\\tex/latex/parskip\\parskip.sty\r\nPackage: parskip 2021-03-14 v2.0h non-zero parskip adjustments\r\n\r\n(D:\\Programy\\MikTeX\\tex/latex/kvoptions\\kvoptions.sty\r\nPackage: kvoptions 2020-10-07 v3.14 Key value format for package options (HO)\r\n\r\n(D:\\Programy\\MikTeX\\tex/generic/ltxcmds\\ltxcmds.sty\r\nPackage: ltxcmds 2020-05-10 v1.25 LaTeX kernel commands for general use (HO)\r\n)\r\n(D:\\Programy\\MikTeX\\tex/generic/kvsetkeys\\kvsetkeys.sty\r\nPackage: kvsetkeys 2019/12/15 v1.18 Key value parser (HO)\r\n))\r\n(D:\\Programy\\MikTeX\\tex/latex/etoolbox\\etoolbox.sty\r\nPackage: etoolbox 2020/10/05 v2.5k e-TeX tools for LaTeX (JAW)\r\n\\etb@tempcnta=\\count276\r\n)\r\nCouldn't patch \\@starttoc\r\n) (D:\\Programy\\MikTeX\\tex/latex/amsfonts\\amssymb.sty\r\nPackage: amssymb 2013/01/14 v3.01 AMS font symbols\r\n)\r\n(D:\\Programy\\MikTeX\\tex/latex/titling\\titling.sty\r\nPackage: titling 2009/09/04 v2.1d maketitle typesetting\r\n\\thanksmarkwidth=\\skip57\r\n\\thanksmargin=\\skip58\r\n\\droptitle=\\skip59\r\n)\r\n(D:\\Programy\\MikTeX\\tex/latex/tools\\enumerate.sty\r\nPackage: enumerate 2015/07/23 v3.00 enumerate extensions (DPC)\r\n\\@enLab=\\toks31\r\n)\r\n(D:\\Programy\\MikTeX\\tex/latex/multirow\\multirow.sty\r\nPackage: multirow 2021/03/15 v2.8 Span multiple rows of a table\r\n\\multirow@colwidth=\\skip60\r\n\\multirow@cntb=\\count277\r\n\\multirow@dima=\\skip61\r\n\\bigstrutjot=\\dimen158\r\n)\r\n(D:\\Programy\\MikTeX\\tex/latex/graphics\\graphics.sty\r\nPackage: graphics 2021/03/04 v1.4d Standard LaTeX Graphics (DPC,SPQR)\r\n\r\n(D:\\Programy\\MikTeX\\tex/latex/graphics\\trig.sty\r\nPackage: trig 2021/08/11 v1.11 sin cos tan (DPC)\r\n)\r\n(D:\\Programy\\MikTeX\\tex/latex/graphics-cfg\\graphics.cfg\r\nFile: graphics.cfg 2016/06/04 v1.11 sample graphics configuration\r\n)\r\nPackage graphics Info: Driver file: pdftex.def on input line 107.\r\n\r\n(D:\\Programy\\MikTeX\\tex/latex/graphics-def\\pdftex.def\r\nFile: pdftex.def 2020/10/05 v1.2a Graphics/color driver for pdftex\r\n))\r\n(D:\\Programy\\MikTeX\\tex/latex/graphics\\graphicx.sty\r\nPackage: graphicx 2021/09/16 v1.2d Enhanced LaTeX Graphics (DPC,SPQR)\r\n\\Gin@req@height=\\dimen159\r\n\\Gin@req@width=\\dimen160\r\n)\r\n(D:\\Programy\\MikTeX\\tex/latex/caption\\caption.sty\r\nPackage: caption 2022/02/28 v3.6a Customizing captions (AR)\r\n\r\n(D:\\Programy\\MikTeX\\tex/latex/caption\\caption3.sty\r\nPackage: caption3 2022/02/28 v2.3a caption3 kernel (AR)\r\n\\caption@tempdima=\\dimen161\r\n\\captionmargin=\\dimen162\r\n\\caption@leftmargin=\\dimen163\r\n\\caption@rightmargin=\\dimen164\r\n\\caption@width=\\dimen165\r\n\\caption@indent=\\dimen166\r\n\\caption@parindent=\\dimen167\r\n\\caption@hangindent=\\dimen168\r\nPackage caption Info: AMS or SMF document class detected.\r\n\r\n(D:\\Programy\\MikTeX\\tex/latex/caption\\caption-ams-smf.sto\r\nFile: caption-ams-smf.sto 2020/08/22 v2.0 Adaption of the caption package to th\r\ne AMS and SMF document classes (AR)\r\n))\r\n\\c@caption@flags=\\count278\r\n\\c@continuedfloat=\\count279\r\nPackage caption Info: float package is loaded.\r\n)\r\n(D:\\Programy\\MikTeX\\tex/latex/tools\\array.sty\r\nPackage: array 2021/10/04 v2.5f Tabular extension package (FMi)\r\n\\col@sep=\\dimen169\r\n\\ar@mcellbox=\\box55\r\n\\extrarowheight=\\dimen170\r\n\\NC@list=\\toks32\r\n\\extratabsurround=\\skip62\r\n\\backup@length=\\skip63\r\n\\ar@cellbox=\\box56\r\n)\r\n(D:\\Programy\\MikTeX\\tex/latex/xcolor\\xcolor.sty\r\nPackage: xcolor 2021/10/31 v2.13 LaTeX color extensions (UK)\r\n\r\n(D:\\Programy\\MikTeX\\tex/latex/graphics-cfg\\color.cfg\r\nFile: color.cfg 2016/01/02 v1.6 sample color configuration\r\n)\r\nPackage xcolor Info: Driver file: pdftex.def on input line 227.\r\nPackage xcolor Info: Model `cmy' substituted by `cmy0' on input line 1352.\r\nPackage xcolor Info: Model `hsb' substituted by `rgb' on input line 1356.\r\nPackage xcolor Info: Model `RGB' extended on input line 1368.\r\nPackage xcolor Info: Model `HTML' substituted by `rgb' on input line 1370.\r\nPackage xcolor Info: Model `Hsb' substituted by `hsb' on input line 1371.\r\nPackage xcolor Info: Model `tHsb' substituted by `hsb' on input line 1372.\r\nPackage xcolor Info: Model `HSB' substituted by `hsb' on input line 1373.\r\nPackage xcolor Info: Model `Gray' substituted by `gray' on input line 1374.\r\nPackage xcolor Info: Model `wave' substituted by `hsb' on input line 1375.\r\n)\r\n(D:\\Programy\\MikTeX\\tex/latex/caption\\subcaption.sty\r\nPackage: subcaption 2022/01/07 v1.5 Sub-captions (AR)\r\n\\c@subfigure=\\count280\r\n\\c@subtable=\\count281\r\n)\r\n(D:\\Programy\\MikTeX\\tex/latex/l3backend\\l3backend-pdftex.def\r\nFile: l3backend-pdftex.def 2022-02-07 L3 backend support: PDF output (pdfTeX)\r\n\\l__color_backend_stack_int=\\count282\r\n\\l__pdf_internal_box=\\box57\r\n)\r\n(D:/Studia\\MoCaDR_proj1\\Report\\out\\report.aux\r\n\r\nLaTeX Warning: Label `fig:figure' multiply defined.\r\n\r\n\r\nLaTeX Warning: Label `fig:figure' multiply defined.\r\n\r\n\r\nLaTeX Warning: Label `fig:figure' multiply defined.\r\n\r\n\r\nLaTeX Warning: Label `fig:figure' multiply defined.\r\n\r\n)\r\n\\openout1 = `report.aux'.\r\n\r\nLaTeX Font Info:    Checking defaults for OML/cmm/m/it on input line 44.\r\nLaTeX Font Info:    ... okay on input line 44.\r\nLaTeX Font Info:    Checking defaults for OMS/cmsy/m/n on input line 44.\r\nLaTeX Font Info:    ... okay on input line 44.\r\nLaTeX Font Info:    Checking defaults for OT1/cmr/m/n on input line 44.\r\nLaTeX Font Info:    ... okay on input line 44.\r\nLaTeX Font Info:    Checking defaults for T1/cmr/m/n on input line 44.\r\nLaTeX Font Info:    ... okay on input line 44.\r\nLaTeX Font Info:    Checking defaults for TS1/cmr/m/n on input line 44.\r\nLaTeX Font Info:    ... okay on input line 44.\r\nLaTeX Font Info:    Checking defaults for OMX/cmex/m/n on input line 44.\r\nLaTeX Font Info:    ... okay on input line 44.\r\nLaTeX Font Info:    Checking defaults for U/cmr/m/n on input line 44.\r\nLaTeX Font Info:    ... okay on input line 44.\r\nLaTeX Font Info:    Trying to load font information for U+msa on input line 44.\r\n\r\n (D:\\Programy\\MikTeX\\tex/latex/amsfonts\\umsa.fd\r\nFile: umsa.fd 2013/01/14 v3.01 AMS symbols A\r\n)\r\nLaTeX Font Info:    Trying to load font information for U+msb on input line 44.\r\n\r\n\r\n(D:\\Programy\\MikTeX\\tex/latex/amsfonts\\umsb.fd\r\nFile: umsb.fd 2013/01/14 v3.01 AMS symbols B\r\n)\r\n*geometry* driver: auto-detecting\r\n*geometry* detected driver: pdftex\r\n*geometry* verbose mode - [ preamble ] result:\r\n* driver: pdftex\r\n* paper: <default>\r\n* layout: <same size as paper>\r\n* layoutoffset:(h,v)=(0.0pt,0.0pt)\r\n* modes: twoside \r\n* h-part:(L,W,R)=(73.71613pt, 430.00462pt, 110.57425pt)\r\n* v-part:(T,H,B)=(95.39737pt, 556.47656pt, 143.09605pt)\r\n* \\paperwidth=614.295pt\r\n* \\paperheight=794.96999pt\r\n* \\textwidth=430.00462pt\r\n* \\textheight=556.47656pt\r\n* \\oddsidemargin=1.44614pt\r\n* \\evensidemargin=38.30426pt\r\n* \\topmargin=1.12738pt\r\n* \\headheight=8.0pt\r\n* \\headsep=14.0pt\r\n* \\topskip=10.0pt\r\n* \\footskip=12.0pt\r\n* \\marginparwidth=90.0pt\r\n* \\marginparsep=11.0pt\r\n* \\columnsep=10.0pt\r\n* \\skip\\footins=7.0pt plus 11.0pt\r\n* \\hoffset=0.0pt\r\n* \\voffset=0.0pt\r\n* \\mag=1000\r\n* \\@twocolumnfalse\r\n* \\@twosidetrue\r\n* \\@mparswitchtrue\r\n* \\@reversemarginfalse\r\n* (1in=72.27pt=25.4mm, 1cm=28.453pt)\r\n\r\n(D:\\Programy\\MikTeX\\tex/context/base/mkii\\supp-pdf.mkii\r\n[Loading MPS to PDF converter (version 2006.09.02).]\r\n\\scratchcounter=\\count283\r\n\\scratchdimen=\\dimen171\r\n\\scratchbox=\\box58\r\n\\nofMPsegments=\\count284\r\n\\nofMParguments=\\count285\r\n\\everyMPshowfont=\\toks33\r\n\\MPscratchCnt=\\count286\r\n\\MPscratchDim=\\dimen172\r\n\\MPnumerator=\\count287\r\n\\makeMPintoPDFobject=\\count288\r\n\\everyMPtoPDFconversion=\\toks34\r\n) (D:\\Programy\\MikTeX\\tex/latex/epstopdf-pkg\\epstopdf-base.sty\r\nPackage: epstopdf-base 2020-01-24 v2.11 Base part for package epstopdf\r\nPackage epstopdf-base Info: Redefining graphics rule for `.eps' on input line 4\r\n85.\r\n\r\n(D:\\Programy\\MikTeX\\tex/latex/00miktex\\epstopdf-sys.cfg\r\nFile: epstopdf-sys.cfg 2021/03/18 v2.0 Configuration of epstopdf for MiKTeX\r\n))\r\nPackage caption Info: Begin \\AtBeginDocument code.\r\nPackage caption Info: End \\AtBeginDocument code.\r\n\r\n\r\nLaTeX Warning: No \\author given.\r\n\r\n[1{C:/Users/dmika/AppData/Local/MiKTeX/fonts/map/pdftex/pdftex.map}]\r\nLaTeX Font Info:    Trying to load font information for T1+cmss on input line 1\r\n17.\r\n\r\n(D:\\Programy\\MikTeX\\tex/latex/base\\t1cmss.fd\r\nFile: t1cmss.fd 2019/12/16 v2.5j Standard LaTeX font definitions\r\n) [2]\r\n<./fig//svd1_1.png, id=26, 575.9919pt x 335.3328pt>\r\nFile: ./fig//svd1_1.png Graphic file (type png)\r\n<use ./fig//svd1_1.png>\r\nPackage pdftex.def Info: ./fig//svd1_1.png  used on input line 191.\r\n(pdftex.def)             Requested size: 247.67168pt x 144.19028pt.\r\n\r\nOverfull \\hbox (32.66937pt too wide) in paragraph at lines 191--194\r\n [][] \r\n []\r\n\r\n<./fig//svd1_2.png, id=28, 423.5022pt x 335.3328pt>\r\nFile: ./fig//svd1_2.png Graphic file (type png)\r\n<use ./fig//svd1_2.png>\r\nPackage pdftex.def Info: ./fig//svd1_2.png  used on input line 197.\r\n(pdftex.def)             Requested size: 182.10239pt x 144.19028pt.\r\n[3 <./fig//svd1_1.png> <./fig//svd1_2.png>]\r\n<fig/svd1_r_w.png, id=34, 1084.05pt x 722.7pt>\r\nFile: fig/svd1_r_w.png Graphic file (type png)\r\n<use fig/svd1_r_w.png>\r\nPackage pdftex.def Info: fig/svd1_r_w.png  used on input line 231.\r\n(pdftex.def)             Requested size: 487.818pt x 325.21199pt.\r\n\r\nOverfull \\hbox (57.81337pt too wide) in paragraph at lines 231--233\r\n [][] \r\n []\r\n\r\nreport.tex:238: Undefined control sequence.\r\nl.238 \\toprule\r\n              \r\nThe control sequence at the end of the top line\r\nof your error message was never \\def'ed. If you have\r\nmisspelled it (e.g., `\\hobx'), type `I' and the correct\r\nspelling (e.g., `I\\hbox'). Otherwise just continue,\r\nand I'll forget about whatever was undefined.\r\n\r\nreport.tex:240: Undefined control sequence.\r\n<recently read> \\midrule \r\n                         \r\nl.240 \\midrule\r\n              \r\nThe control sequence at the end of the top line\r\nof your error message was never \\def'ed. If you have\r\nmisspelled it (e.g., `\\hobx'), type `I' and the correct\r\nspelling (e.g., `I\\hbox'). Otherwise just continue,\r\nand I'll forget about whatever was undefined.\r\n\r\nreport.tex:247: Undefined control sequence.\r\n<recently read> \\bottomrule \r\n                            \r\nl.247 \\bottomrule\r\n                 \r\nThe control sequence at the end of the top line\r\nof your error message was never \\def'ed. If you have\r\nmisspelled it (e.g., `\\hobx'), type `I' and the correct\r\nspelling (e.g., `I\\hbox'). Otherwise just continue,\r\nand I'll forget about whatever was undefined.\r\n\r\n[4 <./fig/svd1_r_w.png>]\r\n<./fig//svd2_1.png, id=39, 575.9919pt x 335.3328pt>\r\nFile: ./fig//svd2_1.png Graphic file (type png)\r\n<use ./fig//svd2_1.png>\r\nPackage pdftex.def Info: ./fig//svd2_1.png  used on input line 277.\r\n(pdftex.def)             Requested size: 247.67168pt x 144.19028pt.\r\n\r\nOverfull \\hbox (32.66937pt too wide) in paragraph at lines 277--280\r\n [][] \r\n []\r\n\r\n<./fig//svd2_2.png, id=40, 423.5022pt x 335.3328pt>\r\nFile: ./fig//svd2_2.png Graphic file (type png)\r\n<use ./fig//svd2_2.png>\r\nPackage pdftex.def Info: ./fig//svd2_2.png  used on input line 283.\r\n(pdftex.def)             Requested size: 182.10239pt x 144.19028pt.\r\n<./fig//svd2_r_w.png, id=41, 1084.05pt x 722.7pt>\r\nFile: ./fig//svd2_r_w.png Graphic file (type png)\r\n<use ./fig//svd2_r_w.png>\r\nPackage pdftex.def Info: ./fig//svd2_r_w.png  used on input line 299.\r\n(pdftex.def)             Requested size: 487.818pt x 325.21199pt.\r\n\r\nOverfull \\hbox (57.81337pt too wide) in paragraph at lines 299--300\r\n [][] \r\n []\r\n\r\n[5 <./fig//svd2_1.png> <./fig//svd2_2.png>]\r\nreport.tex:304: Undefined control sequence.\r\nl.304 \\toprule\r\n              \r\nThe control sequence at the end of the top line\r\nof your error message was never \\def'ed. If you have\r\nmisspelled it (e.g., `\\hobx'), type `I' and the correct\r\nspelling (e.g., `I\\hbox'). Otherwise just continue,\r\nand I'll forget about whatever was undefined.\r\n\r\nreport.tex:306: Undefined control sequence.\r\n<recently read> \\midrule \r\n                         \r\nl.306 \\midrule\r\n              \r\nThe control sequence at the end of the top line\r\nof your error message was never \\def'ed. If you have\r\nmisspelled it (e.g., `\\hobx'), type `I' and the correct\r\nspelling (e.g., `I\\hbox'). Otherwise just continue,\r\nand I'll forget about whatever was undefined.\r\n\r\nreport.tex:313: Undefined control sequence.\r\n<recently read> \\bottomrule \r\n                            \r\nl.313 \\bottomrule\r\n                 \r\nThe control sequence at the end of the top line\r\nof your error message was never \\def'ed. If you have\r\nmisspelled it (e.g., `\\hobx'), type `I' and the correct\r\nspelling (e.g., `I\\hbox'). Otherwise just continue,\r\nand I'll forget about whatever was undefined.\r\n\r\n<./fig//nmf_1.png, id=47, 575.9919pt x 335.3328pt>\r\nFile: ./fig//nmf_1.png Graphic file (type png)\r\n<use ./fig//nmf_1.png>\r\nPackage pdftex.def Info: ./fig//nmf_1.png  used on input line 326.\r\n(pdftex.def)             Requested size: 247.67168pt x 144.19028pt.\r\n\r\nOverfull \\hbox (32.66937pt too wide) in paragraph at lines 326--329\r\n [][] \r\n []\r\n\r\n<./fig//nmf_2.png, id=48, 423.5022pt x 335.3328pt>\r\nFile: ./fig//nmf_2.png Graphic file (type png)\r\n<use ./fig//nmf_2.png>\r\nPackage pdftex.def Info: ./fig//nmf_2.png  used on input line 332.\r\n(pdftex.def)             Requested size: 182.10239pt x 144.19028pt.\r\n\r\nUnderfull \\vbox (badness 4341) has occurred while \\output is active []\r\n\r\n [6 <./fig//svd2_r_w.png>]\r\nreport.tex:353: Undefined control sequence.\r\nl.353 \\toprule\r\n              \r\nThe control sequence at the end of the top line\r\nof your error message was never \\def'ed. If you have\r\nmisspelled it (e.g., `\\hobx'), type `I' and the correct\r\nspelling (e.g., `I\\hbox'). Otherwise just continue,\r\nand I'll forget about whatever was undefined.\r\n\r\nreport.tex:355: Undefined control sequence.\r\n<recently read> \\midrule \r\n                         \r\nl.355 \\midrule\r\n              \r\nThe control sequence at the end of the top line\r\nof your error message was never \\def'ed. If you have\r\nmisspelled it (e.g., `\\hobx'), type `I' and the correct\r\nspelling (e.g., `I\\hbox'). Otherwise just continue,\r\nand I'll forget about whatever was undefined.\r\n\r\nreport.tex:362: Undefined control sequence.\r\n<recently read> \\bottomrule \r\n                            \r\nl.362 \\bottomrule\r\n                 \r\nThe control sequence at the end of the top line\r\nof your error message was never \\def'ed. If you have\r\nmisspelled it (e.g., `\\hobx'), type `I' and the correct\r\nspelling (e.g., `I\\hbox'). Otherwise just continue,\r\nand I'll forget about whatever was undefined.\r\n\r\n<./fig//nmf_r_w.png, id=53, 1084.05pt x 722.7pt>\r\nFile: ./fig//nmf_r_w.png Graphic file (type png)\r\n<use ./fig//nmf_r_w.png>\r\nPackage pdftex.def Info: ./fig//nmf_r_w.png  used on input line 372.\r\n(pdftex.def)             Requested size: 487.818pt x 325.21199pt.\r\n\r\nOverfull \\hbox (57.81337pt too wide) in paragraph at lines 372--373\r\n [][] \r\n []\r\n\r\n\r\nUnderfull \\vbox (badness 1838) has occurred while \\output is active []\r\n\r\n [7 <./fig//nmf_1.png> <./fig//nmf_2.png>]\r\nFile: ./fig//svd1_1.png Graphic file (type png)\r\n<use ./fig//svd1_1.png>\r\nPackage pdftex.def Info: ./fig//svd1_1.png  used on input line 386.\r\n(pdftex.def)             Requested size: 247.67168pt x 144.19028pt.\r\n\r\nOverfull \\hbox (32.66937pt too wide) in paragraph at lines 386--389\r\n [][] \r\n []\r\n\r\nFile: ./fig//svd1_2.png Graphic file (type png)\r\n<use ./fig//svd1_2.png>\r\nPackage pdftex.def Info: ./fig//svd1_2.png  used on input line 392.\r\n(pdftex.def)             Requested size: 182.10239pt x 144.19028pt.\r\n[8 <./fig//nmf_r_w.png>] [9] (D:/Studia\\MoCaDR_proj1\\Report\\out\\report.aux)\r\n\r\nLaTeX Warning: There were multiply-defined labels.\r\n\r\n ) \r\nHere is how much of TeX's memory you used:\r\n 6911 strings out of 478582\r\n 105770 string characters out of 2856538\r\n 404528 words of memory out of 3000000\r\n 24834 multiletter control sequences out of 15000+600000\r\n 489460 words of font info for 82 fonts, out of 8000000 for 9000\r\n 1302 hyphenation exceptions out of 8191\r\n 69i,10n,76p,585b,301s stack positions out of 5000i,500n,10000p,200000b,80000s\r\n <C:\\Users\\dmika\\AppData\\Local\\MiKTeX\\fonts/pk/ljfour/jknappen/ec/dpi600\\ecss\r\n1095.pk> <C:\\Users\\dmika\\AppData\\Local\\MiKTeX\\fonts/pk/ljfour/jknappen/ec/dpi60\r\n0\\ecrm0800.pk> <C:\\Users\\dmika\\AppData\\Local\\MiKTeX\\fonts/pk/ljfour/jknappen/ec\r\n/dpi600\\ecti1095.pk> <C:\\Users\\dmika\\AppData\\Local\\MiKTeX\\fonts/pk/ljfour/jknap\r\npen/ec/dpi600\\ecbx1095.pk> <C:\\Users\\dmika\\AppData\\Local\\MiKTeX\\fonts/pk/ljfour\r\n/jknappen/ec/dpi600\\eccc1095.pk> <C:\\Users\\dmika\\AppData\\Local\\MiKTeX\\fonts/pk/\r\nljfour/jknappen/ec/dpi600\\ecrm1095.pk> <C:\\Users\\dmika\\AppData\\Local\\MiKTeX\\fon\r\nts/pk/ljfour/jknappen/ec/dpi600\\ecrm1200.pk> <C:\\Users\\dmika\\AppData\\Local\\MiKT\r\neX\\fonts/pk/ljfour/jknappen/ec/dpi600\\ecrm1728.pk><D:/Programy/MikTeX/fonts/typ\r\ne1/public/amsfonts/cm/cmex10.pfb><D:/Programy/MikTeX/fonts/type1/public/amsfont\r\ns/cm/cmmi10.pfb><D:/Programy/MikTeX/fonts/type1/public/amsfonts/cm/cmmi8.pfb><D\r\n:/Programy/MikTeX/fonts/type1/public/amsfonts/cm/cmmib10.pfb><D:/Programy/MikTe\r\nX/fonts/type1/public/amsfonts/cm/cmr10.pfb><D:/Programy/MikTeX/fonts/type1/publ\r\nic/amsfonts/cm/cmr6.pfb><D:/Programy/MikTeX/fonts/type1/public/amsfonts/cm/cmr8\r\n.pfb><D:/Programy/MikTeX/fonts/type1/public/amsfonts/cm/cmsy10.pfb><D:/Programy\r\n/MikTeX/fonts/type1/public/amsfonts/cm/cmsy6.pfb><D:/Programy/MikTeX/fonts/type\r\n1/public/amsfonts/cm/cmsy8.pfb>\r\nOutput written on D:/Studia\\MoCaDR_proj1\\Report\\out\\report.pdf (9 pages, 624165\r\n bytes).\r\nPDF statistics:\r\n 332 PDF objects out of 1000 (max. 8388607)\r\n 0 named destinations out of 1000 (max. 500000)\r\n 46 words of extra memory for PDF output out of 10000 (max. 10000000)\r\n\r\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/Report/auxil/report.log b/Report/auxil/report.log
---- a/Report/auxil/report.log	(revision 68fcad456ec86d517548ebd17fadc1a0a7b9b657)
-+++ b/Report/auxil/report.log	(date 1649747316718)
-@@ -1,4 +1,4 @@
--This is pdfTeX, Version 3.141592653-2.6-1.40.24 (MiKTeX 22.1) (preloaded format=pdflatex 2022.3.10)  11 APR 2022 12:43
-+This is pdfTeX, Version 3.141592653-2.6-1.40.24 (MiKTeX 22.1) (preloaded format=pdflatex 2022.3.10)  12 APR 2022 09:08
- entering extended mode
-  restricted \write18 enabled.
-  file:line:error style messages enabled.
-@@ -365,217 +365,104 @@
- LaTeX Warning: No \author given.
- 
- [1{C:/Users/dmika/AppData/Local/MiKTeX/fonts/map/pdftex/pdftex.map}]
-+Overfull \hbox (19.25575pt too wide) in paragraph at lines 113--114
-+[]\T1/cmr/m/n/10.95 let $[] \OT1/cmr/m/n/10.95 := \OML/cmm/m/it/10.95 w[] \OMS/
-+cmsy/m/n/10.95   \OML/cmm/m/it/10.95  \OMS/cmsy/m/n/10.95  []$ \T1/cmr/m/n/10
-+.95 and $[] \OT1/cmr/m/n/10.95 := \OML/cmm/m/it/10.95 h[] \OMS/cmsy/m/n/10.95  
-+ \OML/cmm/m/it/10.95  \OMS/cmsy/m/n/10.95  []$\T1/cmr/m/n/10.95 , 
-+ []
-+
- LaTeX Font Info:    Trying to load font information for T1+cmss on input line 1
--17.
--
-+27.
- (D:\Programy\MikTeX\tex/latex/base\t1cmss.fd
- File: t1cmss.fd 2019/12/16 v2.5j Standard LaTeX font definitions
--) [2]
--<./fig//svd1_1.png, id=26, 575.9919pt x 335.3328pt>
-+) [2] [3]
-+<./fig//svd1_1.png, id=29, 575.9919pt x 335.3328pt>
- File: ./fig//svd1_1.png Graphic file (type png)
- <use ./fig//svd1_1.png>
--Package pdftex.def Info: ./fig//svd1_1.png  used on input line 191.
--(pdftex.def)             Requested size: 247.67168pt x 144.19028pt.
--
--Overfull \hbox (32.66937pt too wide) in paragraph at lines 191--194
-- [][] 
-- []
--
--<./fig//svd1_2.png, id=28, 423.5022pt x 335.3328pt>
-+Package pdftex.def Info: ./fig//svd1_1.png  used on input line 216.
-+(pdftex.def)             Requested size: 270.905pt x 157.719pt.
-+<./fig//svd1_2.png, id=31, 423.5022pt x 335.3328pt>
- File: ./fig//svd1_2.png Graphic file (type png)
- <use ./fig//svd1_2.png>
--Package pdftex.def Info: ./fig//svd1_2.png  used on input line 197.
--(pdftex.def)             Requested size: 182.10239pt x 144.19028pt.
--[3 <./fig//svd1_1.png> <./fig//svd1_2.png>]
--<fig/svd1_r_w.png, id=34, 1084.05pt x 722.7pt>
--File: fig/svd1_r_w.png Graphic file (type png)
--<use fig/svd1_r_w.png>
--Package pdftex.def Info: fig/svd1_r_w.png  used on input line 231.
--(pdftex.def)             Requested size: 487.818pt x 325.21199pt.
-+Package pdftex.def Info: ./fig//svd1_2.png  used on input line 222.
-+(pdftex.def)             Requested size: 171.99922pt x 136.18767pt.
- 
--Overfull \hbox (57.81337pt too wide) in paragraph at lines 231--233
-- [][] 
-+Overfull \hbox (12.8996pt too wide) in paragraph at lines 214--226
-+ []$[]$$[]$ 
-  []
- 
--report.tex:238: Undefined control sequence.
--l.238 \toprule
--              
--The control sequence at the end of the top line
--of your error message was never \def'ed. If you have
--misspelled it (e.g., `\hobx'), type `I' and the correct
--spelling (e.g., `I\hbox'). Otherwise just continue,
--and I'll forget about whatever was undefined.
--
--report.tex:240: Undefined control sequence.
--<recently read> \midrule 
--                         
--l.240 \midrule
--              
--The control sequence at the end of the top line
--of your error message was never \def'ed. If you have
--misspelled it (e.g., `\hobx'), type `I' and the correct
--spelling (e.g., `I\hbox'). Otherwise just continue,
--and I'll forget about whatever was undefined.
--
--report.tex:247: Undefined control sequence.
--<recently read> \bottomrule 
--                            
--l.247 \bottomrule
--                 
--The control sequence at the end of the top line
--of your error message was never \def'ed. If you have
--misspelled it (e.g., `\hobx'), type `I' and the correct
--spelling (e.g., `I\hbox'). Otherwise just continue,
--and I'll forget about whatever was undefined.
--
--[4 <./fig/svd1_r_w.png>]
--<./fig//svd2_1.png, id=39, 575.9919pt x 335.3328pt>
-+[4 <./fig//svd1_1.png> <./fig//svd1_2.png>]
-+<fig/svd1_r_w2.png, id=37, 481.8pt x 382.42876pt>
-+File: fig/svd1_r_w2.png Graphic file (type png)
-+<use fig/svd1_r_w2.png>
-+Package pdftex.def Info: fig/svd1_r_w2.png  used on input line 268.
-+(pdftex.def)             Requested size: 289.08221pt x 229.45901pt.
-+ [5 <./fig/svd1_r_w2.png>]
-+<./fig//svd2_stop2.png, id=42, 487.06969pt x 382.42876pt>
-+File: ./fig//svd2_stop2.png Graphic file (type png)
-+<use ./fig//svd2_stop2.png>
-+Package pdftex.def Info: ./fig//svd2_stop2.png  used on input line 312.
-+(pdftex.def)             Requested size: 267.88914pt x 210.33646pt.
-+<./fig//svd2_1.png, id=43, 575.9919pt x 335.3328pt>
- File: ./fig//svd2_1.png Graphic file (type png)
- <use ./fig//svd2_1.png>
--Package pdftex.def Info: ./fig//svd2_1.png  used on input line 277.
--(pdftex.def)             Requested size: 247.67168pt x 144.19028pt.
--
--Overfull \hbox (32.66937pt too wide) in paragraph at lines 277--280
-- [][] 
-- []
--
--<./fig//svd2_2.png, id=40, 423.5022pt x 335.3328pt>
-+Package pdftex.def Info: ./fig//svd2_1.png  used on input line 323.
-+(pdftex.def)             Requested size: 270.905pt x 157.719pt.
-+<./fig//svd2_2.png, id=44, 423.5022pt x 335.3328pt>
- File: ./fig//svd2_2.png Graphic file (type png)
- <use ./fig//svd2_2.png>
--Package pdftex.def Info: ./fig//svd2_2.png  used on input line 283.
--(pdftex.def)             Requested size: 182.10239pt x 144.19028pt.
--<./fig//svd2_r_w.png, id=41, 1084.05pt x 722.7pt>
--File: ./fig//svd2_r_w.png Graphic file (type png)
--<use ./fig//svd2_r_w.png>
--Package pdftex.def Info: ./fig//svd2_r_w.png  used on input line 299.
--(pdftex.def)             Requested size: 487.818pt x 325.21199pt.
-+Package pdftex.def Info: ./fig//svd2_2.png  used on input line 329.
-+(pdftex.def)             Requested size: 171.99922pt x 136.18767pt.
- 
--Overfull \hbox (57.81337pt too wide) in paragraph at lines 299--300
-- [][] 
-+Overfull \hbox (12.8996pt too wide) in paragraph at lines 321--333
-+ []$[]$$[]$ 
-  []
- 
--[5 <./fig//svd2_1.png> <./fig//svd2_2.png>]
--report.tex:304: Undefined control sequence.
--l.304 \toprule
--              
--The control sequence at the end of the top line
--of your error message was never \def'ed. If you have
--misspelled it (e.g., `\hobx'), type `I' and the correct
--spelling (e.g., `I\hbox'). Otherwise just continue,
--and I'll forget about whatever was undefined.
--
--report.tex:306: Undefined control sequence.
--<recently read> \midrule 
--                         
--l.306 \midrule
--              
--The control sequence at the end of the top line
--of your error message was never \def'ed. If you have
--misspelled it (e.g., `\hobx'), type `I' and the correct
--spelling (e.g., `I\hbox'). Otherwise just continue,
--and I'll forget about whatever was undefined.
-+[6 <./fig//svd2_stop2.png>]
-+<./fig//svd2_r_w2.png, id=49, 488.57532pt x 381.67593pt>
-+File: ./fig//svd2_r_w2.png Graphic file (type png)
-+<use ./fig//svd2_r_w2.png>
-+Package pdftex.def Info: ./fig//svd2_r_w2.png  used on input line 358.
-+(pdftex.def)             Requested size: 293.14745pt x 229.00732pt.
- 
--report.tex:313: Undefined control sequence.
--<recently read> \bottomrule 
--                            
--l.313 \bottomrule
--                 
--The control sequence at the end of the top line
--of your error message was never \def'ed. If you have
--misspelled it (e.g., `\hobx'), type `I' and the correct
--spelling (e.g., `I\hbox'). Otherwise just continue,
--and I'll forget about whatever was undefined.
-+Underfull \vbox (badness 2884) has occurred while \output is active []
- 
--<./fig//nmf_1.png, id=47, 575.9919pt x 335.3328pt>
-+ [7 <./fig//svd2_1.png> <./fig//svd2_2.png>] [8 <./fig//svd2_r_w2.png>]
-+<./fig//nmf_1.png, id=60, 575.9919pt x 335.3328pt>
- File: ./fig//nmf_1.png Graphic file (type png)
- <use ./fig//nmf_1.png>
--Package pdftex.def Info: ./fig//nmf_1.png  used on input line 326.
--(pdftex.def)             Requested size: 247.67168pt x 144.19028pt.
--
--Overfull \hbox (32.66937pt too wide) in paragraph at lines 326--329
-- [][] 
-- []
--
--<./fig//nmf_2.png, id=48, 423.5022pt x 335.3328pt>
-+Package pdftex.def Info: ./fig//nmf_1.png  used on input line 396.
-+(pdftex.def)             Requested size: 270.905pt x 157.719pt.
-+<./fig//nmf_2.png, id=61, 423.5022pt x 335.3328pt>
- File: ./fig//nmf_2.png Graphic file (type png)
- <use ./fig//nmf_2.png>
--Package pdftex.def Info: ./fig//nmf_2.png  used on input line 332.
--(pdftex.def)             Requested size: 182.10239pt x 144.19028pt.
-+Package pdftex.def Info: ./fig//nmf_2.png  used on input line 402.
-+(pdftex.def)             Requested size: 171.99922pt x 136.18767pt.
- 
--Underfull \vbox (badness 4341) has occurred while \output is active []
--
-- [6 <./fig//svd2_r_w.png>]
--report.tex:353: Undefined control sequence.
--l.353 \toprule
--              
--The control sequence at the end of the top line
--of your error message was never \def'ed. If you have
--misspelled it (e.g., `\hobx'), type `I' and the correct
--spelling (e.g., `I\hbox'). Otherwise just continue,
--and I'll forget about whatever was undefined.
--
--report.tex:355: Undefined control sequence.
--<recently read> \midrule 
--                         
--l.355 \midrule
--              
--The control sequence at the end of the top line
--of your error message was never \def'ed. If you have
--misspelled it (e.g., `\hobx'), type `I' and the correct
--spelling (e.g., `I\hbox'). Otherwise just continue,
--and I'll forget about whatever was undefined.
--
--report.tex:362: Undefined control sequence.
--<recently read> \bottomrule 
--                            
--l.362 \bottomrule
--                 
--The control sequence at the end of the top line
--of your error message was never \def'ed. If you have
--misspelled it (e.g., `\hobx'), type `I' and the correct
--spelling (e.g., `I\hbox'). Otherwise just continue,
--and I'll forget about whatever was undefined.
--
--<./fig//nmf_r_w.png, id=53, 1084.05pt x 722.7pt>
--File: ./fig//nmf_r_w.png Graphic file (type png)
--<use ./fig//nmf_r_w.png>
--Package pdftex.def Info: ./fig//nmf_r_w.png  used on input line 372.
--(pdftex.def)             Requested size: 487.818pt x 325.21199pt.
--
--Overfull \hbox (57.81337pt too wide) in paragraph at lines 372--373
-- [][] 
-+Overfull \hbox (12.8996pt too wide) in paragraph at lines 394--406
-+ []$[]$$[]$ 
-  []
- 
--
--Underfull \vbox (badness 1838) has occurred while \output is active []
--
-- [7 <./fig//nmf_1.png> <./fig//nmf_2.png>]
--File: ./fig//svd1_1.png Graphic file (type png)
--<use ./fig//svd1_1.png>
--Package pdftex.def Info: ./fig//svd1_1.png  used on input line 386.
--(pdftex.def)             Requested size: 247.67168pt x 144.19028pt.
--
--Overfull \hbox (32.66937pt too wide) in paragraph at lines 386--389
-- [][] 
-- []
--
--File: ./fig//svd1_2.png Graphic file (type png)
--<use ./fig//svd1_2.png>
--Package pdftex.def Info: ./fig//svd1_2.png  used on input line 392.
--(pdftex.def)             Requested size: 182.10239pt x 144.19028pt.
--[8 <./fig//nmf_r_w.png>] [9] (D:/Studia\MoCaDR_proj1\Report\out\report.aux)
-+<./fig//nmf_r_w2.png, id=62, 485.56406pt x 379.4175pt>
-+File: ./fig//nmf_r_w2.png Graphic file (type png)
-+<use ./fig//nmf_r_w2.png>
-+Package pdftex.def Info: ./fig//nmf_r_w2.png  used on input line 432.
-+(pdftex.def)             Requested size: 291.34068pt x 227.65225pt.
-+[9 <./fig//nmf_1.png> <./fig//nmf_2.png>] [10 <./fig//nmf_r_w2.png>] [11]
-+(D:/Studia\MoCaDR_proj1\Report\out\report.aux)
- 
- LaTeX Warning: There were multiply-defined labels.
- 
-  ) 
- Here is how much of TeX's memory you used:
-- 6911 strings out of 478582
-- 105770 string characters out of 2856538
-- 404528 words of memory out of 3000000
-- 24834 multiletter control sequences out of 15000+600000
-+ 6923 strings out of 478582
-+ 106112 string characters out of 2856538
-+ 406528 words of memory out of 3000000
-+ 24846 multiletter control sequences out of 15000+600000
-  489460 words of font info for 82 fonts, out of 8000000 for 9000
-  1302 hyphenation exceptions out of 8191
-- 69i,10n,76p,585b,301s stack positions out of 5000i,500n,10000p,200000b,80000s
-+ 69i,10n,76p,585b,340s stack positions out of 5000i,500n,10000p,200000b,80000s
-  <C:\Users\dmika\AppData\Local\MiKTeX\fonts/pk/ljfour/jknappen/ec/dpi600\ecss
- 1095.pk> <C:\Users\dmika\AppData\Local\MiKTeX\fonts/pk/ljfour/jknappen/ec/dpi60
- 0\ecrm0800.pk> <C:\Users\dmika\AppData\Local\MiKTeX\fonts/pk/ljfour/jknappen/ec
-@@ -593,10 +480,10 @@
- .pfb><D:/Programy/MikTeX/fonts/type1/public/amsfonts/cm/cmsy10.pfb><D:/Programy
- /MikTeX/fonts/type1/public/amsfonts/cm/cmsy6.pfb><D:/Programy/MikTeX/fonts/type
- 1/public/amsfonts/cm/cmsy8.pfb>
--Output written on D:/Studia\MoCaDR_proj1\Report\out\report.pdf (9 pages, 624165
-- bytes).
-+Output written on D:/Studia\MoCaDR_proj1\Report\out\report.pdf (11 pages, 66902
-+2 bytes).
- PDF statistics:
-- 332 PDF objects out of 1000 (max. 8388607)
-+ 367 PDF objects out of 1000 (max. 8388607)
-  0 named destinations out of 1000 (max. 500000)
-- 46 words of extra memory for PDF output out of 10000 (max. 10000000)
-+ 51 words of extra memory for PDF output out of 10000 (max. 10000000)
- 
-Index: Report/auxil/report.aux
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>\\relax \r\n\\@writefile{toc}{\\contentsline {section}{\\tocsection {}{1}{Introduction}}{1}{}\\protected@file@percent }\r\n\\@writefile{toc}{\\contentsline {subsection}{\\tocsubsection {}{}{Statement of the problem}}{1}{}\\protected@file@percent }\r\n\\@writefile{toc}{\\contentsline {subsection}{\\tocsubsection {}{}{Description of methods}}{1}{}\\protected@file@percent }\r\n\\@writefile{toc}{\\contentsline {subsubsection}{\\tocsubsubsection {}{}{SVD1}}{1}{}\\protected@file@percent }\r\n\\@writefile{toc}{\\contentsline {subsubsection}{\\tocsubsubsection {}{}{SVD2}}{1}{}\\protected@file@percent }\r\n\\@writefile{toc}{\\contentsline {subsubsection}{\\tocsubsubsection {}{}{NMF}}{1}{}\\protected@file@percent }\r\n\\@writefile{toc}{\\contentsline {subsubsection}{\\tocsubsubsection {}{}{SGD}}{2}{}\\protected@file@percent }\r\n\\@writefile{toc}{\\contentsline {section}{\\tocsection {}{2}{Implementation}}{2}{}\\protected@file@percent }\r\n\\@writefile{toc}{\\contentsline {subsection}{\\tocsubsection {}{}{Description of the data}}{2}{}\\protected@file@percent }\r\n\\@writefile{toc}{\\contentsline {subsection}{\\tocsubsection {}{}{Performing methods}}{2}{}\\protected@file@percent }\r\n\\@writefile{toc}{\\contentsline {subsection}{\\tocsubsection {}{}{Quality of the system}}{2}{}\\protected@file@percent }\r\n\\@writefile{toc}{\\contentsline {subsection}{\\tocsubsection {}{}{Imputing the missing data}}{3}{}\\protected@file@percent }\r\n\\@writefile{toc}{\\contentsline {section}{\\tocsection {}{3}{Parameters tuning and results}}{3}{}\\protected@file@percent }\r\n\\@writefile{toc}{\\contentsline {subsection}{\\tocsubsection {}{}{SVD1}}{3}{}\\protected@file@percent }\r\n\\providecommand*\\caption@xref[2]{\\@setref\\relax\\@undefined{#1}}\r\n\\newlabel{fig:figure}{{\\caption@xref {fig:figure}{ on input line 232}}{4}}\r\n\\@writefile{toc}{\\contentsline {subsection}{\\tocsubsection {}{}{SVD2}}{5}{}\\protected@file@percent }\r\n\\@writefile{toc}{\\contentsline {subsection}{\\tocsubsection {}{}{NMF}}{6}{}\\protected@file@percent }\r\n\\newlabel{tocindent-1}{0pt}\r\n\\newlabel{tocindent0}{15.98535pt}\r\n\\newlabel{tocindent1}{19.35791pt}\r\n\\newlabel{tocindent2}{0pt}\r\n\\newlabel{tocindent3}{0pt}\r\n\\@writefile{toc}{\\contentsline {subsection}{\\tocsubsection {}{}{SGD}}{8}{}\\protected@file@percent }\r\n\\@writefile{toc}{\\contentsline {section}{\\tocsection {}{4}{}}{9}{}\\protected@file@percent }\r\n\\@writefile{toc}{\\contentsline {section}{\\tocsection {}{5}{Conclusions}}{9}{}\\protected@file@percent }\r\n\\gdef \\@abspage@last{9}\r\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/Report/auxil/report.aux b/Report/auxil/report.aux
---- a/Report/auxil/report.aux	(revision 68fcad456ec86d517548ebd17fadc1a0a7b9b657)
-+++ b/Report/auxil/report.aux	(date 1649747316551)
-@@ -9,20 +9,40 @@
- \@writefile{toc}{\contentsline {section}{\tocsection {}{2}{Implementation}}{2}{}\protected@file@percent }
- \@writefile{toc}{\contentsline {subsection}{\tocsubsection {}{}{Description of the data}}{2}{}\protected@file@percent }
- \@writefile{toc}{\contentsline {subsection}{\tocsubsection {}{}{Performing methods}}{2}{}\protected@file@percent }
--\@writefile{toc}{\contentsline {subsection}{\tocsubsection {}{}{Quality of the system}}{2}{}\protected@file@percent }
-+\@writefile{toc}{\contentsline {subsection}{\tocsubsection {}{}{Quality of the system}}{3}{}\protected@file@percent }
- \@writefile{toc}{\contentsline {subsection}{\tocsubsection {}{}{Imputing the missing data}}{3}{}\protected@file@percent }
- \@writefile{toc}{\contentsline {section}{\tocsection {}{3}{Parameters tuning and results}}{3}{}\protected@file@percent }
- \@writefile{toc}{\contentsline {subsection}{\tocsubsection {}{}{SVD1}}{3}{}\protected@file@percent }
-+\@writefile{toc}{\contentsline {subsubsection}{\tocsubsubsection {}{}{Optimizing $r$}}{3}{}\protected@file@percent }
-+\@writefile{lof}{\contentsline {figure}{\numberline {1}{\ignorespaces RMSE of SVD1 for basic imputation methods and $r = 1, \dots  , 100$\relax }}{4}{}\protected@file@percent }
-+\@writefile{lot}{\contentsline {table}{\numberline {1}{\ignorespaces The lowest RMSE and optimal $r$ for SVD1 with basic imputation methods\relax }}{4}{}\protected@file@percent }
-+\@writefile{toc}{\contentsline {subsubsection}{\tocsubsubsection {}{}{Optimizing $\alpha $}}{5}{}\protected@file@percent }
- \providecommand*\caption@xref[2]{\@setref\relax\@undefined{#1}}
--\newlabel{fig:figure}{{\caption@xref {fig:figure}{ on input line 232}}{4}}
--\@writefile{toc}{\contentsline {subsection}{\tocsubsection {}{}{SVD2}}{5}{}\protected@file@percent }
--\@writefile{toc}{\contentsline {subsection}{\tocsubsection {}{}{NMF}}{6}{}\protected@file@percent }
-+\newlabel{fig:figure}{{\caption@xref {fig:figure}{ on input line 269}}{5}}
-+\@writefile{lof}{\contentsline {figure}{\numberline {2}{\ignorespaces RMSE of SVD1 for weigthed imputation method for different $\alpha $ and $r$\relax }}{5}{}\protected@file@percent }
-+\@writefile{lot}{\contentsline {table}{\numberline {2}{\ignorespaces 5 lowest RMSE of SVD1 for weigthed imputation method and ($\alpha $, $r$) that gave them\relax }}{5}{}\protected@file@percent }
-+\@writefile{toc}{\contentsline {subsection}{\tocsubsection {}{}{SVD2}}{6}{}\protected@file@percent }
-+\@writefile{lof}{\contentsline {figure}{\numberline {3}{\ignorespaces {\leavevmode {\color  {magenta}tutaj}}\relax }}{6}{}\protected@file@percent }
-+\@writefile{toc}{\contentsline {subsubsection}{\tocsubsubsection {}{}{Stop condition}}{6}{}\protected@file@percent }
-+\@writefile{toc}{\contentsline {subsubsection}{\tocsubsubsection {}{}{Optimizing $r$}}{6}{}\protected@file@percent }
-+\@writefile{lof}{\contentsline {figure}{\numberline {4}{\ignorespaces RMSE of SVD2 for basic imputation methods and $r = 1, \dots  , 100$\relax }}{7}{}\protected@file@percent }
-+\@writefile{lot}{\contentsline {table}{\numberline {3}{\ignorespaces The lowest RMSE and optimal $r$ for SVD2 with basic imputation methods\relax }}{7}{}\protected@file@percent }
-+\@writefile{toc}{\contentsline {subsubsection}{\tocsubsubsection {}{}{Optimizing $\alpha $}}{7}{}\protected@file@percent }
-+\@writefile{lof}{\contentsline {figure}{\numberline {5}{\ignorespaces RMSE of SVD2 for weigthed imputation method for different $\alpha $ and $r$\relax }}{8}{}\protected@file@percent }
-+\@writefile{lot}{\contentsline {table}{\numberline {4}{\ignorespaces 5 lowest RMSE of SVD2 for weigthed imputation method and ($\alpha $, $r$) that gave them\relax }}{8}{}\protected@file@percent }
-+\@writefile{toc}{\contentsline {subsection}{\tocsubsection {}{}{NMF}}{9}{}\protected@file@percent }
-+\@writefile{toc}{\contentsline {subsubsection}{\tocsubsubsection {}{}{Optimizing $r$}}{9}{}\protected@file@percent }
-+\@writefile{lof}{\contentsline {figure}{\numberline {6}{\ignorespaces RMSE of NMF for basic imputation methods and $r = 1, \dots  , 100$\relax }}{9}{}\protected@file@percent }
-+\@writefile{lot}{\contentsline {table}{\numberline {5}{\ignorespaces The lowest RMSE and optimal $r$ for NMF with basic imputation methods\relax }}{9}{}\protected@file@percent }
-+\@writefile{toc}{\contentsline {subsubsection}{\tocsubsubsection {}{}{Optimizing $\alpha $}}{10}{}\protected@file@percent }
-+\@writefile{lof}{\contentsline {figure}{\numberline {7}{\ignorespaces RMSE of NMF for weigthed imputation method for different $\alpha $ and $r$\relax }}{10}{}\protected@file@percent }
-+\@writefile{lot}{\contentsline {table}{\numberline {6}{\ignorespaces 5 lowest RMSE of NMF for weigthed imputation method and ($\alpha $, $r$) that gave them\relax }}{10}{}\protected@file@percent }
- \newlabel{tocindent-1}{0pt}
- \newlabel{tocindent0}{15.98535pt}
- \newlabel{tocindent1}{19.35791pt}
- \newlabel{tocindent2}{0pt}
- \newlabel{tocindent3}{0pt}
--\@writefile{toc}{\contentsline {subsection}{\tocsubsection {}{}{SGD}}{8}{}\protected@file@percent }
--\@writefile{toc}{\contentsline {section}{\tocsection {}{4}{}}{9}{}\protected@file@percent }
--\@writefile{toc}{\contentsline {section}{\tocsection {}{5}{Conclusions}}{9}{}\protected@file@percent }
--\gdef \@abspage@last{9}
-+\@writefile{toc}{\contentsline {subsection}{\tocsubsection {}{}{SGD}}{11}{}\protected@file@percent }
-+\@writefile{toc}{\contentsline {section}{\tocsection {}{4}{}}{11}{}\protected@file@percent }
-+\@writefile{toc}{\contentsline {section}{\tocsection {}{5}{Results}}{11}{}\protected@file@percent }
-+\gdef \@abspage@last{11}
Index: .idea/shelf/Uncommitted_changes_before_Update_at_11_04_2022_17_08__Changes_.xml
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_11_04_2022_17_08__Changes_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_11_04_2022_17_08__Changes_.xml
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_11_04_2022_17_08__Changes_.xml	
+++ /dev/null	
@@ -1,14 +0,0 @@
-<changelist name="Uncommitted_changes_before_Update_at_11_04_2022_17_08_[Changes]" date="1649689716890" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_11_04_2022_17_08_[Changes]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Update at 11.04.2022 17:08 [Changes]" />
-  <binary>
-    <option name="BEFORE_PATH" value="Report/out/report.synctex.gz" />
-    <option name="AFTER_PATH" value="Report/out/report.synctex.gz" />
-    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_11_04_2022_17_08_[Changes]/report.synctex.gz" />
-  </binary>
-  <binary>
-    <option name="BEFORE_PATH" value="Report/out/report.pdf" />
-    <option name="AFTER_PATH" value="Report/out/report.pdf" />
-    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_11_04_2022_17_08_[Changes]/report.pdf" />
-  </binary>
-</changelist>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_12_04_2022_10_56__Changes_.xml
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_12_04_2022_10_56__Changes_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_12_04_2022_10_56__Changes_.xml
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_12_04_2022_10_56__Changes_.xml	
+++ /dev/null	
@@ -1,4 +0,0 @@
-<changelist name="Uncommitted_changes_before_Update_at_12_04_2022_10_56_[Changes]" date="1649753780996" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_12_04_2022_10_56_[Changes]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Update at 12.04.2022 10:56 [Changes]" />
-</changelist>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_09_04_2022_08_52__Changes_.xml
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_09_04_2022_08_52__Changes_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_09_04_2022_08_52__Changes_.xml
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_09_04_2022_08_52__Changes_.xml	
+++ /dev/null	
@@ -1,4 +0,0 @@
-<changelist name="Uncommitted_changes_before_Update_at_09_04_2022_08_52_[Changes]" date="1649487164942" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_09_04_2022_08_52_[Changes]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Update at 09.04.2022 08:52 [Changes]" />
-</changelist>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_10_04_2022_17_19_[Changes]/shelved.patch
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_10_04_2022_17_19_[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_10_04_2022_17_19_[Changes]/shelved.patch
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_10_04_2022_17_19_[Changes]/shelved.patch	
+++ /dev/null	
@@ -1,1222 +0,0 @@
-Index: Report/report.tex
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>%! Author = Miszka and Tamarka\r\n%! Date = 10.03.2022\r\n\r\n% Preamble\r\n\\documentclass[11pt]{amsart}\r\n\r\n% Packages\r\n\\usepackage{float}\r\n\\usepackage[T1]{fontenc}\r\n\\usepackage{geometry}\r\n\\usepackage{parskip}\r\n\\usepackage{amsmath}\r\n\\usepackage{amsfonts}\r\n\\usepackage{amsthm}\r\n\\usepackage{amssymb}\r\n\\usepackage{titling}\r\n%\\usepackage{itemize}\r\n\\usepackage{enumerate}\r\n\\usepackage{multirow}\r\n\\usepackage{graphics}\r\n\\usepackage{graphicx}\r\n\\usepackage{caption}\r\n\\usepackage{array}\r\n\\usepackage{xcolor}\r\n\\usepackage{subcaption}\r\n\r\n\r\n\\graphicspath{ {./fig/} }\r\n\r\n\r\n%\\setlength{\\droptitle}{-2cm}\r\n%\\newgeometry{tmargin=1.9cm, bmargin=1.9cm, lmargin=1.7cm, rmargin=1.7cm}\r\n\r\n\\DeclareMathOperator*{\\argmin}{arg\\,min}\r\n\r\n\\newcommand{\\tami}[1]{{\\textcolor{magenta}{#1}}}\r\n\\newcommand{\\domi}[1]{{\\textcolor{green}{#1}}}\r\n\r\n\\author{Tamara Frączek, Dominik Mika}\r\n\\title{Methods of classification and dimensionality reduction - Report 1}\r\n\\date{\\today}\r\n\r\n% Document\r\n\\begin{document}\r\n\\maketitle\r\n\r\n\r\n\\section{Introduction}\r\n\r\n\\subsection*{Statement of the problem}\r\n\r\nIn this task we have to create a movie recommender system for our users.\r\n\\domi{We have users who rated some movies}.\r\nOf course, not every user rated every movie and it is our task to fill those gaps.\r\nSo if one user hasn't seen one movie, we want to predict how he would like it.\r\n\r\n\r\n\r\n%some movies and some information about how our users rate our movies.\r\n%Since, of course, not every user rated every movie, we want to predict how they would like the movies from our list.\r\n\r\n%We have the data containing information how users rate some movies.\r\n%Our task is to create a recommender system, so having only some data we want to predict all ratings.\r\n\r\nFor this purpose we build few algorithms using different methods of predicting.\r\n%These methods are described in ...\r\nOf course different methods will give us different results (errors).\r\nOur task is to tune parameters of those methods and try to get the best possible ratings prediction.\r\n\r\n\r\n\r\n\\subsection*{Description of methods}\r\n\r\nIn this problem, we use different methods which are subset of PCA methods. They are often used for dimensionality reduction and matrix factorization.\r\n\r\n\\subsubsection*{SVD1}\r\n\r\nThis method gets a $n \\times d$ dimensional matrix $Z$ and approximate it by a different matrix $\\tilde{Z}$.\r\nSince we want somehow $\\tilde{Z}$ to maintain only ''the most important'' information from $Z$, then the rank of $\\tilde{Z}$ is to be much smaller than rank of $Z$.\r\nPrecisely, we want to find matrix $\\tilde{Z}_r$ of rank $r$ ($r < rank(Z)$ and $r$ is a parameter), so that $\\|Z - \\tilde{Z}_r\\|$ is small.\r\n\r\nUsing SVD decomposition $Z = U \\Lambda^{\\frac{1}{2}} V^T$ we construct $\\tilde{Z}$ as\r\n\\[\\tilde{Z}_r = U_r \\Lambda_r^{\\frac{1}{2}}V_r^T,\\]\r\nwhere $\\Lambda_r$ contains $r$ biggest eigenvalues of $Z$ and $U_r$, $V_r$ contains only columns corresponding to those eigenvalues.\r\n\r\n\\subsubsection*{SVD2}\r\n\r\nIt is an iterative method.\r\nWe perform SVD1 on matrix $Z$, then on the result of first SVD1 and so on.\r\nThe algorithm can be stopped after a fixed number of iterations or some stop condition can be established.\r\n\r\n\r\n\\subsubsection*{NMF}\r\n\r\nSimilarly as in SVD1 the method obtain a $n \\times d$ dimensional matrix $Z$ and approximate it by $\\tilde{Z}$.\r\nThis time $\\tilde{Z}$ is constructed as $\\tilde{Z}_r = W_r H_r $, where $W_r$ and $H_r$ are matrices with non-negative elements ($W_r$ has $r$ columns and $H_r$ has $r$ rows).\r\nPrecisely, we look for such $W_r$ and $H_r$ that $\\|Z - W_r H_r \\|^2$ is the smallest, where $\\|A\\|^2 = \\sum_{i, j} A_{ij}^2$.\r\n\r\n\\subsubsection*{SGD}\r\n\r\nThis method, similarly as previous ones want to estimate matrix $Z$ with a product of matrices\r\n$W$ and $H$, but not necessarily obtaining the whole matrix $Z$.\r\n\r\nLet's assume that we have only some values of $z_{ij}$ and let call those pairs $(i,j)$ where we know the value of $Z$ as $I$.\r\nWe look for\r\n$$\\argmin_{W, H} \\sum_{(i,j)\\in I} (z_{ij} - w_i^T h_j)^2 + \\lambda(\\|w_i^T\\|^2 + \\|h_j\\|^2),$$\r\nwhere $h_j$ is $j$-th column of $h$, $w_i^T$ is $i$-th row of $W$ and $\\lambda > 0$ is a parameter.\r\nSo roughly speaking we look for $W$ and $H$ such that $Z \\approx WH$ for elements known in $Z$, but also we want $W$ and $H$ to have quite small values (it gives us the part of sum with parameter $\\lambda$).\r\n\r\n\\tami{opis metody...}\r\n\r\n\\section{Implementation}\r\n\r\n\\subsection*{Description of the data}\r\n\r\nOur data contains information 100837 ratings - exactly 610 users rated 9724 movies.\r\nThe columns are: \\textsf{userId} (integer), \\textsf{movieId} (integer) and \\textsf{rating} (integer), where \\textsf{userId} is a unique user id and \\textsf{movieId} is a unique movie id.\r\n\r\n\r\nWe keep this data in two-dimensional matrix of size $n \\times d$ where $n$ is the number of users and $d$ is the number of movies.\r\nIn element $(i,j)$ we put the rate of the user $i$ of the movie $j$.\r\nIf the user $i$ haven't rated the movie $j$ we leave the element empty.\r\n\r\n\r\n\\subsection*{Performing methods}\r\n\r\n\\tami{??tutaj jakaś intuicja po co dzielić dane??}\r\n\r\nSo to be able to evaluate the quality of the programs we split our data to two parts: train set and test set.\r\nThe train set is used to build the programs.\r\nAnd the test set is used to evaluate how our programs work.\r\n\r\n\r\nTo give our programs enough information about every user we split the data so that the train set contain 90\\% of ratings of each user (and the test set the remaining ones).\r\n\\tami{tutaj coś o tym, że będziemy to powtarzać??}\r\n\r\nLet call the matrix containing the data from the train set as $\\boldsymbol{Z}$ and the matrix containing the data from the test set as $\\boldsymbol{T}$.\r\n\r\n\r\n\\subsection*{Quality of the system}\r\n\r\nAssume that our algorithm return a matrix $\\boldsymbol{Z}^{'}$.\r\nThen the quality of our programs is computed as \\textbf{root-mean square error}\r\n\\[\\textsf{RMSE} =\r\n\\sqrt{\\frac{1}{|\\mathcal{T}|} \\sum_{(u,m) \\in \\mathcal{T}} \\left(\\boldsymbol{Z}^{'}[u,m] - \\boldsymbol{T}[u,m] \\right)^2}\\]\r\nwhere $\\mathcal{T}$ contains pairs $(u,m)$ from test set.\r\n\r\n\r\n\\subsection*{Imputing the missing data}\r\n\r\nSince three of our methods (SVD1, SVD2 and NMF) are given a full matrix $\\boldsymbol{Z}$ then they need the missing data to be imputed before performing.\r\n\r\nWe decided to impute the data in 4 different ways:\r\n\\begin{itemize}\r\n    \\item putting 0 everywhere,\r\n    \\item putting global mean everywhere,\r\n    \\item putting row mean,\r\n    \\item putting weighted row and column mean ($\\alpha \\cdot \\text{\\textsf{col\\_mean}} + (1-\\alpha) \\cdot \\text{\\textsf{row\\_mean}}$, where $\\alpha$ is a parameter).\r\n\\end{itemize}\r\n\r\n\\tami{tutaj przemyślenia na temat tego czemu niektóre metody działają lepiej i dlaczego}\r\n\r\n\\section{Parameters tuning and results}\r\n\r\n\\tami{coś o tym, że metody pozostawiaja trochę dowolności?}\r\n\r\nBefore performing our methods and obtaining results we have to set some parameters.\r\n\r\nFirst of all, all the methods need a parameter $r$, which is the rank of matrices in $Z$ decomposition.\r\nSGD needs also learning rate and $\\lambda$.\r\nAnd iteration methods need maximum of possible iterations or a stop condition.\r\n\r\nWhat's more, for all of our methods we want to choose optimal $\\alpha$ in the last method of imputing data.\r\n\r\n\r\n\r\n\\subsection*{SVD1}\r\n\r\n\\tami{co tu napisać}\r\n\r\n\\tami{napisać co to jest to weighted}\r\n\r\nAt the beginning we consider only \\tami{...}\r\n\r\nBelow, we present a graph showing dependence of RMSE on $r$.\r\n\r\n\\begin{figure}[H]\r\n\\centering\r\n\\begin{minipage}{.5\\textwidth}\r\n  \\centering\r\n  \\includegraphics[scale=0.43]{svd1_1}\r\n%  \\captionof{figure}{A figure}\r\n%  \\label{fig:test1}\r\n\\end{minipage}%\r\n\\begin{minipage}{.5\\textwidth}\r\n  \\centering\r\n  \\includegraphics[scale=0.43]{svd1_2}\r\n%  \\captionof{figure}{Another figure}\r\n%  \\label{fig:test2}\r\n\\end{minipage}\r\n\\end{figure}\r\n\r\nAlso we present a table with the lowest RMSE for every imputation method and the parameter $r$ that gave it.\r\n\\begin{table}[H]\r\n\\begin{tabular}{c|ccccc}\r\n& 0 & column means & global mean & weighted means & row means \\\\\r\n\\hline\r\n$r$ & 7 & 13 & 15 & 9 & 6 \\\\\r\nRMSE & 2.866 & 0.946 & 0.987 & 0.877 & 0.904 \\\\\r\n\\end{tabular}\r\n\\end{table}\r\n%wnioski, że ma wpływ jak uzupełniamy\r\n%jakieś wnioski, te zera beznadziejne\r\n%że weighted wypadają najlepiej i chcemy to alfa dobrać optymalnie\r\n\r\nFirst of all, we observe that as we expected the imputation method does matter.\r\nIt is most clearly seen looking at RMSE of data filled with zeros, that for the best $r$ is around $2.9$.\r\nOther methods also differ a lot.\r\nThe lowest RMSE obtain the data filled with weighted data.\r\nThat's why we may suspect that optimizing $\\alpha$ can give even better results.\r\n\r\n%wprowadzenie, że dobieramy alfa\r\n%no i ten rysunek wyżej nam pozwala obciąć r\r\n%że robimy minimalizację po dwóch parametrach\r\n\r\nTo get optimal result we perform optimization with respect to two parameters: $\\alpha$ and $r$.\r\nAs we can see on the picture above only $r$ between $0$ and $50$ give some reasonable results, so we consider only those (we could use all $r$, but it is time consuming).\r\nBelow, we present graph showing dependence of RMSE on $\\alpha$ and $r$ for data \\tami{...}\r\n\r\n\\begin{figure}[H]\r\n\\includegraphics[scale=0.45]{fig/svd1_r_w}\r\n\\label{fig:figure}\r\n\\end{figure}\r\n\r\nBelow we present also table with \\tami{...} lowest RMSE and pairs $(\\alpha, r)$ that gave those.\r\n\\begin{table}[H]\r\n\\begin{tabular}{cc|c}\r\n\\toprule\r\n $\\alpha$ &  $r$ &     RMSE \\\\\r\n\\midrule\r\n\\hline\r\n       0.39 & 10 & 0.873987 \\\\\r\n       0.38 & 10 & 0.874244 \\\\\r\n       0.42 & 10 & 0.874274 \\\\\r\n       0.36 & 10 & 0.874449 \\\\\r\n       0.39 & 11 & 0.874469 \\\\\r\n\\bottomrule\r\n\\end{tabular}\r\n\\end{table}\r\n\r\nAs we can see 10 seems to be the best $r$ and 0.39 seems to be the best $\\alpha$.\r\nAlso in all those results $(\\alpha, r)$ are close to them.\r\n\\tami{So $\\alpha = 0.39$ and $r = 10$ are parameters that we use to perform this method further in the report.}\r\n\r\nSince in columns we keep indexes of movies, it means that our filled data take a bit more information from user ratings mean than from the movie ratings mean.\r\nThat is probably logical \\tami{...}\r\n\r\nTo conclude this subsection we present our best results obtained using these methods.\r\n\\tami{which means what}\r\n\r\n\\tami{tabelka z najlepszymi wynikami}\r\n\r\n\r\n\\subsection*{SVD2}\r\nIn this case we want to proceed as in SVD1 case.\r\n\r\n\\tami{??In SVD2 we make a correction -- czy to tu}\r\n\r\nstop condition\r\n\r\n\r\n\r\n\\begin{figure}[H]\r\n\\centering\r\n\\begin{minipage}{.5\\textwidth}\r\n  \\centering\r\n  \\includegraphics[scale=0.43]{svd2_1}\r\n%  \\captionof{figure}{A figure}\r\n%  \\label{fig:test1}\r\n\\end{minipage}%\r\n\\begin{minipage}{.5\\textwidth}\r\n  \\centering\r\n  \\includegraphics[scale=0.43]{svd2_2}\r\n%  \\captionof{figure}{Another figure}\r\n%  \\label{fig:test2}\r\n\\end{minipage}\r\n\\end{figure}\r\n\r\n\\begin{table}[H]\r\n\\begin{tabular}{c|ccccc}\r\n& 0 & column means & global mean & weighted means & row means \\\\\r\n\\hline\r\n$r$ & 19 & 10 & 6 & 13 & 7 \\\\\r\nRMSE & 2.779 & 0.942 & 0.942 & 0.875 & 0.878 \\\\\r\n\\end{tabular}\r\n\\end{table}\r\n\r\n\\begin{figure}[H]\r\n\\includegraphics[scale = 0.45]{svd2_r_w}\r\n\\end{figure}\r\n\r\n\\begin{table}[H]\r\n\\begin{tabular}{rrr}\r\n\\toprule\r\n$\\alpha$ &  $r$ &     RMSE \\\\\r\n\\midrule\r\n\\hline\r\n       0.25 &  8 & 0.867393 \\\\\r\n       0.26 &  8 & 0.867397 \\\\\r\n       0.24 &  8 & 0.867402 \\\\\r\n       0.27 &  8 & 0.867410 \\\\\r\n       0.28 &  8 & 0.867494 \\\\\r\n\\bottomrule\r\n\\end{tabular}\r\n\\end{table}\r\n\r\n\\subsection*{NMF}\r\n\r\nIn this case since we have only $r$ and $\\alpha$ to find, we proceed in exactly the same way as in the case of SVD.\r\nSo, firstly we present a graph showing dependence of RMSE on $r$. \\tami{in some cases...}\r\n\r\n\\begin{figure}[H]\r\n\\centering\r\n\\begin{minipage}{.5\\textwidth}\r\n  \\centering\r\n  \\includegraphics[scale=0.43]{nmf_1}\r\n%  \\captionof{figure}{A figure}\r\n%  \\label{fig:test1}\r\n\\end{minipage}%\r\n\\begin{minipage}{.5\\textwidth}\r\n  \\centering\r\n  \\includegraphics[scale=0.43]{nmf_2}\r\n%  \\captionof{figure}{Another figure}\r\n%  \\label{fig:test2}\r\n\\end{minipage}\r\n\\end{figure}\r\n\r\nComparing this graph to the graph for SVD we can see that \\tami{tutaj o tym, że jest bardziej takie postrzępione}\r\n\r\nBelow we also present a table with the lowest RMSE for every imputation method and the parameter $r$ that gave it.\r\n\r\n\\begin{table}[H]\r\n\\begin{tabular}{c|ccccc}\r\n& 0 & column means & global mean & weighted means & row means \\\\\r\n\\hline\r\n$r$ & 6 & 47 & 30 & 37 & 15\\\\\r\nRMSE & 2.900 & 0.946 & 0.987 & 0.877 & 0.905 \\\\\r\n\\end{tabular}\r\n\\end{table}\r\n\r\n\\begin{table}[H]\r\n\\begin{tabular}{cc|c}\r\n\\toprule\r\n$\\alpha$ &  $r$ &     RMSE \\\\\r\n\\midrule\r\n\\hline\r\n       0.40 & 37 & 0.874794 \\\\\r\n       0.41 & 37 & 0.874817 \\\\\r\n       0.39 & 18 & 0.874841 \\\\\r\n       0.39 & 37 & 0.874848 \\\\\r\n       0.40 & 18 & 0.874849 \\\\\r\n\\bottomrule\r\n\\end{tabular}\r\n\\end{table}\r\n\r\nAs we can see the parameters $r$ are in general bigger than in previous cases.\r\n\\tami{czy będą bardziej porostrzelane}\r\n\r\nNow we pefrorm the optimization with respect to $\\alpha$ and $r$ and present a graph showing the results.\r\n\r\n\\begin{figure}[H]\r\n\\includegraphics[scale = 0.45]{nmf_r_w}\r\n\\end{figure}\r\n\r\n\\tami{tabelka z najlepszymi r i alpha}\r\n\\tami{jakie r i alpha wybieramy}\r\n\r\n\\tami{tabelka z najlepszymi wynikami}\r\n\r\n\\subsection*{SGD}\r\n\r\n\\begin{figure}[H]\r\n\\centering\r\n\\begin{minipage}{.5\\textwidth}\r\n  \\centering\r\n  \\includegraphics[scale=0.43]{svd1_1}\r\n%  \\captionof{figure}{A figure}\r\n%  \\label{fig:test1}\r\n\\end{minipage}%\r\n\\begin{minipage}{.5\\textwidth}\r\n  \\centering\r\n  \\includegraphics[scale=0.43]{svd1_2}\r\n%  \\captionof{figure}{Another figure}\r\n%  \\label{fig:test2}\r\n\\end{minipage}\r\n\\end{figure}\r\n\r\n\r\n\r\n\\section{}\r\n\r\n\\section{Conclusions}\r\n\r\n\r\n\r\n\\end{document}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/Report/report.tex b/Report/report.tex
---- a/Report/report.tex	(revision 4150129e7bd8166c8f9a24bbfc6601436329d089)
-+++ b/Report/report.tex	(date 1649603930465)
-@@ -103,7 +103,7 @@
- 
- Let's assume that we have only some values of $z_{ij}$ and let call those pairs $(i,j)$ where we know the value of $Z$ as $I$.
- We look for
--$$\argmin_{W, H} \sum_{(i,j)\in I} (z_{ij} - w_i^T h_j)^2 + \lambda(\|w_i^T\|^2 + \|h_j\|^2),$$
-+\[\argmin_{W, H} \sum_{(i,j)\in I} (z_{ij} - w_i^T h_j)^2 + \lambda(\|w_i^T\|^2 + \|h_j\|^2),\]
- where $h_j$ is $j$-th column of $h$, $w_i^T$ is $i$-th row of $W$ and $\lambda > 0$ is a parameter.
- So roughly speaking we look for $W$ and $H$ such that $Z \approx WH$ for elements known in $Z$, but also we want $W$ and $H$ to have quite small values (it gives us the part of sum with parameter $\lambda$).
- 
-@@ -136,6 +136,7 @@
- 
- Let call the matrix containing the data from the train set as $\boldsymbol{Z}$ and the matrix containing the data from the test set as $\boldsymbol{T}$.
- 
-+\tami{??In SVD2 we make a correction -- czy to tu}
- 
- \subsection*{Quality of the system}
- 
-@@ -150,39 +151,53 @@
- 
- Since three of our methods (SVD1, SVD2 and NMF) are given a full matrix $\boldsymbol{Z}$ then they need the missing data to be imputed before performing.
- 
--We decided to impute the data in 4 different ways:
-+We decided to impute the data in 5 different ways:
- \begin{itemize}
-     \item putting 0 everywhere,
-     \item putting global mean everywhere,
--    \item putting row mean,
--    \item putting weighted row and column mean ($\alpha \cdot \text{\textsf{col\_mean}} + (1-\alpha) \cdot \text{\textsf{row\_mean}}$, where $\alpha$ is a parameter).
-+    \item putting column means,
-+    \item putting row means,
-+    \item putting weighted row and column mean ($\alpha \cdot \text{\textsf{col\_mean}} + (1-\alpha) \cdot \text{\textsf{row\_mean}}$, where $\alpha>0$ is a parameter).
- \end{itemize}
- 
-+We may expect that the closer to reality we impute the missing data, the better results we will obtain.
- \tami{tutaj przemyślenia na temat tego czemu niektóre metody działają lepiej i dlaczego}
- 
-+
-+
-+
-+
-+
- \section{Parameters tuning and results}
- 
--\tami{coś o tym, że metody pozostawiaja trochę dowolności?}
--
- Before performing our methods and obtaining results we have to set some parameters.
- 
- First of all, all the methods need a parameter $r$, which is the rank of matrices in $Z$ decomposition.
- SGD needs also learning rate and $\lambda$.
- And iteration methods need maximum of possible iterations or a stop condition.
- 
--What's more, for all of our methods we want to choose optimal $\alpha$ in the last method of imputing data.
-+What's more, for all of our methods we want to choose optimal $\alpha$ in the last imputation method data.
- 
- 
- 
- \subsection*{SVD1}
-+\subsubsection*{Optimizing $r$}
-+For a start, let's consider only imputation methods that don't need estimation of $\alpha$, so:
-+\begin{itemize}
-+    \item putting 0 everywhere,
-+    \item putting global mean everywhere,
-+    \item putting column means,
-+    \item putting row means,
-+    \item putting weighted row and column mean $\frac{1}{2} \cdot \text{\textsf{col\_mean}} + \frac{1}{2} \cdot \text{\textsf{row\_mean}}$.
-+\end{itemize}
-+The last method is the weighted method for $\alpha = \frac{1}{2}$.
-+The imputation methods mentioned above will be called \textit{basic} in this report.
- 
--\tami{co tu napisać}
-+For these methods we only need to find optimal $r$.
-+So for every basic imputation method and for every $r$ from 1 to 100 we perform SVD1.
-+Below, we present a graph showing results.
- 
--\tami{napisać co to jest to weighted}
- 
--At the beginning we consider only \tami{...}
--
--Below, we present a graph showing dependence of RMSE on $r$.
- 
- \begin{figure}[H]
- \centering
-@@ -198,78 +213,93 @@
- %  \captionof{figure}{Another figure}
- %  \label{fig:test2}
- \end{minipage}
-+\caption{RMSE of SVD1 for basic imputation methods and $r = 1, \dots, 100$}
- \end{figure}
- 
--Also we present a table with the lowest RMSE for every imputation method and the parameter $r$ that gave it.
-+Let's denote that we perform it for only one split of the data into train and test set.
-+This results can be different if we take different split.
-+
-+\tami{jakieś wnioski}
-+
-+Of course we look for the lowest RMSE obtained for each imputation method and the optimal $r$.
-+So below we present a table containing these information.
- \begin{table}[H]
- \begin{tabular}{c|ccccc}
- & 0 & column means & global mean & weighted means & row means \\
- \hline
- $r$ & 7 & 13 & 15 & 9 & 6 \\
--RMSE & 2.866 & 0.946 & 0.987 & 0.877 & 0.904 \\
-+RMSE & 2.8660 & 0.9458 & 0.9870 & 0.8767 & 0.9043 \\
- \end{tabular}
-+\caption{The lowest RMSE and optimal $r$ for SVD1 with basic imputation methods}
- \end{table}
- %wnioski, że ma wpływ jak uzupełniamy
- %jakieś wnioski, te zera beznadziejne
- %że weighted wypadają najlepiej i chcemy to alfa dobrać optymalnie
- 
--First of all, we observe that as we expected the imputation method does matter.
--It is most clearly seen looking at RMSE of data filled with zeros, that for the best $r$ is around $2.9$.
--Other methods also differ a lot.
--The lowest RMSE obtain the data filled with weighted data.
-+First of all, we observe that as we expected the choice of the imputation method does matter.
-+It can be most clearly seen on an example of data filled with zeros.
-+For the best $r$ RMSE there is around $2.9$ that is, it is about 3 times larger than for outher imputation methods.
-+Other methods also differ.
-+The lowest RMSE is obtained for the data filled with weighted data.
-+But the result for data filled with row means is also quite good.
- That's why we may suspect that optimizing $\alpha$ can give even better results.
- 
- %wprowadzenie, że dobieramy alfa
- %no i ten rysunek wyżej nam pozwala obciąć r
- %że robimy minimalizację po dwóch parametrach
- 
-+\subsubsection*{Optimizing $\alpha$}
-+
- To get optimal result we perform optimization with respect to two parameters: $\alpha$ and $r$.
- As we can see on the picture above only $r$ between $0$ and $50$ give some reasonable results, so we consider only those (we could use all $r$, but it is time consuming).
--Below, we present graph showing dependence of RMSE on $\alpha$ and $r$ for data \tami{...}
-+Below, we present graph showing results of optimization.
- 
- \begin{figure}[H]
- \includegraphics[scale=0.45]{fig/svd1_r_w}
- \label{fig:figure}
-+\caption{RMSE of SVD1 for weigthed imputation method for different $\alpha$ and $r$}
- \end{figure}
- 
--Below we present also table with \tami{...} lowest RMSE and pairs $(\alpha, r)$ that gave those.
-+Below we present also table with 5 lowest RMSE and pairs $(\alpha, r)$ that gave them.
- \begin{table}[H]
- \begin{tabular}{cc|c}
--\toprule
-  $\alpha$ &  $r$ &     RMSE \\
--\midrule
- \hline
--       0.39 & 10 & 0.873987 \\
--       0.38 & 10 & 0.874244 \\
--       0.42 & 10 & 0.874274 \\
--       0.36 & 10 & 0.874449 \\
--       0.39 & 11 & 0.874469 \\
--\bottomrule
-+       0.39 & 10 & 0.8740 \\
-+       0.38 & 10 & 0.8742 \\
-+       0.42 & 10 & 0.8743 \\
-+       0.36 & 10 & 0.8744 \\
-+       0.39 & 11 & 0.8745 \\
- \end{tabular}
-+\caption{5 lowest RMSE of SVD1 for weigthed imputation method and ($\alpha$, $r$) that gave them}
- \end{table}
-+As we can see the pair $(0.39, 10)$ seems to be optimal in this case.
-+All other pairs are close to it.
-+\tami{może coś o tych RMSE}
-+
-+All results above are obtained for only one data split into train and test set.
-+To find the best parameters in our method we have to average those parameters over different splits.
-+So we considered 20 different splits and the results were as follows
-+\begin{itemize}
-+    \item mean value of the best $(\alpha, r)$ is $(0.4055, 12.2)$,
-+    \item median of the best $(\alpha, r)$ is $(0.41, 13)$,
-+    \item in 15 of 20 cases the best pair is $(0.41, 13)$.
-+\end{itemize}
-+\textbf{So $\alpha = 0.41$ and $r = 13$ are the parameters we use in our method SVD1 with imputation method with weighted means.}
- 
--As we can see 10 seems to be the best $r$ and 0.39 seems to be the best $\alpha$.
--Also in all those results $(\alpha, r)$ are close to them.
--\tami{So $\alpha = 0.39$ and $r = 10$ are parameters that we use to perform this method further in the report.}
- 
--Since in columns we keep indexes of movies, it means that our filled data take a bit more information from user ratings mean than from the movie ratings mean.
--That is probably logical \tami{...}
- 
--To conclude this subsection we present our best results obtained using these methods.
--\tami{which means what}
- 
--\tami{tabelka z najlepszymi wynikami}
-+
- 
- 
- \subsection*{SVD2}
- In this case we want to proceed as in SVD1 case.
--
--\tami{??In SVD2 we make a correction -- czy to tu}
-+But before we start we have to choose some stop condition for SVD2.
- 
--stop condition
- 
--
--
-+After choosing the stop condition we can proceed exactly as in SVD1 case.
-+So first of all we present a graph showing dependence of RMSE on $r$ and on the imputation method for basic imputation methods.
- \begin{figure}[H]
- \centering
- \begin{minipage}{.5\textwidth}
-@@ -284,40 +314,62 @@
- %  \captionof{figure}{Another figure}
- %  \label{fig:test2}
- \end{minipage}
-+\caption{RMSE of SVD2 for basic imputation methods and $r = 1, \dots, 100$}
- \end{figure}
- 
-+\tami{tutaj, że te wykresy są takie bardziej skaczące, ale generalnie trendy są te same}
-+
-+Now we present a table showing the best $r$ and RMSE for every imputation method.
- \begin{table}[H]
- \begin{tabular}{c|ccccc}
- & 0 & column means & global mean & weighted means & row means \\
- \hline
- $r$ & 19 & 10 & 6 & 13 & 7 \\
--RMSE & 2.779 & 0.942 & 0.942 & 0.875 & 0.878 \\
-+RMSE & 2.7789 & 0.9420 & 0.9425 & 0.8749 & 0.8778 \\
- \end{tabular}
-+\caption{The lowest RMSE and optimal $r$ for SVD2 with basic imputation methods}
- \end{table}
- 
-+Firstly, we can observe that SVD2 improved the results of SVD1.
-+Every result is smaller, but order which methods are better or worse didn't change, maybe differences are a bit smaller.
-+
-+We can observe again that only $r$ between 0 and 50 give reasonable results.
-+Although the best $r$ chosen by SVD2 in all cases differ a lot from those chosen by SVD1.
-+
-+Moving on to the weighte method of imputation, we present a graph showing the results of optimization with respect to $\alpha$ and $r$.
- \begin{figure}[H]
- \includegraphics[scale = 0.45]{svd2_r_w}
-+\caption{RMSE of SVD2 for weigthed imputation method for different $\alpha$ and $r$}
- \end{figure}
--
-+It may look very similar to analogous graph for SVD1, but results actually differ a bit and it can be seen in following table.
- \begin{table}[H]
--\begin{tabular}{rrr}
--\toprule
-+\begin{tabular}{cc|c}
- $\alpha$ &  $r$ &     RMSE \\
--\midrule
- \hline
--       0.25 &  8 & 0.867393 \\
--       0.26 &  8 & 0.867397 \\
--       0.24 &  8 & 0.867402 \\
--       0.27 &  8 & 0.867410 \\
--       0.28 &  8 & 0.867494 \\
--\bottomrule
-+       0.25 &  8 & 0.8674 \\
-+       0.26 &  8 & 0.8674 \\
-+       0.24 &  8 & 0.8674 \\
-+       0.27 &  8 & 0.8674 \\
-+       0.28 &  8 & 0.8675 \\
- \end{tabular}
-+\caption{5 lowest RMSE of SVD2 for weigthed imputation method and ($\alpha$, $r$) that gave them}
- \end{table}
-+This time method did the best 5 results for the same $r$.
-+Also in this case, the result are closer.
-+It may suggest that this method is even more stable.
-+\tami{to chyba powinno być naturalne, idk co tu napisać}
-+
-+After repeating this optimization for 20 different splits we get that:
-+\begin{itemize}
-+    \item the mean value of the best $(\alpha, r)$ is $(0.259, 8)$,
-+    \item the median of the best $(\alpha, r)$ is $(0.255, 8)$.
-+\end{itemize}
-+\textbf{So $\alpha = 0.26$ and $r=8$ are parameters we use in our SVD2 with weighted imputation method.}
- 
- \subsection*{NMF}
- 
- In this case since we have only $r$ and $\alpha$ to find, we proceed in exactly the same way as in the case of SVD.
--So, firstly we present a graph showing dependence of RMSE on $r$. \tami{in some cases...}
-+So firstly we present a graph showing dependence of RMSE on $r$ and on the imputation method for basic imputation methods.
- 
- \begin{figure}[H]
- \centering
-@@ -333,6 +385,7 @@
- %  \captionof{figure}{Another figure}
- %  \label{fig:test2}
- \end{minipage}
-+\caption{RMSE of NMF for basic imputation methods and $r = 1, \dots, 100$}
- \end{figure}
- 
- Comparing this graph to the graph for SVD we can see that \tami{tutaj o tym, że jest bardziej takie postrzępione}
-@@ -344,56 +397,66 @@
- & 0 & column means & global mean & weighted means & row means \\
- \hline
- $r$ & 6 & 47 & 30 & 37 & 15\\
--RMSE & 2.900 & 0.946 & 0.987 & 0.877 & 0.905 \\
-+RMSE & 2.8997 & 0.9462 & 0.9870 & 0.8766 & 0.9053 \\
- \end{tabular}
-+\caption{The lowest RMSE and optimal $r$ for NMF with basic imputation methods}
- \end{table}
- 
-+As we can see the parameters $r$ are in general bigger than in previous cases.
-+The RMSEs are very similar to those obtained using SVD1.
-+
-+
-+Now we peform the optimization with respect to $\alpha$ and $r$ and present a graph showing the results.
-+
-+\begin{figure}[H]
-+\includegraphics[scale = 0.45]{nmf_r_w}
-+\caption{RMSE of NMF for weigthed imputation method for different $\alpha$ and $r$}
-+\end{figure}
-+
-+Similarly as above, this graph is \tami{taki postrzępiony} looking at the axis of $r$.
-+
- \begin{table}[H]
- \begin{tabular}{cc|c}
--\toprule
- $\alpha$ &  $r$ &     RMSE \\
--\midrule
- \hline
--       0.40 & 37 & 0.874794 \\
--       0.41 & 37 & 0.874817 \\
--       0.39 & 18 & 0.874841 \\
--       0.39 & 37 & 0.874848 \\
--       0.40 & 18 & 0.874849 \\
--\bottomrule
-+       0.40 & 37 & 0.8748 \\
-+       0.41 & 37 & 0.8748 \\
-+       0.39 & 18 & 0.8748 \\
-+       0.39 & 37 & 0.8748 \\
-+       0.40 & 18 & 0.8748 \\
- \end{tabular}
-+\caption{5 lowest RMSE of NMF for weigthed imputation method and ($\alpha$, $r$) that gave them}
- \end{table}
- 
--As we can see the parameters $r$ are in general bigger than in previous cases.
--\tami{czy będą bardziej porostrzelane}
- 
--Now we pefrorm the optimization with respect to $\alpha$ and $r$ and present a graph showing the results.
-+After repeating this optimization for 20 different splits we get that:
-+\begin{itemize}
-+    \item the mean value of the best $(\alpha, r)$ is $(0.393, 32.25)$,
-+    \item the median of the best $(\alpha, r)$ is $(0.39, 37)$,
-+    \item 15 times the best $r$ is 37 and 5 times the best $r$ is 18.
-+\end{itemize}
-+\textbf{So $\alpha = 0.39$ and $r=37$ are parameters we use in our NMF with weighted imputation method.}
- 
--\begin{figure}[H]
--\includegraphics[scale = 0.45]{nmf_r_w}
--\end{figure}
- 
--\tami{tabelka z najlepszymi r i alpha}
--\tami{jakie r i alpha wybieramy}
- 
--\tami{tabelka z najlepszymi wynikami}
- 
- \subsection*{SGD}
- 
--\begin{figure}[H]
--\centering
--\begin{minipage}{.5\textwidth}
--  \centering
--  \includegraphics[scale=0.43]{svd1_1}
--%  \captionof{figure}{A figure}
--%  \label{fig:test1}
--\end{minipage}%
--\begin{minipage}{.5\textwidth}
--  \centering
--  \includegraphics[scale=0.43]{svd1_2}
--%  \captionof{figure}{Another figure}
--%  \label{fig:test2}
--\end{minipage}
--\end{figure}
-+%\begin{figure}[H]
-+%\centering
-+%\begin{minipage}{.5\textwidth}
-+%  \centering
-+%  \includegraphics[scale=0.43]{svd1_1}
-+%%  \captionof{figure}{A figure}
-+%%  \label{fig:test1}
-+%\end{minipage}%
-+%\begin{minipage}{.5\textwidth}
-+%  \centering
-+%  \includegraphics[scale=0.43]{svd1_2}
-+%%  \captionof{figure}{Another figure}
-+%%  \label{fig:test2}
-+%\end{minipage}
-+%\end{figure}
- 
- 
- 
-@@ -401,6 +464,7 @@
- 
- \section{Conclusions}
- 
--
-+Since in columns we keep indexes of movies, it means that our filled data take a bit more information from user ratings mean than from the movie ratings mean.
-+That is probably logical \tami{...}
- 
- \end{document}
-\ No newline at end of file
-Index: auxil/report.aux
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>\\relax \r\n\\@writefile{toc}{\\contentsline {section}{\\tocsection {}{1}{Introduction}}{1}\\protected@file@percent }\r\n\\@writefile{toc}{\\contentsline {subsection}{\\tocsubsection {}{}{Statement of the problem}}{1}\\protected@file@percent }\r\n\\@writefile{toc}{\\contentsline {subsection}{\\tocsubsection {}{}{Description of methods}}{1}\\protected@file@percent }\r\n\\@writefile{toc}{\\contentsline {subsubsection}{\\tocsubsubsection {}{}{SVD1}}{1}\\protected@file@percent }\r\n\\@writefile{toc}{\\contentsline {subsubsection}{\\tocsubsubsection {}{}{SVD2}}{1}\\protected@file@percent }\r\n\\@writefile{toc}{\\contentsline {subsubsection}{\\tocsubsubsection {}{}{NMF}}{1}\\protected@file@percent }\r\n\\@writefile{toc}{\\contentsline {subsubsection}{\\tocsubsubsection {}{}{SGD}}{2}\\protected@file@percent }\r\n\\@writefile{toc}{\\contentsline {section}{\\tocsection {}{2}{Implementation}}{2}\\protected@file@percent }\r\n\\@writefile{toc}{\\contentsline {subsection}{\\tocsubsection {}{}{Description of the data}}{2}\\protected@file@percent }\r\n\\@writefile{toc}{\\contentsline {subsection}{\\tocsubsection {}{}{Performing methods}}{2}\\protected@file@percent }\r\n\\@writefile{toc}{\\contentsline {subsection}{\\tocsubsection {}{}{Quality of the system}}{2}\\protected@file@percent }\r\n\\@writefile{toc}{\\contentsline {subsection}{\\tocsubsection {}{}{Imputing the missing data}}{3}\\protected@file@percent }\r\n\\@writefile{toc}{\\contentsline {section}{\\tocsection {}{3}{Parameters tuning and results}}{3}\\protected@file@percent }\r\n\\@writefile{toc}{\\contentsline {subsection}{\\tocsubsection {}{}{SVD1}}{3}\\protected@file@percent }\r\n\\providecommand*\\caption@xref[2]{\\@setref\\relax\\@undefined{#1}}\r\n\\newlabel{fig:figure}{{\\caption@xref {fig:figure}{ on input line 232}}{4}}\r\n\\@writefile{toc}{\\contentsline {subsection}{\\tocsubsection {}{}{SVD2}}{5}\\protected@file@percent }\r\n\\@writefile{toc}{\\contentsline {subsection}{\\tocsubsection {}{}{NMF}}{6}\\protected@file@percent }\r\n\\newlabel{tocindent-1}{0pt}\r\n\\newlabel{tocindent0}{15.98535pt}\r\n\\newlabel{tocindent1}{19.35791pt}\r\n\\newlabel{tocindent2}{31.97072pt}\r\n\\newlabel{tocindent3}{0pt}\r\n\\@writefile{toc}{\\contentsline {subsection}{\\tocsubsection {}{}{SGD}}{8}\\protected@file@percent }\r\n\\@writefile{toc}{\\contentsline {section}{\\tocsection {}{4}{}}{9}\\protected@file@percent }\r\n\\@writefile{toc}{\\contentsline {section}{\\tocsection {}{5}{Conclusions}}{9}\\protected@file@percent }\r\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/auxil/report.aux b/auxil/report.aux
---- a/auxil/report.aux	(revision 4150129e7bd8166c8f9a24bbfc6601436329d089)
-+++ b/auxil/report.aux	(date 1649603932213)
-@@ -13,15 +13,29 @@
- \@writefile{toc}{\contentsline {subsection}{\tocsubsection {}{}{Imputing the missing data}}{3}\protected@file@percent }
- \@writefile{toc}{\contentsline {section}{\tocsection {}{3}{Parameters tuning and results}}{3}\protected@file@percent }
- \@writefile{toc}{\contentsline {subsection}{\tocsubsection {}{}{SVD1}}{3}\protected@file@percent }
-+\@writefile{toc}{\contentsline {subsubsection}{\tocsubsubsection {}{}{Optimizing $r$}}{3}\protected@file@percent }
-+\@writefile{lof}{\contentsline {figure}{\numberline {1}{\ignorespaces RMSE of SVD1 for basic imputation methods and $r = 1, \dots  , 100$\relax }}{4}\protected@file@percent }
-+\@writefile{lot}{\contentsline {table}{\numberline {1}{\ignorespaces The lowest RMSE and optimal $r$ for SVD1 with basic imputation methods\relax }}{4}\protected@file@percent }
-+\@writefile{toc}{\contentsline {subsubsection}{\tocsubsubsection {}{}{Optimizing $\alpha $}}{4}\protected@file@percent }
- \providecommand*\caption@xref[2]{\@setref\relax\@undefined{#1}}
--\newlabel{fig:figure}{{\caption@xref {fig:figure}{ on input line 232}}{4}}
--\@writefile{toc}{\contentsline {subsection}{\tocsubsection {}{}{SVD2}}{5}\protected@file@percent }
--\@writefile{toc}{\contentsline {subsection}{\tocsubsection {}{}{NMF}}{6}\protected@file@percent }
-+\newlabel{fig:figure}{{\caption@xref {fig:figure}{ on input line 259}}{5}}
-+\@writefile{lof}{\contentsline {figure}{\numberline {2}{\ignorespaces RMSE of SVD1 for weigthed imputation method for different $\alpha $ and $r$\relax }}{5}\protected@file@percent }
-+\@writefile{lot}{\contentsline {table}{\numberline {2}{\ignorespaces 5 lowest RMSE of SVD1 for weigthed imputation method and ($\alpha $, $r$) that gave them\relax }}{5}\protected@file@percent }
-+\@writefile{toc}{\contentsline {subsection}{\tocsubsection {}{}{SVD2}}{6}\protected@file@percent }
-+\@writefile{lof}{\contentsline {figure}{\numberline {3}{\ignorespaces RMSE of SVD2 for basic imputation methods and $r = 1, \dots  , 100$\relax }}{6}\protected@file@percent }
-+\@writefile{lot}{\contentsline {table}{\numberline {3}{\ignorespaces The lowest RMSE and optimal $r$ for SVD2 with basic imputation methods\relax }}{6}\protected@file@percent }
-+\@writefile{lof}{\contentsline {figure}{\numberline {4}{\ignorespaces RMSE of SVD2 for weigthed imputation method for different $\alpha $ and $r$\relax }}{7}\protected@file@percent }
-+\@writefile{lot}{\contentsline {table}{\numberline {4}{\ignorespaces 5 lowest RMSE of SVD2 for weigthed imputation method and ($\alpha $, $r$) that gave them\relax }}{8}\protected@file@percent }
-+\@writefile{toc}{\contentsline {subsection}{\tocsubsection {}{}{NMF}}{8}\protected@file@percent }
-+\@writefile{lof}{\contentsline {figure}{\numberline {5}{\ignorespaces RMSE of NMF for basic imputation methods and $r = 1, \dots  , 100$\relax }}{8}\protected@file@percent }
-+\@writefile{lot}{\contentsline {table}{\numberline {5}{\ignorespaces The lowest RMSE and optimal $r$ for NMF with basic imputation methods\relax }}{9}\protected@file@percent }
-+\@writefile{lof}{\contentsline {figure}{\numberline {6}{\ignorespaces RMSE of NMF for weigthed imputation method for different $\alpha $ and $r$\relax }}{10}\protected@file@percent }
-+\@writefile{lot}{\contentsline {table}{\numberline {6}{\ignorespaces 5 lowest RMSE of NMF for weigthed imputation method and ($\alpha $, $r$) that gave them\relax }}{10}\protected@file@percent }
- \newlabel{tocindent-1}{0pt}
- \newlabel{tocindent0}{15.98535pt}
- \newlabel{tocindent1}{19.35791pt}
- \newlabel{tocindent2}{31.97072pt}
- \newlabel{tocindent3}{0pt}
--\@writefile{toc}{\contentsline {subsection}{\tocsubsection {}{}{SGD}}{8}\protected@file@percent }
--\@writefile{toc}{\contentsline {section}{\tocsection {}{4}{}}{9}\protected@file@percent }
--\@writefile{toc}{\contentsline {section}{\tocsection {}{5}{Conclusions}}{9}\protected@file@percent }
-+\@writefile{toc}{\contentsline {subsection}{\tocsubsection {}{}{SGD}}{11}\protected@file@percent }
-+\@writefile{toc}{\contentsline {section}{\tocsection {}{4}{}}{11}\protected@file@percent }
-+\@writefile{toc}{\contentsline {section}{\tocsection {}{5}{Conclusions}}{11}\protected@file@percent }
-Index: auxil/report.log
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>This is pdfTeX, Version 3.14159265-2.6-1.40.21 (MiKTeX 2.9.7300 64-bit) (preloaded format=pdflatex 2020.3.10)  9 APR 2022 22:27\r\nentering extended mode\r\n**./report.tex\r\n(report.tex\r\nLaTeX2e <2020-02-02> patch level 2\r\nL3 programming layer <2020-02-14>\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/amscls\\amsart.cls\"\r\nDocument Class: amsart 2017/10/31 v2.20.4\r\n\\linespacing=\\dimen134\r\n\\normalparindent=\\dimen135\r\n\\normaltopskip=\\skip47\r\n\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/amsmath\\amsmath.st\r\ny\"\r\nPackage: amsmath 2020/01/20 v2.17e AMS math features\r\n\\@mathmargin=\\skip48\r\n\r\nFor additional information on amsmath, use the `?' option.\r\n\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/amsmath\\amstext.st\r\ny\"\r\nPackage: amstext 2000/06/29 v2.01 AMS text\r\n\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/amsmath\\amsgen.sty\r\n\"\r\nFile: amsgen.sty 1999/11/30 v2.0 generic functions\r\n\\@emptytoks=\\toks14\r\n\\ex@=\\dimen136\r\n))\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/amsmath\\amsbsy.sty\r\n\"\r\nPackage: amsbsy 1999/11/29 v1.2d Bold Symbols\r\n\\pmbraise@=\\dimen137\r\n)\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/amsmath\\amsopn.sty\r\n\"\r\nPackage: amsopn 2016/03/08 v2.02 operator names\r\n)\r\n\\inf@bad=\\count167\r\nLaTeX Info: Redefining \\frac on input line 227.\r\n\\uproot@=\\count168\r\n\\leftroot@=\\count169\r\nLaTeX Info: Redefining \\overline on input line 389.\r\n\\classnum@=\\count170\r\n\\DOTSCASE@=\\count171\r\nLaTeX Info: Redefining \\ldots on input line 486.\r\nLaTeX Info: Redefining \\dots on input line 489.\r\nLaTeX Info: Redefining \\cdots on input line 610.\r\n\\Mathstrutbox@=\\box45\r\n\\strutbox@=\\box46\r\n\\big@size=\\dimen138\r\nLaTeX Font Info:    Redeclaring font encoding OML on input line 733.\r\nLaTeX Font Info:    Redeclaring font encoding OMS on input line 734.\r\n\\macc@depth=\\count172\r\n\\c@MaxMatrixCols=\\count173\r\n\\dotsspace@=\\muskip16\r\n\\c@parentequation=\\count174\r\n\\dspbrk@lvl=\\count175\r\n\\tag@help=\\toks15\r\n\\row@=\\count176\r\n\\column@=\\count177\r\n\\maxfields@=\\count178\r\n\\andhelp@=\\toks16\r\n\\eqnshift@=\\dimen139\r\n\\alignsep@=\\dimen140\r\n\\tagshift@=\\dimen141\r\n\\tagwidth@=\\dimen142\r\n\\totwidth@=\\dimen143\r\n\\lineht@=\\dimen144\r\n\\@envbody=\\toks17\r\n\\multlinegap=\\skip49\r\n\\multlinetaggap=\\skip50\r\n\\mathdisplay@stack=\\toks18\r\nLaTeX Info: Redefining \\[ on input line 2859.\r\nLaTeX Info: Redefining \\] on input line 2860.\r\n)\r\nLaTeX Font Info:    Trying to load font information for U+msa on input line 398\r\n.\r\n\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/amsfonts\\umsa.fd\"\r\nFile: umsa.fd 2013/01/14 v3.01 AMS symbols A\r\n)\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/amsfonts\\amsfonts.\r\nsty\"\r\nPackage: amsfonts 2013/01/14 v3.01 Basic AMSFonts support\r\n\\symAMSa=\\mathgroup4\r\n\\symAMSb=\\mathgroup5\r\nLaTeX Font Info:    Redeclaring math symbol \\hbar on input line 98.\r\nLaTeX Font Info:    Overwriting math alphabet `\\mathfrak' in version `bold'\r\n(Font)                  U/euf/m/n --> U/euf/b/n on input line 106.\r\n)\r\n\\copyins=\\insert199\r\n\\abstractbox=\\box47\r\n\\listisep=\\skip51\r\n\\c@part=\\count179\r\n\\c@section=\\count180\r\n\\c@subsection=\\count181\r\n\\c@subsubsection=\\count182\r\n\\c@paragraph=\\count183\r\n\\c@subparagraph=\\count184\r\n\\c@figure=\\count185\r\n\\c@table=\\count186\r\n\\abovecaptionskip=\\skip52\r\n\\belowcaptionskip=\\skip53\r\n\\captionindent=\\dimen145\r\n\\thm@style=\\toks19\r\n\\thm@bodyfont=\\toks20\r\n\\thm@headfont=\\toks21\r\n\\thm@notefont=\\toks22\r\n\\thm@headpunct=\\toks23\r\n\\thm@preskip=\\skip54\r\n\\thm@postskip=\\skip55\r\n\\thm@headsep=\\skip56\r\n\\dth@everypar=\\toks24\r\n)\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/float\\float.sty\"\r\nPackage: float 2001/11/08 v1.3d Float enhancements (AL)\r\n\\c@float@type=\\count187\r\n\\float@exts=\\toks25\r\n\\float@box=\\box48\r\n\\@float@everytoks=\\toks26\r\n\\@floatcapt=\\box49\r\n)\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/base\\fontenc.sty\"\r\nPackage: fontenc 2020/02/11 v2.0o Standard LaTeX package\r\n)\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/geometry\\geometry.\r\nsty\"\r\nPackage: geometry 2020/01/02 v5.9 Page Geometry\r\n\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/graphics\\keyval.st\r\ny\"\r\nPackage: keyval 2014/10/28 v1.15 key=value parser (DPC)\r\n\\KV@toks@=\\toks27\r\n)\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/generic/iftex\\ifvtex.sty\r\n\"\r\nPackage: ifvtex 2019/10/25 v1.7 ifvtex legacy package. Use iftex instead.\r\n (\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/generic/iftex\\iftex.sty\r\n\"\r\nPackage: iftex 2019/11/07 v1.0c TeX engine tests\r\n))\r\n\\Gm@cnth=\\count188\r\n\\Gm@cntv=\\count189\r\n\\c@Gm@tempcnt=\\count190\r\n\\Gm@bindingoffset=\\dimen146\r\n\\Gm@wd@mp=\\dimen147\r\n\\Gm@odd@mp=\\dimen148\r\n\\Gm@even@mp=\\dimen149\r\n\\Gm@layoutwidth=\\dimen150\r\n\\Gm@layoutheight=\\dimen151\r\n\\Gm@layouthoffset=\\dimen152\r\n\\Gm@layoutvoffset=\\dimen153\r\n\\Gm@dimlist=\\toks28\r\n\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/geometry\\geometry.\r\ncfg\"))\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/parskip\\parskip.st\r\ny\"\r\nPackage: parskip 2020-01-22 v2.0d non-zero parskip adjustments\r\n\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/kvoptions\\kvoption\r\ns.sty\"\r\nPackage: kvoptions 2019/11/29 v3.13 Key value format for package options (HO)\r\n\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/generic/ltxcmds\\ltxcmds.\r\nsty\"\r\nPackage: ltxcmds 2019/12/15 v1.24 LaTeX kernel commands for general use (HO)\r\n)\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/generic/kvsetkeys\\kvsetk\r\neys.sty\"\r\nPackage: kvsetkeys 2019/12/15 v1.18 Key value parser (HO)\r\n))\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/etoolbox\\etoolbox.\r\nsty\"\r\nPackage: etoolbox 2019/09/21 v2.5h e-TeX tools for LaTeX (JAW)\r\n\\etb@tempcnta=\\count191\r\n)\r\nCouldn't patch \\@starttoc\r\n)\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/amsfonts\\amssymb.s\r\nty\"\r\nPackage: amssymb 2013/01/14 v3.01 AMS font symbols\r\n)\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/titling\\titling.st\r\ny\"\r\nPackage: titling 2009/09/04 v2.1d maketitle typesetting\r\n\\thanksmarkwidth=\\skip57\r\n\\thanksmargin=\\skip58\r\n\\droptitle=\\skip59\r\n)\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/tools\\enumerate.st\r\ny\"\r\nPackage: enumerate 2015/07/23 v3.00 enumerate extensions (DPC)\r\n\\@enLab=\\toks29\r\n)\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/multirow\\multirow.\r\nsty\"\r\nPackage: multirow 2019/05/31 v2.5 Span multiple rows of a table\r\n\\multirow@colwidth=\\skip60\r\n\\multirow@cntb=\\count192\r\n\\multirow@dima=\\skip61\r\n\\bigstrutjot=\\dimen154\r\n)\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/graphics\\graphics.\r\nsty\"\r\nPackage: graphics 2019/11/30 v1.4a Standard LaTeX Graphics (DPC,SPQR)\r\n\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/graphics\\trig.sty\"\r\nPackage: trig 2016/01/03 v1.10 sin cos tan (DPC)\r\n)\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/graphics-cfg\\graph\r\nics.cfg\"\r\nFile: graphics.cfg 2016/06/04 v1.11 sample graphics configuration\r\n)\r\nPackage graphics Info: Driver file: pdftex.def on input line 105.\r\n\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/graphics-def\\pdfte\r\nx.def\"\r\nFile: pdftex.def 2018/01/08 v1.0l Graphics/color driver for pdftex\r\n))\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/graphics\\graphicx.\r\nsty\"\r\nPackage: graphicx 2019/11/30 v1.2a Enhanced LaTeX Graphics (DPC,SPQR)\r\n\\Gin@req@height=\\dimen155\r\n\\Gin@req@width=\\dimen156\r\n)\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/caption\\caption.st\r\ny\"\r\nPackage: caption 2020/10/26 v3.5g Customizing captions (AR)\r\n\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/caption\\caption3.s\r\nty\"\r\nPackage: caption3 2020/10/21 v2.2e caption3 kernel (AR)\r\n\\captionmargin=\\dimen157\r\n\\captionmargin@=\\dimen158\r\n\\captionwidth=\\dimen159\r\n\\caption@tempdima=\\dimen160\r\n\\caption@indent=\\dimen161\r\n\\caption@parindent=\\dimen162\r\n\\caption@hangindent=\\dimen163\r\nPackage caption Info: AMS or SMF document class detected.\r\n\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/caption\\caption-am\r\ns-smf.sto\"\r\nFile: caption-ams-smf.sto 2020/08/22 v2.0 Adaption of the caption package to th\r\ne AMS and SMF document classes (AR)\r\n))\r\n\\c@caption@flags=\\count193\r\n\\c@continuedfloat=\\count194\r\nPackage caption Info: float package is loaded.\r\n)\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/tools\\array.sty\"\r\nPackage: array 2019/08/31 v2.4l Tabular extension package (FMi)\r\n\\col@sep=\\dimen164\r\n\\ar@mcellbox=\\box50\r\n\\extrarowheight=\\dimen165\r\n\\NC@list=\\toks30\r\n\\extratabsurround=\\skip62\r\n\\backup@length=\\skip63\r\n\\ar@cellbox=\\box51\r\n)\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/xcolor\\xcolor.sty\"\r\nPackage: xcolor 2016/05/11 v2.12 LaTeX color extensions (UK)\r\n\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/graphics-cfg\\color\r\n.cfg\"\r\nFile: color.cfg 2016/01/02 v1.6 sample color configuration\r\n)\r\nPackage xcolor Info: Driver file: pdftex.def on input line 225.\r\nPackage xcolor Info: Model `cmy' substituted by `cmy0' on input line 1348.\r\nPackage xcolor Info: Model `hsb' substituted by `rgb' on input line 1352.\r\nPackage xcolor Info: Model `RGB' extended on input line 1364.\r\nPackage xcolor Info: Model `HTML' substituted by `rgb' on input line 1366.\r\nPackage xcolor Info: Model `Hsb' substituted by `hsb' on input line 1367.\r\nPackage xcolor Info: Model `tHsb' substituted by `hsb' on input line 1368.\r\nPackage xcolor Info: Model `HSB' substituted by `hsb' on input line 1369.\r\nPackage xcolor Info: Model `Gray' substituted by `gray' on input line 1370.\r\nPackage xcolor Info: Model `wave' substituted by `hsb' on input line 1371.\r\n)\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/caption\\subcaption\r\n.sty\"\r\nPackage: subcaption 2020/10/07 v1.3j Sub-captions (AR)\r\n\\c@subfigure=\\count195\r\n\\c@subtable=\\count196\r\n)\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/l3backend\\l3backen\r\nd-pdfmode.def\"\r\nFile: l3backend-pdfmode.def 2020-02-03 L3 backend support: PDF mode\r\n\\l__kernel_color_stack_int=\\count197\r\n\\l__pdf_internal_box=\\box52\r\n) (C:/Users\\admin\\PycharmProjects\\MoCaDR_proj1\\auxil\\report.aux)\r\n\\openout1 = `report.aux'.\r\n\r\nLaTeX Font Info:    Checking defaults for OML/cmm/m/it on input line 44.\r\nLaTeX Font Info:    ... okay on input line 44.\r\nLaTeX Font Info:    Checking defaults for OMS/cmsy/m/n on input line 44.\r\nLaTeX Font Info:    ... okay on input line 44.\r\nLaTeX Font Info:    Checking defaults for OT1/cmr/m/n on input line 44.\r\nLaTeX Font Info:    ... okay on input line 44.\r\nLaTeX Font Info:    Checking defaults for T1/cmr/m/n on input line 44.\r\nLaTeX Font Info:    ... okay on input line 44.\r\nLaTeX Font Info:    Checking defaults for TS1/cmr/m/n on input line 44.\r\nLaTeX Font Info:    ... okay on input line 44.\r\nLaTeX Font Info:    Checking defaults for OMX/cmex/m/n on input line 44.\r\nLaTeX Font Info:    ... okay on input line 44.\r\nLaTeX Font Info:    Checking defaults for U/cmr/m/n on input line 44.\r\nLaTeX Font Info:    ... okay on input line 44.\r\nLaTeX Font Info:    Trying to load font information for U+msa on input line 44.\r\n\r\n\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/amsfonts\\umsa.fd\"\r\nFile: umsa.fd 2013/01/14 v3.01 AMS symbols A\r\n)\r\nLaTeX Font Info:    Trying to load font information for U+msb on input line 44.\r\n\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/amsfonts\\umsb.fd\"\r\nFile: umsb.fd 2013/01/14 v3.01 AMS symbols B\r\n)\r\n*geometry* driver: auto-detecting\r\n*geometry* detected driver: pdftex\r\n*geometry* verbose mode - [ preamble ] result:\r\n* driver: pdftex\r\n* paper: <default>\r\n* layout: <same size as paper>\r\n* layoutoffset:(h,v)=(0.0pt,0.0pt)\r\n* modes: twoside \r\n* h-part:(L,W,R)=(73.71613pt, 430.00462pt, 110.57425pt)\r\n* v-part:(T,H,B)=(95.39737pt, 556.47656pt, 143.09605pt)\r\n* \\paperwidth=614.295pt\r\n* \\paperheight=794.96999pt\r\n* \\textwidth=430.00462pt\r\n* \\textheight=556.47656pt\r\n* \\oddsidemargin=1.44614pt\r\n* \\evensidemargin=38.30426pt\r\n* \\topmargin=1.12738pt\r\n* \\headheight=8.0pt\r\n* \\headsep=14.0pt\r\n* \\topskip=10.0pt\r\n* \\footskip=12.0pt\r\n* \\marginparwidth=90.0pt\r\n* \\marginparsep=11.0pt\r\n* \\columnsep=10.0pt\r\n* \\skip\\footins=7.0pt plus 11.0pt\r\n* \\hoffset=0.0pt\r\n* \\voffset=0.0pt\r\n* \\mag=1000\r\n* \\@twocolumnfalse\r\n* \\@twosidetrue\r\n* \\@mparswitchtrue\r\n* \\@reversemarginfalse\r\n* (1in=72.27pt=25.4mm, 1cm=28.453pt)\r\n\r\n\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/context/base/mkii\\supp-p\r\ndf.mkii\"\r\n[Loading MPS to PDF converter (version 2006.09.02).]\r\n\\scratchcounter=\\count198\r\n\\scratchdimen=\\dimen166\r\n\\scratchbox=\\box53\r\n\\nofMPsegments=\\count266\r\n\\nofMParguments=\\count267\r\n\\everyMPshowfont=\\toks31\r\n\\MPscratchCnt=\\count268\r\n\\MPscratchDim=\\dimen167\r\n\\MPnumerator=\\count269\r\n\\makeMPintoPDFobject=\\count270\r\n\\everyMPtoPDFconversion=\\toks32\r\n)\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/epstopdf-pkg\\epsto\r\npdf-base.sty\"\r\nPackage: epstopdf-base 2020-01-24 v2.11 Base part for package epstopdf\r\nPackage epstopdf-base Info: Redefining graphics rule for `.eps' on input line 4\r\n85.\r\n)\r\nPackage caption Info: Begin \\AtBeginDocument code.\r\nPackage caption Info: End \\AtBeginDocument code.\r\n\r\n\r\nLaTeX Warning: No \\author given.\r\n\r\n[1{C:/Users/admin/AppData/Local/MiKTeX/2.9/pdftex/config/pdftex.map}]\r\nLaTeX Font Info:    Trying to load font information for T1+cmss on input line 1\r\n17.\r\n\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/base\\t1cmss.fd\"\r\nFile: t1cmss.fd 2019/12/16 v2.5j Standard LaTeX font definitions\r\n)\r\n[2]\r\n<./fig/svd1_1.png, id=26, 544.9158pt x 329.5512pt>\r\nFile: ./fig/svd1_1.png Graphic file (type png)\r\n<use ./fig/svd1_1.png>\r\nPackage pdftex.def Info: ./fig/svd1_1.png  used on input line 191.\r\n(pdftex.def)             Requested size: 234.30922pt x 141.70424pt.\r\n\r\nOverfull \\hbox (19.30692pt too wide) in paragraph at lines 191--194\r\n [][] \r\n []\r\n\r\n<./fig/svd1_2.png, id=28, 412.6617pt x 329.5512pt>\r\nFile: ./fig/svd1_2.png Graphic file (type png)\r\n<use ./fig/svd1_2.png>\r\nPackage pdftex.def Info: ./fig/svd1_2.png  used on input line 197.\r\n(pdftex.def)             Requested size: 177.44106pt x 141.70424pt.\r\n[3 <./fig/svd1_1.png> <./fig/svd1_2.png>]\r\n<fig/svd1_r_w.png, id=34, 1084.05pt x 722.7pt>\r\nFile: fig/svd1_r_w.png Graphic file (type png)\r\n<use fig/svd1_r_w.png>\r\nPackage pdftex.def Info: fig/svd1_r_w.png  used on input line 231.\r\n(pdftex.def)             Requested size: 487.818pt x 325.21199pt.\r\n\r\nOverfull \\hbox (57.81337pt too wide) in paragraph at lines 231--233\r\n [][] \r\n []\r\n\r\nreport.tex:238: Undefined control sequence.\r\nl.238 \\toprule\r\n              \r\nThe control sequence at the end of the top line\r\nof your error message was never \\def'ed. If you have\r\nmisspelled it (e.g., `\\hobx'), type `I' and the correct\r\nspelling (e.g., `I\\hbox'). Otherwise just continue,\r\nand I'll forget about whatever was undefined.\r\n\r\nreport.tex:240: Undefined control sequence.\r\n<recently read> \\midrule \r\n                         \r\nl.240 \\midrule\r\n              \r\nThe control sequence at the end of the top line\r\nof your error message was never \\def'ed. If you have\r\nmisspelled it (e.g., `\\hobx'), type `I' and the correct\r\nspelling (e.g., `I\\hbox'). Otherwise just continue,\r\nand I'll forget about whatever was undefined.\r\n\r\nreport.tex:247: Undefined control sequence.\r\n<recently read> \\bottomrule \r\n                            \r\nl.247 \\bottomrule\r\n                 \r\nThe control sequence at the end of the top line\r\nof your error message was never \\def'ed. If you have\r\nmisspelled it (e.g., `\\hobx'), type `I' and the correct\r\nspelling (e.g., `I\\hbox'). Otherwise just continue,\r\nand I'll forget about whatever was undefined.\r\n\r\n[4 <./fig/svd1_r_w.png>]\r\n<./fig/svd2_1.png, id=39, 544.9158pt x 329.5512pt>\r\nFile: ./fig/svd2_1.png Graphic file (type png)\r\n<use ./fig/svd2_1.png>\r\nPackage pdftex.def Info: ./fig/svd2_1.png  used on input line 277.\r\n(pdftex.def)             Requested size: 234.30922pt x 141.70424pt.\r\n\r\nOverfull \\hbox (19.30692pt too wide) in paragraph at lines 277--280\r\n [][] \r\n []\r\n\r\n<./fig/svd2_2.png, id=40, 412.6617pt x 329.5512pt>\r\nFile: ./fig/svd2_2.png Graphic file (type png)\r\n<use ./fig/svd2_2.png>\r\nPackage pdftex.def Info: ./fig/svd2_2.png  used on input line 283.\r\n(pdftex.def)             Requested size: 177.44106pt x 141.70424pt.\r\n<./fig/svd2_r_w.png, id=41, 1084.05pt x 722.7pt>\r\nFile: ./fig/svd2_r_w.png Graphic file (type png)\r\n<use ./fig/svd2_r_w.png>\r\nPackage pdftex.def Info: ./fig/svd2_r_w.png  used on input line 299.\r\n(pdftex.def)             Requested size: 487.818pt x 325.21199pt.\r\n\r\nOverfull \\hbox (57.81337pt too wide) in paragraph at lines 299--300\r\n [][] \r\n []\r\n\r\n[5 <./fig/svd2_1.png> <./fig/svd2_2.png>]\r\nreport.tex:304: Undefined control sequence.\r\nl.304 \\toprule\r\n              \r\nThe control sequence at the end of the top line\r\nof your error message was never \\def'ed. If you have\r\nmisspelled it (e.g., `\\hobx'), type `I' and the correct\r\nspelling (e.g., `I\\hbox'). Otherwise just continue,\r\nand I'll forget about whatever was undefined.\r\n\r\nreport.tex:306: Undefined control sequence.\r\n<recently read> \\midrule \r\n                         \r\nl.306 \\midrule\r\n              \r\nThe control sequence at the end of the top line\r\nof your error message was never \\def'ed. If you have\r\nmisspelled it (e.g., `\\hobx'), type `I' and the correct\r\nspelling (e.g., `I\\hbox'). Otherwise just continue,\r\nand I'll forget about whatever was undefined.\r\n\r\nreport.tex:313: Undefined control sequence.\r\n<recently read> \\bottomrule \r\n                            \r\nl.313 \\bottomrule\r\n                 \r\nThe control sequence at the end of the top line\r\nof your error message was never \\def'ed. If you have\r\nmisspelled it (e.g., `\\hobx'), type `I' and the correct\r\nspelling (e.g., `I\\hbox'). Otherwise just continue,\r\nand I'll forget about whatever was undefined.\r\n\r\n<./fig/nmf_1.png, id=47, 544.9158pt x 329.5512pt>\r\nFile: ./fig/nmf_1.png Graphic file (type png)\r\n<use ./fig/nmf_1.png>\r\nPackage pdftex.def Info: ./fig/nmf_1.png  used on input line 326.\r\n(pdftex.def)             Requested size: 234.30922pt x 141.70424pt.\r\n\r\nOverfull \\hbox (19.30692pt too wide) in paragraph at lines 326--329\r\n [][] \r\n []\r\n\r\n<./fig/nmf_2.png, id=48, 412.6617pt x 329.5512pt>\r\nFile: ./fig/nmf_2.png Graphic file (type png)\r\n<use ./fig/nmf_2.png>\r\nPackage pdftex.def Info: ./fig/nmf_2.png  used on input line 332.\r\n(pdftex.def)             Requested size: 177.44106pt x 141.70424pt.\r\n\r\nUnderfull \\vbox (badness 4341) has occurred while \\output is active []\r\n\r\n [6 <./fig/svd2_r_w.png>]\r\nreport.tex:353: Undefined control sequence.\r\nl.353 \\toprule\r\n              \r\nThe control sequence at the end of the top line\r\nof your error message was never \\def'ed. If you have\r\nmisspelled it (e.g., `\\hobx'), type `I' and the correct\r\nspelling (e.g., `I\\hbox'). Otherwise just continue,\r\nand I'll forget about whatever was undefined.\r\n\r\nreport.tex:355: Undefined control sequence.\r\n<recently read> \\midrule \r\n                         \r\nl.355 \\midrule\r\n              \r\nThe control sequence at the end of the top line\r\nof your error message was never \\def'ed. If you have\r\nmisspelled it (e.g., `\\hobx'), type `I' and the correct\r\nspelling (e.g., `I\\hbox'). Otherwise just continue,\r\nand I'll forget about whatever was undefined.\r\n\r\nreport.tex:362: Undefined control sequence.\r\n<recently read> \\bottomrule \r\n                            \r\nl.362 \\bottomrule\r\n                 \r\nThe control sequence at the end of the top line\r\nof your error message was never \\def'ed. If you have\r\nmisspelled it (e.g., `\\hobx'), type `I' and the correct\r\nspelling (e.g., `I\\hbox'). Otherwise just continue,\r\nand I'll forget about whatever was undefined.\r\n\r\n<./fig/nmf_r_w.png, id=53, 1084.05pt x 722.7pt>\r\nFile: ./fig/nmf_r_w.png Graphic file (type png)\r\n<use ./fig/nmf_r_w.png>\r\nPackage pdftex.def Info: ./fig/nmf_r_w.png  used on input line 372.\r\n(pdftex.def)             Requested size: 487.818pt x 325.21199pt.\r\n\r\nOverfull \\hbox (57.81337pt too wide) in paragraph at lines 372--373\r\n [][] \r\n []\r\n\r\n\r\nUnderfull \\vbox (badness 1975) has occurred while \\output is active []\r\n\r\n [7 <./fig/nmf_1.png> <./fig/nmf_2.png>]\r\nFile: ./fig/svd1_1.png Graphic file (type png)\r\n<use ./fig/svd1_1.png>\r\nPackage pdftex.def Info: ./fig/svd1_1.png  used on input line 386.\r\n(pdftex.def)             Requested size: 234.30922pt x 141.70424pt.\r\n\r\nOverfull \\hbox (19.30692pt too wide) in paragraph at lines 386--389\r\n [][] \r\n []\r\n\r\nFile: ./fig/svd1_2.png Graphic file (type png)\r\n<use ./fig/svd1_2.png>\r\nPackage pdftex.def Info: ./fig/svd1_2.png  used on input line 392.\r\n(pdftex.def)             Requested size: 177.44106pt x 141.70424pt.\r\n[8 <./fig/nmf_r_w.png>] [9]\r\n(C:/Users\\admin\\PycharmProjects\\MoCaDR_proj1\\auxil\\report.aux) ) \r\nHere is how much of TeX's memory you used:\r\n 6283 strings out of 481556\r\n 90971 string characters out of 2913869\r\n 335988 words of memory out of 3000000\r\n 21270 multiletter control sequences out of 15000+200000\r\n 552539 words of font info for 78 fonts, out of 3000000 for 9000\r\n 1302 hyphenation exceptions out of 8191\r\n 39i,10n,43p,815b,294s stack positions out of 5000i,500n,10000p,200000b,50000s\r\n <C:\\Users\\admi\r\nn\\AppData\\Local\\MiKTeX\\2.9\\fonts/pk/ljfour/jknappen/ec/dpi600\\ecss1095.pk> <C:\\\r\nUsers\\admin\\AppData\\Local\\MiKTeX\\2.9\\fonts/pk/ljfour/jknappen/ec/dpi600\\ecrm080\r\n0.pk> <C:\\Users\\admin\\AppData\\Local\\MiKTeX\\2.9\\fonts/pk/ljfour/jknappen/ec/dpi6\r\n00\\ecti1095.pk> <C:\\Users\\admin\\AppData\\Local\\MiKTeX\\2.9\\fonts/pk/ljfour/jknapp\r\nen/ec/dpi600\\ecbx1095.pk> <C:\\Users\\admin\\AppData\\Local\\MiKTeX\\2.9\\fonts/pk/ljf\r\nour/jknappen/ec/dpi600\\eccc1095.pk> <C:\\Users\\admin\\AppData\\Local\\MiKTeX\\2.9\\fo\r\nnts/pk/ljfour/jknappen/ec/dpi600\\ecrm1095.pk> <C:\\Users\\admin\\AppData\\Local\\MiK\r\nTeX\\2.9\\fonts/pk/ljfour/jknappen/ec/dpi600\\ecrm1200.pk> <C:\\Users\\admin\\AppData\r\n\\Local\\MiKTeX\\2.9\\fonts/pk/ljfour/jknappen/ec/dpi600\\ecrm1728.pk><C:/Users/admi\r\nn/AppData/Local/Programs/MiKTeX 2.9/fonts/type1/public/amsfonts/cm/cmex10.pfb><\r\nC:/Users/admin/AppData/Local/Programs/MiKTeX 2.9/fonts/type1/public/amsfonts/cm\r\n/cmmi10.pfb><C:/Users/admin/AppData/Local/Programs/MiKTeX 2.9/fonts/type1/publi\r\nc/amsfonts/cm/cmmi8.pfb><C:/Users/admin/AppData/Local/Programs/MiKTeX 2.9/fonts\r\n/type1/public/amsfonts/cm/cmmib10.pfb><C:/Users/admin/AppData/Local/Programs/Mi\r\nKTeX 2.9/fonts/type1/public/amsfonts/cm/cmr10.pfb><C:/Users/admin/AppData/Local\r\n/Programs/MiKTeX 2.9/fonts/type1/public/amsfonts/cm/cmr6.pfb><C:/Users/admin/Ap\r\npData/Local/Programs/MiKTeX 2.9/fonts/type1/public/amsfonts/cm/cmr8.pfb><C:/Use\r\nrs/admin/AppData/Local/Programs/MiKTeX 2.9/fonts/type1/public/amsfonts/cm/cmsy1\r\n0.pfb><C:/Users/admin/AppData/Local/Programs/MiKTeX 2.9/fonts/type1/public/amsf\r\nonts/cm/cmsy6.pfb><C:/Users/admin/AppData/Local/Programs/MiKTeX 2.9/fonts/type1\r\n/public/amsfonts/cm/cmsy8.pfb>\r\nOutput written on C:/Users\\admin\\PycharmProjects\\MoCaDR_proj1\\out\\report.pdf (9\r\n pages, 581368 bytes).\r\nPDF statistics:\r\n 322 PDF objects out of 1000 (max. 8388607)\r\n 0 named destinations out of 1000 (max. 500000)\r\n 46 words of extra memory for PDF output out of 10000 (max. 10000000)\r\n\r\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/auxil/report.log b/auxil/report.log
---- a/auxil/report.log	(revision 4150129e7bd8166c8f9a24bbfc6601436329d089)
-+++ b/auxil/report.log	(date 1649603932360)
-@@ -1,4 +1,4 @@
--This is pdfTeX, Version 3.14159265-2.6-1.40.21 (MiKTeX 2.9.7300 64-bit) (preloaded format=pdflatex 2020.3.10)  9 APR 2022 22:27
-+This is pdfTeX, Version 3.14159265-2.6-1.40.21 (MiKTeX 2.9.7300 64-bit) (preloaded format=pdflatex 2020.3.10)  10 APR 2022 17:18
- entering extended mode
- **./report.tex
- (report.tex
-@@ -390,205 +390,97 @@
- <./fig/svd1_1.png, id=26, 544.9158pt x 329.5512pt>
- File: ./fig/svd1_1.png Graphic file (type png)
- <use ./fig/svd1_1.png>
--Package pdftex.def Info: ./fig/svd1_1.png  used on input line 191.
-+Package pdftex.def Info: ./fig/svd1_1.png  used on input line 206.
- (pdftex.def)             Requested size: 234.30922pt x 141.70424pt.
- 
--Overfull \hbox (19.30692pt too wide) in paragraph at lines 191--194
-+Overfull \hbox (19.30692pt too wide) in paragraph at lines 206--209
-  [][] 
-  []
- 
- <./fig/svd1_2.png, id=28, 412.6617pt x 329.5512pt>
- File: ./fig/svd1_2.png Graphic file (type png)
- <use ./fig/svd1_2.png>
--Package pdftex.def Info: ./fig/svd1_2.png  used on input line 197.
-+Package pdftex.def Info: ./fig/svd1_2.png  used on input line 212.
- (pdftex.def)             Requested size: 177.44106pt x 141.70424pt.
--[3 <./fig/svd1_1.png> <./fig/svd1_2.png>]
--<fig/svd1_r_w.png, id=34, 1084.05pt x 722.7pt>
-+[3]
-+<fig/svd1_r_w.png, id=32, 1084.05pt x 722.7pt>
- File: fig/svd1_r_w.png Graphic file (type png)
- <use fig/svd1_r_w.png>
--Package pdftex.def Info: fig/svd1_r_w.png  used on input line 231.
-+Package pdftex.def Info: fig/svd1_r_w.png  used on input line 258.
- (pdftex.def)             Requested size: 487.818pt x 325.21199pt.
- 
--Overfull \hbox (57.81337pt too wide) in paragraph at lines 231--233
-+Overfull \hbox (57.81337pt too wide) in paragraph at lines 258--260
-  [][] 
-  []
- 
--report.tex:238: Undefined control sequence.
--l.238 \toprule
--              
--The control sequence at the end of the top line
--of your error message was never \def'ed. If you have
--misspelled it (e.g., `\hobx'), type `I' and the correct
--spelling (e.g., `I\hbox'). Otherwise just continue,
--and I'll forget about whatever was undefined.
--
--report.tex:240: Undefined control sequence.
--<recently read> \midrule 
--                         
--l.240 \midrule
--              
--The control sequence at the end of the top line
--of your error message was never \def'ed. If you have
--misspelled it (e.g., `\hobx'), type `I' and the correct
--spelling (e.g., `I\hbox'). Otherwise just continue,
--and I'll forget about whatever was undefined.
--
--report.tex:247: Undefined control sequence.
--<recently read> \bottomrule 
--                            
--l.247 \bottomrule
--                 
--The control sequence at the end of the top line
--of your error message was never \def'ed. If you have
--misspelled it (e.g., `\hobx'), type `I' and the correct
--spelling (e.g., `I\hbox'). Otherwise just continue,
--and I'll forget about whatever was undefined.
--
--[4 <./fig/svd1_r_w.png>]
--<./fig/svd2_1.png, id=39, 544.9158pt x 329.5512pt>
-+[4 <./fig/svd1_1.png> <./fig/svd1_2.png>] [5 <./fig/svd1_r_w.png>]
-+<./fig/svd2_1.png, id=42, 544.9158pt x 329.5512pt>
- File: ./fig/svd2_1.png Graphic file (type png)
- <use ./fig/svd2_1.png>
--Package pdftex.def Info: ./fig/svd2_1.png  used on input line 277.
-+Package pdftex.def Info: ./fig/svd2_1.png  used on input line 307.
- (pdftex.def)             Requested size: 234.30922pt x 141.70424pt.
- 
--Overfull \hbox (19.30692pt too wide) in paragraph at lines 277--280
-+Overfull \hbox (19.30692pt too wide) in paragraph at lines 307--310
-  [][] 
-  []
- 
--<./fig/svd2_2.png, id=40, 412.6617pt x 329.5512pt>
-+<./fig/svd2_2.png, id=43, 412.6617pt x 329.5512pt>
- File: ./fig/svd2_2.png Graphic file (type png)
- <use ./fig/svd2_2.png>
--Package pdftex.def Info: ./fig/svd2_2.png  used on input line 283.
-+Package pdftex.def Info: ./fig/svd2_2.png  used on input line 313.
- (pdftex.def)             Requested size: 177.44106pt x 141.70424pt.
--<./fig/svd2_r_w.png, id=41, 1084.05pt x 722.7pt>
-+[6 <./fig/svd2_1.png> <./fig/svd2_2.png>]
-+<./fig/svd2_r_w.png, id=49, 1084.05pt x 722.7pt>
- File: ./fig/svd2_r_w.png Graphic file (type png)
- <use ./fig/svd2_r_w.png>
--Package pdftex.def Info: ./fig/svd2_r_w.png  used on input line 299.
-+Package pdftex.def Info: ./fig/svd2_r_w.png  used on input line 341.
- (pdftex.def)             Requested size: 487.818pt x 325.21199pt.
- 
--Overfull \hbox (57.81337pt too wide) in paragraph at lines 299--300
-+Overfull \hbox (57.81337pt too wide) in paragraph at lines 341--342
-  [][] 
-  []
- 
--[5 <./fig/svd2_1.png> <./fig/svd2_2.png>]
--report.tex:304: Undefined control sequence.
--l.304 \toprule
--              
--The control sequence at the end of the top line
--of your error message was never \def'ed. If you have
--misspelled it (e.g., `\hobx'), type `I' and the correct
--spelling (e.g., `I\hbox'). Otherwise just continue,
--and I'll forget about whatever was undefined.
--
--report.tex:306: Undefined control sequence.
--<recently read> \midrule 
--                         
--l.306 \midrule
--              
--The control sequence at the end of the top line
--of your error message was never \def'ed. If you have
--misspelled it (e.g., `\hobx'), type `I' and the correct
--spelling (e.g., `I\hbox'). Otherwise just continue,
--and I'll forget about whatever was undefined.
--
--report.tex:313: Undefined control sequence.
--<recently read> \bottomrule 
--                            
--l.313 \bottomrule
--                 
--The control sequence at the end of the top line
--of your error message was never \def'ed. If you have
--misspelled it (e.g., `\hobx'), type `I' and the correct
--spelling (e.g., `I\hbox'). Otherwise just continue,
--and I'll forget about whatever was undefined.
--
--<./fig/nmf_1.png, id=47, 544.9158pt x 329.5512pt>
-+[7 <./fig/svd2_r_w.png>]
-+<./fig/nmf_1.png, id=55, 544.9158pt x 329.5512pt>
- File: ./fig/nmf_1.png Graphic file (type png)
- <use ./fig/nmf_1.png>
--Package pdftex.def Info: ./fig/nmf_1.png  used on input line 326.
-+Package pdftex.def Info: ./fig/nmf_1.png  used on input line 378.
- (pdftex.def)             Requested size: 234.30922pt x 141.70424pt.
- 
--Overfull \hbox (19.30692pt too wide) in paragraph at lines 326--329
-+Overfull \hbox (19.30692pt too wide) in paragraph at lines 378--381
-  [][] 
-  []
- 
--<./fig/nmf_2.png, id=48, 412.6617pt x 329.5512pt>
-+<./fig/nmf_2.png, id=56, 412.6617pt x 329.5512pt>
- File: ./fig/nmf_2.png Graphic file (type png)
- <use ./fig/nmf_2.png>
--Package pdftex.def Info: ./fig/nmf_2.png  used on input line 332.
-+Package pdftex.def Info: ./fig/nmf_2.png  used on input line 384.
- (pdftex.def)             Requested size: 177.44106pt x 141.70424pt.
--
--Underfull \vbox (badness 4341) has occurred while \output is active []
--
-- [6 <./fig/svd2_r_w.png>]
--report.tex:353: Undefined control sequence.
--l.353 \toprule
--              
--The control sequence at the end of the top line
--of your error message was never \def'ed. If you have
--misspelled it (e.g., `\hobx'), type `I' and the correct
--spelling (e.g., `I\hbox'). Otherwise just continue,
--and I'll forget about whatever was undefined.
--
--report.tex:355: Undefined control sequence.
--<recently read> \midrule 
--                         
--l.355 \midrule
--              
--The control sequence at the end of the top line
--of your error message was never \def'ed. If you have
--misspelled it (e.g., `\hobx'), type `I' and the correct
--spelling (e.g., `I\hbox'). Otherwise just continue,
--and I'll forget about whatever was undefined.
--
--report.tex:362: Undefined control sequence.
--<recently read> \bottomrule 
--                            
--l.362 \bottomrule
--                 
--The control sequence at the end of the top line
--of your error message was never \def'ed. If you have
--misspelled it (e.g., `\hobx'), type `I' and the correct
--spelling (e.g., `I\hbox'). Otherwise just continue,
--and I'll forget about whatever was undefined.
--
--<./fig/nmf_r_w.png, id=53, 1084.05pt x 722.7pt>
-+[8 <./fig/nmf_1.png> <./fig/nmf_2.png>]
-+<./fig/nmf_r_w.png, id=62, 1084.05pt x 722.7pt>
- File: ./fig/nmf_r_w.png Graphic file (type png)
- <use ./fig/nmf_r_w.png>
--Package pdftex.def Info: ./fig/nmf_r_w.png  used on input line 372.
-+Package pdftex.def Info: ./fig/nmf_r_w.png  used on input line 412.
- (pdftex.def)             Requested size: 487.818pt x 325.21199pt.
- 
--Overfull \hbox (57.81337pt too wide) in paragraph at lines 372--373
-- [][] 
-- []
--
--
--Underfull \vbox (badness 1975) has occurred while \output is active []
--
-- [7 <./fig/nmf_1.png> <./fig/nmf_2.png>]
--File: ./fig/svd1_1.png Graphic file (type png)
--<use ./fig/svd1_1.png>
--Package pdftex.def Info: ./fig/svd1_1.png  used on input line 386.
--(pdftex.def)             Requested size: 234.30922pt x 141.70424pt.
--
--Overfull \hbox (19.30692pt too wide) in paragraph at lines 386--389
-+Overfull \hbox (57.81337pt too wide) in paragraph at lines 412--413
-  [][] 
-  []
- 
--File: ./fig/svd1_2.png Graphic file (type png)
--<use ./fig/svd1_2.png>
--Package pdftex.def Info: ./fig/svd1_2.png  used on input line 392.
--(pdftex.def)             Requested size: 177.44106pt x 141.70424pt.
--[8 <./fig/nmf_r_w.png>] [9]
-+
-+Underfull \vbox (badness 10000) has occurred while \output is active []
-+
-+ [9]
-+[10 <./fig/nmf_r_w.png>] [11]
- (C:/Users\admin\PycharmProjects\MoCaDR_proj1\auxil\report.aux) ) 
- Here is how much of TeX's memory you used:
-- 6283 strings out of 481556
-- 90971 string characters out of 2913869
-- 335988 words of memory out of 3000000
-- 21270 multiletter control sequences out of 15000+200000
-+ 6284 strings out of 481556
-+ 91021 string characters out of 2913869
-+ 336989 words of memory out of 3000000
-+ 21271 multiletter control sequences out of 15000+200000
-  552539 words of font info for 78 fonts, out of 3000000 for 9000
-  1302 hyphenation exceptions out of 8191
-- 39i,10n,43p,815b,294s stack positions out of 5000i,500n,10000p,200000b,50000s
-+ 39i,10n,43p,815b,310s stack positions out of 5000i,500n,10000p,200000b,50000s
-  <C:\Users\admi
- n\AppData\Local\MiKTeX\2.9\fonts/pk/ljfour/jknappen/ec/dpi600\ecss1095.pk> <C:\
- Users\admin\AppData\Local\MiKTeX\2.9\fonts/pk/ljfour/jknappen/ec/dpi600\ecrm080
-@@ -611,10 +503,10 @@
- 0.pfb><C:/Users/admin/AppData/Local/Programs/MiKTeX 2.9/fonts/type1/public/amsf
- onts/cm/cmsy6.pfb><C:/Users/admin/AppData/Local/Programs/MiKTeX 2.9/fonts/type1
- /public/amsfonts/cm/cmsy8.pfb>
--Output written on C:/Users\admin\PycharmProjects\MoCaDR_proj1\out\report.pdf (9
-- pages, 581368 bytes).
-+Output written on C:/Users\admin\PycharmProjects\MoCaDR_proj1\out\report.pdf (1
-+1 pages, 596520 bytes).
- PDF statistics:
-- 322 PDF objects out of 1000 (max. 8388607)
-+ 352 PDF objects out of 1000 (max. 8388607)
-  0 named destinations out of 1000 (max. 500000)
-  46 words of extra memory for PDF output out of 10000 (max. 10000000)
- 
-Index: src/presenting_results.ipynb
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>{\r\n \"cells\": [\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 1,\r\n   \"outputs\": [\r\n    {\r\n     \"data\": {\r\n      \"text/plain\": \"<Figure size 72x72 with 0 Axes>\"\r\n     },\r\n     \"metadata\": {},\r\n     \"output_type\": \"display_data\"\r\n    }\r\n   ],\r\n   \"source\": [\r\n    \"import pandas as pd\\n\",\r\n    \"import numpy as np\\n\",\r\n    \"from plotnine import *\\n\",\r\n    \"import patchworklib as pw\\n\",\r\n    \"import os\\n\",\r\n    \"from mpl_toolkits.mplot3d import Axes3D\\n\",\r\n    \"import matplotlib.pyplot as plt\\n\",\r\n    \"from matplotlib import cm\\n\",\r\n    \"from matplotlib.ticker import LinearLocator, FormatStrFormatter\\n\",\r\n    \"os.chdir('D:\\\\Studia\\\\MoCaDR_proj1')\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%%\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"# Results for many r’s\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%% md\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 2,\r\n   \"outputs\": [],\r\n   \"source\": [\r\n    \"# SVD1\\n\",\r\n    \"res_svd1 = pd.read_csv('Results/results_svd1.csv')\\n\",\r\n    \"res_svd1_long = pd.melt(res_svd1, id_vars=['r'], value_vars=res_svd1.columns[1:])\\n\",\r\n    \"best_r = res_svd1_long.iloc[res_svd1_long['value'].idxmin()]['r']\\n\",\r\n    \"best_rmse = res_svd1_long['value'].min()\\n\",\r\n    \"# SVD2\\n\",\r\n    \"res_svd2 = pd.read_csv('Results/results_svd2.csv')\\n\",\r\n    \"res_svd2_long = pd.melt(res_svd2, id_vars=['r'], value_vars=res_svd2.columns[1:])\\n\",\r\n    \"best_r2 = res_svd2_long.iloc[res_svd2_long['value'].idxmin()]['r']\\n\",\r\n    \"best_rmse2 = res_svd2_long['value'].min()\\n\",\r\n    \"# NMF\\n\",\r\n    \"res_nmf = pd.read_csv('Results/results_nmf.csv')\\n\",\r\n    \"res_nmf_long = pd.melt(res_nmf, id_vars=['r'], value_vars=res_nmf.columns[1:])\\n\",\r\n    \"best_r3 = res_nmf_long.iloc[res_nmf_long['value'].idxmin()]['r']\\n\",\r\n    \"best_rmse3 = res_nmf_long['value'].min()\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%%\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"## SVD 1\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%% md\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 47,\r\n   \"outputs\": [],\r\n   \"source\": [\r\n    \"plot_svd1_1 = ggplot(res_svd1_long) + \\\\\\n\",\r\n    \"    theme_bw() + \\\\\\n\",\r\n    \"    geom_line(aes(x='r', y='value', color='variable')) + \\\\\\n\",\r\n    \"    labs(y=\\\"RMSE\\\", color=\\\"Imputation method\\\", title=\\\"SVD1\\\") + \\\\\\n\",\r\n    \"    scale_color_manual(values=['#9A32CD', '#FF1493', '#66CD00', '#FF4040', '#00FFFF'],\\n\",\r\n    \"                       labels=['0', 'Column means', 'Global mean', 'Weighted means', 'Row means'])\\n\",\r\n    \"plot_svd1_2 = ggplot(res_svd1_long[res_svd1_long['variable'] != 'rmse_0']) + \\\\\\n\",\r\n    \"    theme_bw() + \\\\\\n\",\r\n    \"    geom_line(aes(x='r', y='value', color='variable')) + \\\\\\n\",\r\n    \"    labs(y=\\\"RMSE\\\", color=\\\"Imputation method\\\", title=\\\"SVD1\\\") + \\\\\\n\",\r\n    \"    scale_color_manual(values=['#FF1493', '#66CD00', '#FF4040', '#00FFFF'], labels=['Column means', 'Global mean', 'Weighted means', 'Row means']) + \\\\\\n\",\r\n    \"    theme(legend_position='none')\\n\",\r\n    \"plot_svd1_1.save('Report/fig/svd1_1.png')\\n\",\r\n    \"plot_svd1_2.save('Report/fig/svd1_2.png')\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%%\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"# SVD2\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%% md\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 48,\r\n   \"outputs\": [],\r\n   \"source\": [\r\n    \"plot_svd2_1 = ggplot(res_svd2_long) + \\\\\\n\",\r\n    \"    theme_bw() + \\\\\\n\",\r\n    \"    geom_line(aes(x='r', y='value', color='variable')) + \\\\\\n\",\r\n    \"    labs(y=\\\"RMSE\\\", color=\\\"Imputation method\\\", title=\\\"SVD2\\\") + \\\\\\n\",\r\n    \"    scale_color_manual(values=['#9A32CD', '#FF1493', '#66CD00', '#FF4040', '#00FFFF'],\\n\",\r\n    \"                       labels=['0', 'Column means', 'Global mean', 'Weighted means', 'Row means'])\\n\",\r\n    \"plot_svd2_2 = ggplot(res_svd2_long[res_svd2_long['variable'] != 'rmse_0']) + \\\\\\n\",\r\n    \"    theme_bw() + \\\\\\n\",\r\n    \"    geom_line(aes(x='r', y='value', color='variable')) + \\\\\\n\",\r\n    \"    labs(y=\\\"RMSE\\\", color=\\\"Imputation method\\\", title=\\\"SVD2\\\") + \\\\\\n\",\r\n    \"    scale_color_manual(values=['#FF1493', '#66CD00', '#FF4040', '#00FFFF'],\\n\",\r\n    \"                       labels=['Column means', 'Global mean', 'Weighted means', 'Row means']) + \\\\\\n\",\r\n    \"    theme(legend_position='none')\\n\",\r\n    \"plot_svd2_1.save('Report/fig/svd2_1.png')\\n\",\r\n    \"plot_svd2_2.save('Report/fig/svd2_2.png')\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%%\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 5,\r\n   \"outputs\": [\r\n    {\r\n     \"data\": {\r\n      \"text/plain\": \"       r        variable     value\\n0      1          rmse_0  3.095144\\n1      2          rmse_0  3.006560\\n2      3          rmse_0  2.943416\\n3      4          rmse_0  2.903454\\n4      5          rmse_0  2.877835\\n..   ...             ...       ...\\n495   96  rmse_col_means  0.957780\\n496   97  rmse_col_means  0.959530\\n497   98  rmse_col_means  0.958531\\n498   99  rmse_col_means  0.958267\\n499  100  rmse_col_means  0.959624\\n\\n[500 rows x 3 columns]\",\r\n      \"text/html\": \"<div>\\n<style scoped>\\n    .dataframe tbody tr th:only-of-type {\\n        vertical-align: middle;\\n    }\\n\\n    .dataframe tbody tr th {\\n        vertical-align: top;\\n    }\\n\\n    .dataframe thead th {\\n        text-align: right;\\n    }\\n</style>\\n<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n  <thead>\\n    <tr style=\\\"text-align: right;\\\">\\n      <th></th>\\n      <th>r</th>\\n      <th>variable</th>\\n      <th>value</th>\\n    </tr>\\n  </thead>\\n  <tbody>\\n    <tr>\\n      <th>0</th>\\n      <td>1</td>\\n      <td>rmse_0</td>\\n      <td>3.095144</td>\\n    </tr>\\n    <tr>\\n      <th>1</th>\\n      <td>2</td>\\n      <td>rmse_0</td>\\n      <td>3.006560</td>\\n    </tr>\\n    <tr>\\n      <th>2</th>\\n      <td>3</td>\\n      <td>rmse_0</td>\\n      <td>2.943416</td>\\n    </tr>\\n    <tr>\\n      <th>3</th>\\n      <td>4</td>\\n      <td>rmse_0</td>\\n      <td>2.903454</td>\\n    </tr>\\n    <tr>\\n      <th>4</th>\\n      <td>5</td>\\n      <td>rmse_0</td>\\n      <td>2.877835</td>\\n    </tr>\\n    <tr>\\n      <th>...</th>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n    </tr>\\n    <tr>\\n      <th>495</th>\\n      <td>96</td>\\n      <td>rmse_col_means</td>\\n      <td>0.957780</td>\\n    </tr>\\n    <tr>\\n      <th>496</th>\\n      <td>97</td>\\n      <td>rmse_col_means</td>\\n      <td>0.959530</td>\\n    </tr>\\n    <tr>\\n      <th>497</th>\\n      <td>98</td>\\n      <td>rmse_col_means</td>\\n      <td>0.958531</td>\\n    </tr>\\n    <tr>\\n      <th>498</th>\\n      <td>99</td>\\n      <td>rmse_col_means</td>\\n      <td>0.958267</td>\\n    </tr>\\n    <tr>\\n      <th>499</th>\\n      <td>100</td>\\n      <td>rmse_col_means</td>\\n      <td>0.959624</td>\\n    </tr>\\n  </tbody>\\n</table>\\n<p>500 rows × 3 columns</p>\\n</div>\"\r\n     },\r\n     \"execution_count\": 5,\r\n     \"metadata\": {},\r\n     \"output_type\": \"execute_result\"\r\n    }\r\n   ],\r\n   \"source\": [\r\n    \"n = 10\\n\",\r\n    \"res_svd2_long\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%%\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"# NMF\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%% md\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 49,\r\n   \"outputs\": [],\r\n   \"source\": [\r\n    \"plot_nmf_1 = ggplot(res_nmf_long) + \\\\\\n\",\r\n    \"    theme_bw() + \\\\\\n\",\r\n    \"    geom_line(aes(x='r', y='value', color='variable')) + \\\\\\n\",\r\n    \"    labs(y=\\\"RMSE\\\", color=\\\"Imputation method\\\", title=\\\"NMF\\\") + \\\\\\n\",\r\n    \"    scale_color_manual(values=['#9A32CD', '#FF1493', '#66CD00', '#FF4040', '#00FFFF'],\\n\",\r\n    \"                       labels=['0', 'Column means', 'Global mean', 'Weighted means', 'Row means'])\\n\",\r\n    \"plot_nmf_2 = ggplot(res_nmf_long[res_nmf_long['variable'] != 'rmse_0']) + \\\\\\n\",\r\n    \"    theme_bw() + \\\\\\n\",\r\n    \"    geom_line(aes(x='r', y='value', color='variable')) + \\\\\\n\",\r\n    \"    labs(y=\\\"RMSE\\\", color=\\\"Imputation method\\\", title=\\\"NMF\\\") + \\\\\\n\",\r\n    \"    scale_color_manual(values=['#FF1493', '#66CD00', '#FF4040', '#00FFFF'],\\n\",\r\n    \"                       labels=['Column means', 'Global mean', 'Weighted means', 'Row means']) + \\\\\\n\",\r\n    \"    theme(legend_position='none')\\n\",\r\n    \"plot_nmf_1.save('Report/fig/nmf_1.png')\\n\",\r\n    \"plot_nmf_2.save('Report/fig/nmf_2.png')\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%%\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"# Stop condition for SVD2\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%% md\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 7,\r\n   \"outputs\": [],\r\n   \"source\": [\r\n    \"res_svd2_stop = pd.read_csv('Results/results_stop_svd2.csv')\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%%\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 8,\r\n   \"outputs\": [\r\n    {\r\n     \"data\": {\r\n      \"text/plain\": \"       stop   r      RMSE\\n378  0.0086   9  0.879578\\n356  0.0085   9  0.880032\\n400  0.0087   9  0.880051\\n421  0.0088   8  0.880321\\n232  0.0079  17  0.880356\\n399  0.0087   8  0.880363\\n210  0.0078  17  0.880485\\n299  0.0082  18  0.880578\\n275  0.0081  16  0.880597\\n384  0.0086  15  0.880600\",\r\n      \"text/html\": \"<div>\\n<style scoped>\\n    .dataframe tbody tr th:only-of-type {\\n        vertical-align: middle;\\n    }\\n\\n    .dataframe tbody tr th {\\n        vertical-align: top;\\n    }\\n\\n    .dataframe thead th {\\n        text-align: right;\\n    }\\n</style>\\n<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n  <thead>\\n    <tr style=\\\"text-align: right;\\\">\\n      <th></th>\\n      <th>stop</th>\\n      <th>r</th>\\n      <th>RMSE</th>\\n    </tr>\\n  </thead>\\n  <tbody>\\n    <tr>\\n      <th>378</th>\\n      <td>0.0086</td>\\n      <td>9</td>\\n      <td>0.879578</td>\\n    </tr>\\n    <tr>\\n      <th>356</th>\\n      <td>0.0085</td>\\n      <td>9</td>\\n      <td>0.880032</td>\\n    </tr>\\n    <tr>\\n      <th>400</th>\\n      <td>0.0087</td>\\n      <td>9</td>\\n      <td>0.880051</td>\\n    </tr>\\n    <tr>\\n      <th>421</th>\\n      <td>0.0088</td>\\n      <td>8</td>\\n      <td>0.880321</td>\\n    </tr>\\n    <tr>\\n      <th>232</th>\\n      <td>0.0079</td>\\n      <td>17</td>\\n      <td>0.880356</td>\\n    </tr>\\n    <tr>\\n      <th>399</th>\\n      <td>0.0087</td>\\n      <td>8</td>\\n      <td>0.880363</td>\\n    </tr>\\n    <tr>\\n      <th>210</th>\\n      <td>0.0078</td>\\n      <td>17</td>\\n      <td>0.880485</td>\\n    </tr>\\n    <tr>\\n      <th>299</th>\\n      <td>0.0082</td>\\n      <td>18</td>\\n      <td>0.880578</td>\\n    </tr>\\n    <tr>\\n      <th>275</th>\\n      <td>0.0081</td>\\n      <td>16</td>\\n      <td>0.880597</td>\\n    </tr>\\n    <tr>\\n      <th>384</th>\\n      <td>0.0086</td>\\n      <td>15</td>\\n      <td>0.880600</td>\\n    </tr>\\n  </tbody>\\n</table>\\n</div>\"\r\n     },\r\n     \"execution_count\": 8,\r\n     \"metadata\": {},\r\n     \"output_type\": \"execute_result\"\r\n    }\r\n   ],\r\n   \"source\": [\r\n    \"n = 10\\n\",\r\n    \"res_svd2_stop.loc[res_svd2_stop.apply(lambda x: pd.Series(x.nsmallest(n).index))['RMSE']]\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%%\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 9,\r\n   \"outputs\": [\r\n    {\r\n     \"data\": {\r\n      \"text/plain\": \"<matplotlib.colorbar.Colorbar at 0x230fac76c50>\"\r\n     },\r\n     \"execution_count\": 9,\r\n     \"metadata\": {},\r\n     \"output_type\": \"execute_result\"\r\n    },\r\n    {\r\n     \"data\": {\r\n      \"text/plain\": \"<Figure size 1080x720 with 2 Axes>\",\r\n      \"image/png\": \"\\n\"\r\n     },\r\n     \"metadata\": {\r\n      \"needs_background\": \"light\"\r\n     },\r\n     \"output_type\": \"display_data\"\r\n    }\r\n   ],\r\n   \"source\": [\r\n    \"X, Y, Z = res_svd2_stop.T.values\\n\",\r\n    \"fig = plt.figure(figsize=(15,10))\\n\",\r\n    \"ax = fig.gca(projection='3d')\\n\",\r\n    \"surf = ax.plot_trisurf(X, Y, Z, cmap=cm.coolwarm, edgecolor ='black', linewidth=0.005, antialiased=False)\\n\",\r\n    \"# Add a color bar which maps values to colors.\\n\",\r\n    \"fig.colorbar(surf, shrink=0.5, aspect=20)\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%%\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"# Two-dimensional minimization: r, col_weight\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%% md\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 10,\r\n   \"outputs\": [],\r\n   \"source\": [\r\n    \"res_svd1_3d = pd.read_csv('Results/results_r_w_svd1.csv')\\n\",\r\n    \"res_svd2_3d = pd.read_csv('Results/results_r_w_svd2.csv')\\n\",\r\n    \"res_nmf_3d = pd.read_csv('Results/results_r_w_nmf.csv')\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%%\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"## SVD1\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%% md\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 18,\r\n   \"outputs\": [\r\n    {\r\n     \"data\": {\r\n      \"text/plain\": \"     col_weight   r      RMSE\\n423        0.39  10  0.873987\\n401        0.38  10  0.874244\\n489        0.42  10  0.874274\\n357        0.36  10  0.874449\\n424        0.39  11  0.874469\\n379        0.37  10  0.874475\\n467        0.41  10  0.874490\\n445        0.40  10  0.874498\\n466        0.41   9  0.874507\\n470        0.41  13  0.874532\",\r\n      \"text/html\": \"<div>\\n<style scoped>\\n    .dataframe tbody tr th:only-of-type {\\n        vertical-align: middle;\\n    }\\n\\n    .dataframe tbody tr th {\\n        vertical-align: top;\\n    }\\n\\n    .dataframe thead th {\\n        text-align: right;\\n    }\\n</style>\\n<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n  <thead>\\n    <tr style=\\\"text-align: right;\\\">\\n      <th></th>\\n      <th>col_weight</th>\\n      <th>r</th>\\n      <th>RMSE</th>\\n    </tr>\\n  </thead>\\n  <tbody>\\n    <tr>\\n      <th>423</th>\\n      <td>0.39</td>\\n      <td>10</td>\\n      <td>0.873987</td>\\n    </tr>\\n    <tr>\\n      <th>401</th>\\n      <td>0.38</td>\\n      <td>10</td>\\n      <td>0.874244</td>\\n    </tr>\\n    <tr>\\n      <th>489</th>\\n      <td>0.42</td>\\n      <td>10</td>\\n      <td>0.874274</td>\\n    </tr>\\n    <tr>\\n      <th>357</th>\\n      <td>0.36</td>\\n      <td>10</td>\\n      <td>0.874449</td>\\n    </tr>\\n    <tr>\\n      <th>424</th>\\n      <td>0.39</td>\\n      <td>11</td>\\n      <td>0.874469</td>\\n    </tr>\\n    <tr>\\n      <th>379</th>\\n      <td>0.37</td>\\n      <td>10</td>\\n      <td>0.874475</td>\\n    </tr>\\n    <tr>\\n      <th>467</th>\\n      <td>0.41</td>\\n      <td>10</td>\\n      <td>0.874490</td>\\n    </tr>\\n    <tr>\\n      <th>445</th>\\n      <td>0.40</td>\\n      <td>10</td>\\n      <td>0.874498</td>\\n    </tr>\\n    <tr>\\n      <th>466</th>\\n      <td>0.41</td>\\n      <td>9</td>\\n      <td>0.874507</td>\\n    </tr>\\n    <tr>\\n      <th>470</th>\\n      <td>0.41</td>\\n      <td>13</td>\\n      <td>0.874532</td>\\n    </tr>\\n  </tbody>\\n</table>\\n</div>\"\r\n     },\r\n     \"execution_count\": 18,\r\n     \"metadata\": {},\r\n     \"output_type\": \"execute_result\"\r\n    }\r\n   ],\r\n   \"source\": [\r\n    \"n = 10\\n\",\r\n    \"res_svd1_3d.loc[res_svd1_3d.apply(lambda x: pd.Series(x.nsmallest(n).index))['RMSE']]\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%%\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 12,\r\n   \"outputs\": [\r\n    {\r\n     \"data\": {\r\n      \"text/plain\": \"<Figure size 1080x720 with 2 Axes>\",\r\n      \"image/png\": \"\\n\"\r\n     },\r\n     \"metadata\": {\r\n      \"needs_background\": \"light\"\r\n     },\r\n     \"output_type\": \"display_data\"\r\n    }\r\n   ],\r\n   \"source\": [\r\n    \"X, Y, Z = res_svd1_3d.T.values\\n\",\r\n    \"fig = plt.figure(figsize=(15,10))\\n\",\r\n    \"ax = fig.gca(projection='3d')\\n\",\r\n    \"surf = ax.plot_trisurf(X, Y, Z, cmap=cm.coolwarm, edgecolor ='black', linewidth=0, antialiased=False)\\n\",\r\n    \"# Add a color bar which maps values to colors.\\n\",\r\n    \"fig.colorbar(surf, shrink=0.5, aspect=20)\\n\",\r\n    \"ax.set_xlabel('Column weight', fontsize=17, color='red', labelpad=10)\\n\",\r\n    \"ax.set_ylabel('$r$', fontsize=17, color='red', labelpad=10)\\n\",\r\n    \"ax.set_zlabel('RMSE', rotation=-90, fontsize=17, color='red', labelpad=10)\\n\",\r\n    \"plt.savefig('Report/fig/svd1_r_w.png')\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%%\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"## SVD2\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%% md\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 13,\r\n   \"outputs\": [\r\n    {\r\n     \"data\": {\r\n      \"text/plain\": \"     col_weight  r      RMSE\\n73         0.25  8  0.867393\\n87         0.26  8  0.867397\\n59         0.24  8  0.867402\\n101        0.27  8  0.867410\\n115        0.28  8  0.867494\\n45         0.23  8  0.867501\\n31         0.22  8  0.867509\\n129        0.29  8  0.867578\\n17         0.21  8  0.867675\\n143        0.30  8  0.867697\",\r\n      \"text/html\": \"<div>\\n<style scoped>\\n    .dataframe tbody tr th:only-of-type {\\n        vertical-align: middle;\\n    }\\n\\n    .dataframe tbody tr th {\\n        vertical-align: top;\\n    }\\n\\n    .dataframe thead th {\\n        text-align: right;\\n    }\\n</style>\\n<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n  <thead>\\n    <tr style=\\\"text-align: right;\\\">\\n      <th></th>\\n      <th>col_weight</th>\\n      <th>r</th>\\n      <th>RMSE</th>\\n    </tr>\\n  </thead>\\n  <tbody>\\n    <tr>\\n      <th>73</th>\\n      <td>0.25</td>\\n      <td>8</td>\\n      <td>0.867393</td>\\n    </tr>\\n    <tr>\\n      <th>87</th>\\n      <td>0.26</td>\\n      <td>8</td>\\n      <td>0.867397</td>\\n    </tr>\\n    <tr>\\n      <th>59</th>\\n      <td>0.24</td>\\n      <td>8</td>\\n      <td>0.867402</td>\\n    </tr>\\n    <tr>\\n      <th>101</th>\\n      <td>0.27</td>\\n      <td>8</td>\\n      <td>0.867410</td>\\n    </tr>\\n    <tr>\\n      <th>115</th>\\n      <td>0.28</td>\\n      <td>8</td>\\n      <td>0.867494</td>\\n    </tr>\\n    <tr>\\n      <th>45</th>\\n      <td>0.23</td>\\n      <td>8</td>\\n      <td>0.867501</td>\\n    </tr>\\n    <tr>\\n      <th>31</th>\\n      <td>0.22</td>\\n      <td>8</td>\\n      <td>0.867509</td>\\n    </tr>\\n    <tr>\\n      <th>129</th>\\n      <td>0.29</td>\\n      <td>8</td>\\n      <td>0.867578</td>\\n    </tr>\\n    <tr>\\n      <th>17</th>\\n      <td>0.21</td>\\n      <td>8</td>\\n      <td>0.867675</td>\\n    </tr>\\n    <tr>\\n      <th>143</th>\\n      <td>0.30</td>\\n      <td>8</td>\\n      <td>0.867697</td>\\n    </tr>\\n  </tbody>\\n</table>\\n</div>\"\r\n     },\r\n     \"execution_count\": 13,\r\n     \"metadata\": {},\r\n     \"output_type\": \"execute_result\"\r\n    }\r\n   ],\r\n   \"source\": [\r\n    \"n = 10\\n\",\r\n    \"res_svd2_3d.loc[res_svd2_3d.apply(lambda x: pd.Series(x.nsmallest(n).index))['RMSE']]\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%%\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 14,\r\n   \"outputs\": [\r\n    {\r\n     \"data\": {\r\n      \"text/plain\": \"<Figure size 1080x720 with 2 Axes>\",\r\n      \"image/png\": \"\\n\"\r\n     },\r\n     \"metadata\": {\r\n      \"needs_background\": \"light\"\r\n     },\r\n     \"output_type\": \"display_data\"\r\n    }\r\n   ],\r\n   \"source\": [\r\n    \"X2, Y2, Z2 = res_svd2_3d.T.values\\n\",\r\n    \"fig = plt.figure(figsize=(15,10))\\n\",\r\n    \"ax = fig.gca(projection='3d')\\n\",\r\n    \"surf = ax.plot_trisurf(X2, Y2, Z2, cmap=cm.coolwarm, edgecolor ='black', linewidth=0, antialiased=False)\\n\",\r\n    \"# Add a color bar which maps values to colors.\\n\",\r\n    \"fig.colorbar(surf, shrink=0.5, aspect=20)\\n\",\r\n    \"ax.set_xlabel('Column weight', fontsize=17, color='red', labelpad=10)\\n\",\r\n    \"ax.set_ylabel('$r$', fontsize=17, color='red', labelpad=10)\\n\",\r\n    \"ax.set_zlabel('RMSE', rotation=-90, fontsize=17, color='red', labelpad=10)\\n\",\r\n    \"plt.savefig('Report/fig/svd2_r_w.png')\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%%\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"## NMF\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%% md\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 19,\r\n   \"outputs\": [\r\n    {\r\n     \"data\": {\r\n      \"text/plain\": \"     col_weight   r      RMSE\\n884        0.40  37  0.874794\\n927        0.41  37  0.874817\\n822        0.39  18  0.874841\\n841        0.39  37  0.874848\\n865        0.40  18  0.874849\\n779        0.38  18  0.874881\\n970        0.42  37  0.874892\\n908        0.41  18  0.874909\\n736        0.37  18  0.874958\\n798        0.38  37  0.874959\",\r\n      \"text/html\": \"<div>\\n<style scoped>\\n    .dataframe tbody tr th:only-of-type {\\n        vertical-align: middle;\\n    }\\n\\n    .dataframe tbody tr th {\\n        vertical-align: top;\\n    }\\n\\n    .dataframe thead th {\\n        text-align: right;\\n    }\\n</style>\\n<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n  <thead>\\n    <tr style=\\\"text-align: right;\\\">\\n      <th></th>\\n      <th>col_weight</th>\\n      <th>r</th>\\n      <th>RMSE</th>\\n    </tr>\\n  </thead>\\n  <tbody>\\n    <tr>\\n      <th>884</th>\\n      <td>0.40</td>\\n      <td>37</td>\\n      <td>0.874794</td>\\n    </tr>\\n    <tr>\\n      <th>927</th>\\n      <td>0.41</td>\\n      <td>37</td>\\n      <td>0.874817</td>\\n    </tr>\\n    <tr>\\n      <th>822</th>\\n      <td>0.39</td>\\n      <td>18</td>\\n      <td>0.874841</td>\\n    </tr>\\n    <tr>\\n      <th>841</th>\\n      <td>0.39</td>\\n      <td>37</td>\\n      <td>0.874848</td>\\n    </tr>\\n    <tr>\\n      <th>865</th>\\n      <td>0.40</td>\\n      <td>18</td>\\n      <td>0.874849</td>\\n    </tr>\\n    <tr>\\n      <th>779</th>\\n      <td>0.38</td>\\n      <td>18</td>\\n      <td>0.874881</td>\\n    </tr>\\n    <tr>\\n      <th>970</th>\\n      <td>0.42</td>\\n      <td>37</td>\\n      <td>0.874892</td>\\n    </tr>\\n    <tr>\\n      <th>908</th>\\n      <td>0.41</td>\\n      <td>18</td>\\n      <td>0.874909</td>\\n    </tr>\\n    <tr>\\n      <th>736</th>\\n      <td>0.37</td>\\n      <td>18</td>\\n      <td>0.874958</td>\\n    </tr>\\n    <tr>\\n      <th>798</th>\\n      <td>0.38</td>\\n      <td>37</td>\\n      <td>0.874959</td>\\n    </tr>\\n  </tbody>\\n</table>\\n</div>\"\r\n     },\r\n     \"execution_count\": 19,\r\n     \"metadata\": {},\r\n     \"output_type\": \"execute_result\"\r\n    }\r\n   ],\r\n   \"source\": [\r\n    \"n = 10\\n\",\r\n    \"res_nmf_3d.loc[res_nmf_3d.apply(lambda x: pd.Series(x.nsmallest(n).index))['RMSE']]\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%%\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 50,\r\n   \"outputs\": [\r\n    {\r\n     \"data\": {\r\n      \"text/plain\": \"<Figure size 1080x720 with 2 Axes>\",\r\n      \"image/png\": \"\\n\"\r\n     },\r\n     \"metadata\": {\r\n      \"needs_background\": \"light\"\r\n     },\r\n     \"output_type\": \"display_data\"\r\n    }\r\n   ],\r\n   \"source\": [\r\n    \"X3, Y3, Z3 = res_nmf_3d.T.values\\n\",\r\n    \"fig = plt.figure(figsize=(15, 10))\\n\",\r\n    \"ax = fig.gca(projection='3d')\\n\",\r\n    \"surf = ax.plot_trisurf(X3, Y3, Z3, cmap=cm.coolwarm, edgecolor='black', linewidth=0, antialiased=False)\\n\",\r\n    \"# Add a color bar which maps values to colors.\\n\",\r\n    \"fig.colorbar(surf, shrink=0.5, aspect=20)\\n\",\r\n    \"ax.set_xlabel('Column weight', fontsize=17, color='red', labelpad=10)\\n\",\r\n    \"ax.set_ylabel('$r$', fontsize=17, color='red', labelpad=10)\\n\",\r\n    \"ax.set_zlabel('RMSE', rotation=-90, fontsize=17, color='red', labelpad=10)\\n\",\r\n    \"plt.savefig('Report/fig/nmf_r_w.png')\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%%\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"# Repeating for different splits\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%% md\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 51,\r\n   \"outputs\": [],\r\n   \"source\": [\r\n    \"res_svd1_reps = pd.read_csv('Results/results_reps_svd1.csv')\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%%\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 56,\r\n   \"outputs\": [\r\n    {\r\n     \"data\": {\r\n      \"text/plain\": \"     rep  weight     r      RMSE\\n5      1    0.37  10.0  0.878849\\n19     2    0.41  13.0  0.871667\\n21     3    0.38  10.0  0.883794\\n39     4    0.41  13.0  0.865293\\n49     5    0.41  13.0  0.885750\\n59     6    0.41  13.0  0.868848\\n69     7    0.41  13.0  0.878588\\n79     8    0.41  13.0  0.887374\\n88     9    0.41   9.0  0.879621\\n99    10    0.41  13.0  0.867972\\n109   11    0.41  13.0  0.877385\\n119   12    0.41  13.0  0.872681\\n124   13    0.39  11.0  0.879833\\n139   14    0.41  13.0  0.872548\\n149   15    0.41  13.0  0.888480\\n159   16    0.41  13.0  0.867906\\n168   17    0.41   9.0  0.868453\\n179   18    0.41  13.0  0.867510\\n189   19    0.41  13.0  0.873485\\n199   20    0.41  13.0  0.879318\",\r\n      \"text/html\": \"<div>\\n<style scoped>\\n    .dataframe tbody tr th:only-of-type {\\n        vertical-align: middle;\\n    }\\n\\n    .dataframe tbody tr th {\\n        vertical-align: top;\\n    }\\n\\n    .dataframe thead th {\\n        text-align: right;\\n    }\\n</style>\\n<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n  <thead>\\n    <tr style=\\\"text-align: right;\\\">\\n      <th></th>\\n      <th>rep</th>\\n      <th>weight</th>\\n      <th>r</th>\\n      <th>RMSE</th>\\n    </tr>\\n  </thead>\\n  <tbody>\\n    <tr>\\n      <th>5</th>\\n      <td>1</td>\\n      <td>0.37</td>\\n      <td>10.0</td>\\n      <td>0.878849</td>\\n    </tr>\\n    <tr>\\n      <th>19</th>\\n      <td>2</td>\\n      <td>0.41</td>\\n      <td>13.0</td>\\n      <td>0.871667</td>\\n    </tr>\\n    <tr>\\n      <th>21</th>\\n      <td>3</td>\\n      <td>0.38</td>\\n      <td>10.0</td>\\n      <td>0.883794</td>\\n    </tr>\\n    <tr>\\n      <th>39</th>\\n      <td>4</td>\\n      <td>0.41</td>\\n      <td>13.0</td>\\n      <td>0.865293</td>\\n    </tr>\\n    <tr>\\n      <th>49</th>\\n      <td>5</td>\\n      <td>0.41</td>\\n      <td>13.0</td>\\n      <td>0.885750</td>\\n    </tr>\\n    <tr>\\n      <th>59</th>\\n      <td>6</td>\\n      <td>0.41</td>\\n      <td>13.0</td>\\n      <td>0.868848</td>\\n    </tr>\\n    <tr>\\n      <th>69</th>\\n      <td>7</td>\\n      <td>0.41</td>\\n      <td>13.0</td>\\n      <td>0.878588</td>\\n    </tr>\\n    <tr>\\n      <th>79</th>\\n      <td>8</td>\\n      <td>0.41</td>\\n      <td>13.0</td>\\n      <td>0.887374</td>\\n    </tr>\\n    <tr>\\n      <th>88</th>\\n      <td>9</td>\\n      <td>0.41</td>\\n      <td>9.0</td>\\n      <td>0.879621</td>\\n    </tr>\\n    <tr>\\n      <th>99</th>\\n      <td>10</td>\\n      <td>0.41</td>\\n      <td>13.0</td>\\n      <td>0.867972</td>\\n    </tr>\\n    <tr>\\n      <th>109</th>\\n      <td>11</td>\\n      <td>0.41</td>\\n      <td>13.0</td>\\n      <td>0.877385</td>\\n    </tr>\\n    <tr>\\n      <th>119</th>\\n      <td>12</td>\\n      <td>0.41</td>\\n      <td>13.0</td>\\n      <td>0.872681</td>\\n    </tr>\\n    <tr>\\n      <th>124</th>\\n      <td>13</td>\\n      <td>0.39</td>\\n      <td>11.0</td>\\n      <td>0.879833</td>\\n    </tr>\\n    <tr>\\n      <th>139</th>\\n      <td>14</td>\\n      <td>0.41</td>\\n      <td>13.0</td>\\n      <td>0.872548</td>\\n    </tr>\\n    <tr>\\n      <th>149</th>\\n      <td>15</td>\\n      <td>0.41</td>\\n      <td>13.0</td>\\n      <td>0.888480</td>\\n    </tr>\\n    <tr>\\n      <th>159</th>\\n      <td>16</td>\\n      <td>0.41</td>\\n      <td>13.0</td>\\n      <td>0.867906</td>\\n    </tr>\\n    <tr>\\n      <th>168</th>\\n      <td>17</td>\\n      <td>0.41</td>\\n      <td>9.0</td>\\n      <td>0.868453</td>\\n    </tr>\\n    <tr>\\n      <th>179</th>\\n      <td>18</td>\\n      <td>0.41</td>\\n      <td>13.0</td>\\n      <td>0.867510</td>\\n    </tr>\\n    <tr>\\n      <th>189</th>\\n      <td>19</td>\\n      <td>0.41</td>\\n      <td>13.0</td>\\n      <td>0.873485</td>\\n    </tr>\\n    <tr>\\n      <th>199</th>\\n      <td>20</td>\\n      <td>0.41</td>\\n      <td>13.0</td>\\n      <td>0.879318</td>\\n    </tr>\\n  </tbody>\\n</table>\\n</div>\"\r\n     },\r\n     \"execution_count\": 56,\r\n     \"metadata\": {},\r\n     \"output_type\": \"execute_result\"\r\n    }\r\n   ],\r\n   \"source\": [\r\n    \"res_svd1_reps.loc[res_svd1_reps.groupby('rep').idxmin()['RMSE']]\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%%\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 52,\r\n   \"outputs\": [\r\n    {\r\n     \"data\": {\r\n      \"text/plain\": \"     rep  weight     r      RMSE\\n39     4    0.41  13.0  0.865293\\n30     4    0.39  10.0  0.865373\\n33     4    0.36  10.0  0.865408\\n31     4    0.38  10.0  0.865569\\n34     4    0.39  11.0  0.865717\\n35     4    0.37  10.0  0.866763\\n37     4    0.40  10.0  0.867131\\n179   18    0.41  13.0  0.867510\\n32     4    0.42  10.0  0.867536\\n36     4    0.41  10.0  0.867569\",\r\n      \"text/html\": \"<div>\\n<style scoped>\\n    .dataframe tbody tr th:only-of-type {\\n        vertical-align: middle;\\n    }\\n\\n    .dataframe tbody tr th {\\n        vertical-align: top;\\n    }\\n\\n    .dataframe thead th {\\n        text-align: right;\\n    }\\n</style>\\n<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n  <thead>\\n    <tr style=\\\"text-align: right;\\\">\\n      <th></th>\\n      <th>rep</th>\\n      <th>weight</th>\\n      <th>r</th>\\n      <th>RMSE</th>\\n    </tr>\\n  </thead>\\n  <tbody>\\n    <tr>\\n      <th>39</th>\\n      <td>4</td>\\n      <td>0.41</td>\\n      <td>13.0</td>\\n      <td>0.865293</td>\\n    </tr>\\n    <tr>\\n      <th>30</th>\\n      <td>4</td>\\n      <td>0.39</td>\\n      <td>10.0</td>\\n      <td>0.865373</td>\\n    </tr>\\n    <tr>\\n      <th>33</th>\\n      <td>4</td>\\n      <td>0.36</td>\\n      <td>10.0</td>\\n      <td>0.865408</td>\\n    </tr>\\n    <tr>\\n      <th>31</th>\\n      <td>4</td>\\n      <td>0.38</td>\\n      <td>10.0</td>\\n      <td>0.865569</td>\\n    </tr>\\n    <tr>\\n      <th>34</th>\\n      <td>4</td>\\n      <td>0.39</td>\\n      <td>11.0</td>\\n      <td>0.865717</td>\\n    </tr>\\n    <tr>\\n      <th>35</th>\\n      <td>4</td>\\n      <td>0.37</td>\\n      <td>10.0</td>\\n      <td>0.866763</td>\\n    </tr>\\n    <tr>\\n      <th>37</th>\\n      <td>4</td>\\n      <td>0.40</td>\\n      <td>10.0</td>\\n      <td>0.867131</td>\\n    </tr>\\n    <tr>\\n      <th>179</th>\\n      <td>18</td>\\n      <td>0.41</td>\\n      <td>13.0</td>\\n      <td>0.867510</td>\\n    </tr>\\n    <tr>\\n      <th>32</th>\\n      <td>4</td>\\n      <td>0.42</td>\\n      <td>10.0</td>\\n      <td>0.867536</td>\\n    </tr>\\n    <tr>\\n      <th>36</th>\\n      <td>4</td>\\n      <td>0.41</td>\\n      <td>10.0</td>\\n      <td>0.867569</td>\\n    </tr>\\n  </tbody>\\n</table>\\n</div>\"\r\n     },\r\n     \"execution_count\": 52,\r\n     \"metadata\": {},\r\n     \"output_type\": \"execute_result\"\r\n    }\r\n   ],\r\n   \"source\": [\r\n    \"n = 10\\n\",\r\n    \"res_svd1_reps.loc[res_svd1_reps.apply(lambda x: pd.Series(x.nsmallest(n).index))['RMSE']]\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%%\\n\"\r\n    }\r\n   }\r\n  }\r\n ],\r\n \"metadata\": {\r\n  \"kernelspec\": {\r\n   \"display_name\": \"Python 3\",\r\n   \"language\": \"python\",\r\n   \"name\": \"python3\"\r\n  },\r\n  \"language_info\": {\r\n   \"codemirror_mode\": {\r\n    \"name\": \"ipython\",\r\n    \"version\": 2\r\n   },\r\n   \"file_extension\": \".py\",\r\n   \"mimetype\": \"text/x-python\",\r\n   \"name\": \"python\",\r\n   \"nbconvert_exporter\": \"python\",\r\n   \"pygments_lexer\": \"ipython2\",\r\n   \"version\": \"2.7.6\"\r\n  }\r\n },\r\n \"nbformat\": 4,\r\n \"nbformat_minor\": 0\r\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/src/presenting_results.ipynb b/src/presenting_results.ipynb
---- a/src/presenting_results.ipynb	(revision 4150129e7bd8166c8f9a24bbfc6601436329d089)
-+++ b/src/presenting_results.ipynb	(date 1649596391857)
-@@ -2,16 +2,8 @@
-  "cells": [
-   {
-    "cell_type": "code",
--   "execution_count": 1,
--   "outputs": [
--    {
--     "data": {
--      "text/plain": "<Figure size 72x72 with 0 Axes>"
--     },
--     "metadata": {},
--     "output_type": "display_data"
--    }
--   ],
-+   "execution_count": 4,
-+   "outputs": [],
-    "source": [
-     "import pandas as pd\n",
-     "import numpy as np\n",
-@@ -22,7 +14,7 @@
-     "import matplotlib.pyplot as plt\n",
-     "from matplotlib import cm\n",
-     "from matplotlib.ticker import LinearLocator, FormatStrFormatter\n",
--    "os.chdir('D:\\Studia\\MoCaDR_proj1')"
-+    "os.chdir('../')"
-    ],
-    "metadata": {
-     "collapsed": false,
-@@ -45,7 +37,7 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 2,
-+   "execution_count": null,
-    "outputs": [],
-    "source": [
-     "# SVD1\n",
-@@ -85,7 +77,7 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 47,
-+   "execution_count": null,
-    "outputs": [],
-    "source": [
-     "plot_svd1_1 = ggplot(res_svd1_long) + \\\n",
-@@ -124,7 +116,7 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 48,
-+   "execution_count": null,
-    "outputs": [],
-    "source": [
-     "plot_svd2_1 = ggplot(res_svd2_long) + \\\n",
-@@ -152,18 +144,8 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 5,
--   "outputs": [
--    {
--     "data": {
--      "text/plain": "       r        variable     value\n0      1          rmse_0  3.095144\n1      2          rmse_0  3.006560\n2      3          rmse_0  2.943416\n3      4          rmse_0  2.903454\n4      5          rmse_0  2.877835\n..   ...             ...       ...\n495   96  rmse_col_means  0.957780\n496   97  rmse_col_means  0.959530\n497   98  rmse_col_means  0.958531\n498   99  rmse_col_means  0.958267\n499  100  rmse_col_means  0.959624\n\n[500 rows x 3 columns]",
--      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>r</th>\n      <th>variable</th>\n      <th>value</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>rmse_0</td>\n      <td>3.095144</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>rmse_0</td>\n      <td>3.006560</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>rmse_0</td>\n      <td>2.943416</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>rmse_0</td>\n      <td>2.903454</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>rmse_0</td>\n      <td>2.877835</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>495</th>\n      <td>96</td>\n      <td>rmse_col_means</td>\n      <td>0.957780</td>\n    </tr>\n    <tr>\n      <th>496</th>\n      <td>97</td>\n      <td>rmse_col_means</td>\n      <td>0.959530</td>\n    </tr>\n    <tr>\n      <th>497</th>\n      <td>98</td>\n      <td>rmse_col_means</td>\n      <td>0.958531</td>\n    </tr>\n    <tr>\n      <th>498</th>\n      <td>99</td>\n      <td>rmse_col_means</td>\n      <td>0.958267</td>\n    </tr>\n    <tr>\n      <th>499</th>\n      <td>100</td>\n      <td>rmse_col_means</td>\n      <td>0.959624</td>\n    </tr>\n  </tbody>\n</table>\n<p>500 rows × 3 columns</p>\n</div>"
--     },
--     "execution_count": 5,
--     "metadata": {},
--     "output_type": "execute_result"
--    }
--   ],
-+   "execution_count": null,
-+   "outputs": [],
-    "source": [
-     "n = 10\n",
-     "res_svd2_long"
-@@ -189,7 +171,7 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 49,
-+   "execution_count": null,
-    "outputs": [],
-    "source": [
-     "plot_nmf_1 = ggplot(res_nmf_long) + \\\n",
-@@ -229,7 +211,7 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 7,
-+   "execution_count": null,
-    "outputs": [],
-    "source": [
-     "res_svd2_stop = pd.read_csv('Results/results_stop_svd2.csv')"
-@@ -243,18 +225,8 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 8,
--   "outputs": [
--    {
--     "data": {
--      "text/plain": "       stop   r      RMSE\n378  0.0086   9  0.879578\n356  0.0085   9  0.880032\n400  0.0087   9  0.880051\n421  0.0088   8  0.880321\n232  0.0079  17  0.880356\n399  0.0087   8  0.880363\n210  0.0078  17  0.880485\n299  0.0082  18  0.880578\n275  0.0081  16  0.880597\n384  0.0086  15  0.880600",
--      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>stop</th>\n      <th>r</th>\n      <th>RMSE</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>378</th>\n      <td>0.0086</td>\n      <td>9</td>\n      <td>0.879578</td>\n    </tr>\n    <tr>\n      <th>356</th>\n      <td>0.0085</td>\n      <td>9</td>\n      <td>0.880032</td>\n    </tr>\n    <tr>\n      <th>400</th>\n      <td>0.0087</td>\n      <td>9</td>\n      <td>0.880051</td>\n    </tr>\n    <tr>\n      <th>421</th>\n      <td>0.0088</td>\n      <td>8</td>\n      <td>0.880321</td>\n    </tr>\n    <tr>\n      <th>232</th>\n      <td>0.0079</td>\n      <td>17</td>\n      <td>0.880356</td>\n    </tr>\n    <tr>\n      <th>399</th>\n      <td>0.0087</td>\n      <td>8</td>\n      <td>0.880363</td>\n    </tr>\n    <tr>\n      <th>210</th>\n      <td>0.0078</td>\n      <td>17</td>\n      <td>0.880485</td>\n    </tr>\n    <tr>\n      <th>299</th>\n      <td>0.0082</td>\n      <td>18</td>\n      <td>0.880578</td>\n    </tr>\n    <tr>\n      <th>275</th>\n      <td>0.0081</td>\n      <td>16</td>\n      <td>0.880597</td>\n    </tr>\n    <tr>\n      <th>384</th>\n      <td>0.0086</td>\n      <td>15</td>\n      <td>0.880600</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
--     },
--     "execution_count": 8,
--     "metadata": {},
--     "output_type": "execute_result"
--    }
--   ],
-+   "execution_count": null,
-+   "outputs": [],
-    "source": [
-     "n = 10\n",
-     "res_svd2_stop.loc[res_svd2_stop.apply(lambda x: pd.Series(x.nsmallest(n).index))['RMSE']]"
-@@ -268,27 +240,8 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 9,
--   "outputs": [
--    {
--     "data": {
--      "text/plain": "<matplotlib.colorbar.Colorbar at 0x230fac76c50>"
--     },
--     "execution_count": 9,
--     "metadata": {},
--     "output_type": "execute_result"
--    },
--    {
--     "data": {
--      "text/plain": "<Figure size 1080x720 with 2 Axes>",
--      "image/png": "\n"
--     },
--     "metadata": {
--      "needs_background": "light"
--     },
--     "output_type": "display_data"
--    }
--   ],
-+   "execution_count": null,
-+   "outputs": [],
-    "source": [
-     "X, Y, Z = res_svd2_stop.T.values\n",
-     "fig = plt.figure(figsize=(15,10))\n",
-@@ -318,7 +271,7 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 10,
-+   "execution_count": null,
-    "outputs": [],
-    "source": [
-     "res_svd1_3d = pd.read_csv('Results/results_r_w_svd1.csv')\n",
-@@ -346,18 +299,8 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 18,
--   "outputs": [
--    {
--     "data": {
--      "text/plain": "     col_weight   r      RMSE\n423        0.39  10  0.873987\n401        0.38  10  0.874244\n489        0.42  10  0.874274\n357        0.36  10  0.874449\n424        0.39  11  0.874469\n379        0.37  10  0.874475\n467        0.41  10  0.874490\n445        0.40  10  0.874498\n466        0.41   9  0.874507\n470        0.41  13  0.874532",
--      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>col_weight</th>\n      <th>r</th>\n      <th>RMSE</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>423</th>\n      <td>0.39</td>\n      <td>10</td>\n      <td>0.873987</td>\n    </tr>\n    <tr>\n      <th>401</th>\n      <td>0.38</td>\n      <td>10</td>\n      <td>0.874244</td>\n    </tr>\n    <tr>\n      <th>489</th>\n      <td>0.42</td>\n      <td>10</td>\n      <td>0.874274</td>\n    </tr>\n    <tr>\n      <th>357</th>\n      <td>0.36</td>\n      <td>10</td>\n      <td>0.874449</td>\n    </tr>\n    <tr>\n      <th>424</th>\n      <td>0.39</td>\n      <td>11</td>\n      <td>0.874469</td>\n    </tr>\n    <tr>\n      <th>379</th>\n      <td>0.37</td>\n      <td>10</td>\n      <td>0.874475</td>\n    </tr>\n    <tr>\n      <th>467</th>\n      <td>0.41</td>\n      <td>10</td>\n      <td>0.874490</td>\n    </tr>\n    <tr>\n      <th>445</th>\n      <td>0.40</td>\n      <td>10</td>\n      <td>0.874498</td>\n    </tr>\n    <tr>\n      <th>466</th>\n      <td>0.41</td>\n      <td>9</td>\n      <td>0.874507</td>\n    </tr>\n    <tr>\n      <th>470</th>\n      <td>0.41</td>\n      <td>13</td>\n      <td>0.874532</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
--     },
--     "execution_count": 18,
--     "metadata": {},
--     "output_type": "execute_result"
--    }
--   ],
-+   "execution_count": null,
-+   "outputs": [],
-    "source": [
-     "n = 10\n",
-     "res_svd1_3d.loc[res_svd1_3d.apply(lambda x: pd.Series(x.nsmallest(n).index))['RMSE']]"
-@@ -371,19 +314,8 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 12,
--   "outputs": [
--    {
--     "data": {
--      "text/plain": "<Figure size 1080x720 with 2 Axes>",
--      "image/png": "\n"
--     },
--     "metadata": {
--      "needs_background": "light"
--     },
--     "output_type": "display_data"
--    }
--   ],
-+   "execution_count": null,
-+   "outputs": [],
-    "source": [
-     "X, Y, Z = res_svd1_3d.T.values\n",
-     "fig = plt.figure(figsize=(15,10))\n",
-@@ -417,18 +349,8 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 13,
--   "outputs": [
--    {
--     "data": {
--      "text/plain": "     col_weight  r      RMSE\n73         0.25  8  0.867393\n87         0.26  8  0.867397\n59         0.24  8  0.867402\n101        0.27  8  0.867410\n115        0.28  8  0.867494\n45         0.23  8  0.867501\n31         0.22  8  0.867509\n129        0.29  8  0.867578\n17         0.21  8  0.867675\n143        0.30  8  0.867697",
--      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>col_weight</th>\n      <th>r</th>\n      <th>RMSE</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>73</th>\n      <td>0.25</td>\n      <td>8</td>\n      <td>0.867393</td>\n    </tr>\n    <tr>\n      <th>87</th>\n      <td>0.26</td>\n      <td>8</td>\n      <td>0.867397</td>\n    </tr>\n    <tr>\n      <th>59</th>\n      <td>0.24</td>\n      <td>8</td>\n      <td>0.867402</td>\n    </tr>\n    <tr>\n      <th>101</th>\n      <td>0.27</td>\n      <td>8</td>\n      <td>0.867410</td>\n    </tr>\n    <tr>\n      <th>115</th>\n      <td>0.28</td>\n      <td>8</td>\n      <td>0.867494</td>\n    </tr>\n    <tr>\n      <th>45</th>\n      <td>0.23</td>\n      <td>8</td>\n      <td>0.867501</td>\n    </tr>\n    <tr>\n      <th>31</th>\n      <td>0.22</td>\n      <td>8</td>\n      <td>0.867509</td>\n    </tr>\n    <tr>\n      <th>129</th>\n      <td>0.29</td>\n      <td>8</td>\n      <td>0.867578</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>0.21</td>\n      <td>8</td>\n      <td>0.867675</td>\n    </tr>\n    <tr>\n      <th>143</th>\n      <td>0.30</td>\n      <td>8</td>\n      <td>0.867697</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
--     },
--     "execution_count": 13,
--     "metadata": {},
--     "output_type": "execute_result"
--    }
--   ],
-+   "execution_count": null,
-+   "outputs": [],
-    "source": [
-     "n = 10\n",
-     "res_svd2_3d.loc[res_svd2_3d.apply(lambda x: pd.Series(x.nsmallest(n).index))['RMSE']]"
-@@ -442,19 +364,8 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 14,
--   "outputs": [
--    {
--     "data": {
--      "text/plain": "<Figure size 1080x720 with 2 Axes>",
--      "image/png": "\n"
--     },
--     "metadata": {
--      "needs_background": "light"
--     },
--     "output_type": "display_data"
--    }
--   ],
-+   "execution_count": null,
-+   "outputs": [],
-    "source": [
-     "X2, Y2, Z2 = res_svd2_3d.T.values\n",
-     "fig = plt.figure(figsize=(15,10))\n",
-@@ -488,18 +399,8 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 19,
--   "outputs": [
--    {
--     "data": {
--      "text/plain": "     col_weight   r      RMSE\n884        0.40  37  0.874794\n927        0.41  37  0.874817\n822        0.39  18  0.874841\n841        0.39  37  0.874848\n865        0.40  18  0.874849\n779        0.38  18  0.874881\n970        0.42  37  0.874892\n908        0.41  18  0.874909\n736        0.37  18  0.874958\n798        0.38  37  0.874959",
--      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>col_weight</th>\n      <th>r</th>\n      <th>RMSE</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>884</th>\n      <td>0.40</td>\n      <td>37</td>\n      <td>0.874794</td>\n    </tr>\n    <tr>\n      <th>927</th>\n      <td>0.41</td>\n      <td>37</td>\n      <td>0.874817</td>\n    </tr>\n    <tr>\n      <th>822</th>\n      <td>0.39</td>\n      <td>18</td>\n      <td>0.874841</td>\n    </tr>\n    <tr>\n      <th>841</th>\n      <td>0.39</td>\n      <td>37</td>\n      <td>0.874848</td>\n    </tr>\n    <tr>\n      <th>865</th>\n      <td>0.40</td>\n      <td>18</td>\n      <td>0.874849</td>\n    </tr>\n    <tr>\n      <th>779</th>\n      <td>0.38</td>\n      <td>18</td>\n      <td>0.874881</td>\n    </tr>\n    <tr>\n      <th>970</th>\n      <td>0.42</td>\n      <td>37</td>\n      <td>0.874892</td>\n    </tr>\n    <tr>\n      <th>908</th>\n      <td>0.41</td>\n      <td>18</td>\n      <td>0.874909</td>\n    </tr>\n    <tr>\n      <th>736</th>\n      <td>0.37</td>\n      <td>18</td>\n      <td>0.874958</td>\n    </tr>\n    <tr>\n      <th>798</th>\n      <td>0.38</td>\n      <td>37</td>\n      <td>0.874959</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
--     },
--     "execution_count": 19,
--     "metadata": {},
--     "output_type": "execute_result"
--    }
--   ],
-+   "execution_count": null,
-+   "outputs": [],
-    "source": [
-     "n = 10\n",
-     "res_nmf_3d.loc[res_nmf_3d.apply(lambda x: pd.Series(x.nsmallest(n).index))['RMSE']]"
-@@ -513,19 +414,8 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 50,
--   "outputs": [
--    {
--     "data": {
--      "text/plain": "<Figure size 1080x720 with 2 Axes>",
--      "image/png": "\n"
--     },
--     "metadata": {
--      "needs_background": "light"
--     },
--     "output_type": "display_data"
--    }
--   ],
-+   "execution_count": null,
-+   "outputs": [],
-    "source": [
-     "X3, Y3, Z3 = res_nmf_3d.T.values\n",
-     "fig = plt.figure(figsize=(15, 10))\n",
-@@ -559,7 +449,7 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 51,
-+   "execution_count": 5,
-    "outputs": [],
-    "source": [
-     "res_svd1_reps = pd.read_csv('Results/results_reps_svd1.csv')"
-@@ -573,14 +463,39 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 56,
-+   "execution_count": 10,
-+   "outputs": [
-+    {
-+     "data": {
-+      "text/plain": "rep       10.500000\nweight     0.410000\nr         13.000000\nRMSE       0.875435\ndtype: float64"
-+     },
-+     "execution_count": 10,
-+     "metadata": {},
-+     "output_type": "execute_result"
-+    }
-+   ],
-+   "source": [
-+    "res_svd1_reps.loc[res_svd1_reps.groupby('rep').idxmin()['RMSE']].median()\n",
-+    "# mean weight: 0.405500\n",
-+    "# mean r: 12.200000"
-+   ],
-+   "metadata": {
-+    "collapsed": false,
-+    "pycharm": {
-+     "name": "#%%\n"
-+    }
-+   }
-+  },
-+  {
-+   "cell_type": "code",
-+   "execution_count": 11,
-    "outputs": [
-     {
-      "data": {
-       "text/plain": "     rep  weight     r      RMSE\n5      1    0.37  10.0  0.878849\n19     2    0.41  13.0  0.871667\n21     3    0.38  10.0  0.883794\n39     4    0.41  13.0  0.865293\n49     5    0.41  13.0  0.885750\n59     6    0.41  13.0  0.868848\n69     7    0.41  13.0  0.878588\n79     8    0.41  13.0  0.887374\n88     9    0.41   9.0  0.879621\n99    10    0.41  13.0  0.867972\n109   11    0.41  13.0  0.877385\n119   12    0.41  13.0  0.872681\n124   13    0.39  11.0  0.879833\n139   14    0.41  13.0  0.872548\n149   15    0.41  13.0  0.888480\n159   16    0.41  13.0  0.867906\n168   17    0.41   9.0  0.868453\n179   18    0.41  13.0  0.867510\n189   19    0.41  13.0  0.873485\n199   20    0.41  13.0  0.879318",
-       "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>rep</th>\n      <th>weight</th>\n      <th>r</th>\n      <th>RMSE</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>5</th>\n      <td>1</td>\n      <td>0.37</td>\n      <td>10.0</td>\n      <td>0.878849</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>2</td>\n      <td>0.41</td>\n      <td>13.0</td>\n      <td>0.871667</td>\n    </tr>\n    <tr>\n      <th>21</th>\n      <td>3</td>\n      <td>0.38</td>\n      <td>10.0</td>\n      <td>0.883794</td>\n    </tr>\n    <tr>\n      <th>39</th>\n      <td>4</td>\n      <td>0.41</td>\n      <td>13.0</td>\n      <td>0.865293</td>\n    </tr>\n    <tr>\n      <th>49</th>\n      <td>5</td>\n      <td>0.41</td>\n      <td>13.0</td>\n      <td>0.885750</td>\n    </tr>\n    <tr>\n      <th>59</th>\n      <td>6</td>\n      <td>0.41</td>\n      <td>13.0</td>\n      <td>0.868848</td>\n    </tr>\n    <tr>\n      <th>69</th>\n      <td>7</td>\n      <td>0.41</td>\n      <td>13.0</td>\n      <td>0.878588</td>\n    </tr>\n    <tr>\n      <th>79</th>\n      <td>8</td>\n      <td>0.41</td>\n      <td>13.0</td>\n      <td>0.887374</td>\n    </tr>\n    <tr>\n      <th>88</th>\n      <td>9</td>\n      <td>0.41</td>\n      <td>9.0</td>\n      <td>0.879621</td>\n    </tr>\n    <tr>\n      <th>99</th>\n      <td>10</td>\n      <td>0.41</td>\n      <td>13.0</td>\n      <td>0.867972</td>\n    </tr>\n    <tr>\n      <th>109</th>\n      <td>11</td>\n      <td>0.41</td>\n      <td>13.0</td>\n      <td>0.877385</td>\n    </tr>\n    <tr>\n      <th>119</th>\n      <td>12</td>\n      <td>0.41</td>\n      <td>13.0</td>\n      <td>0.872681</td>\n    </tr>\n    <tr>\n      <th>124</th>\n      <td>13</td>\n      <td>0.39</td>\n      <td>11.0</td>\n      <td>0.879833</td>\n    </tr>\n    <tr>\n      <th>139</th>\n      <td>14</td>\n      <td>0.41</td>\n      <td>13.0</td>\n      <td>0.872548</td>\n    </tr>\n    <tr>\n      <th>149</th>\n      <td>15</td>\n      <td>0.41</td>\n      <td>13.0</td>\n      <td>0.888480</td>\n    </tr>\n    <tr>\n      <th>159</th>\n      <td>16</td>\n      <td>0.41</td>\n      <td>13.0</td>\n      <td>0.867906</td>\n    </tr>\n    <tr>\n      <th>168</th>\n      <td>17</td>\n      <td>0.41</td>\n      <td>9.0</td>\n      <td>0.868453</td>\n    </tr>\n    <tr>\n      <th>179</th>\n      <td>18</td>\n      <td>0.41</td>\n      <td>13.0</td>\n      <td>0.867510</td>\n    </tr>\n    <tr>\n      <th>189</th>\n      <td>19</td>\n      <td>0.41</td>\n      <td>13.0</td>\n      <td>0.873485</td>\n    </tr>\n    <tr>\n      <th>199</th>\n      <td>20</td>\n      <td>0.41</td>\n      <td>13.0</td>\n      <td>0.879318</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
-      },
--     "execution_count": 56,
-+     "execution_count": 11,
-      "metadata": {},
-      "output_type": "execute_result"
-     }
-@@ -597,18 +512,71 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 52,
-+   "execution_count": 16,
-    "outputs": [
-     {
-      "data": {
--      "text/plain": "     rep  weight     r      RMSE\n39     4    0.41  13.0  0.865293\n30     4    0.39  10.0  0.865373\n33     4    0.36  10.0  0.865408\n31     4    0.38  10.0  0.865569\n34     4    0.39  11.0  0.865717\n35     4    0.37  10.0  0.866763\n37     4    0.40  10.0  0.867131\n179   18    0.41  13.0  0.867510\n32     4    0.42  10.0  0.867536\n36     4    0.41  10.0  0.867569",
--      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>rep</th>\n      <th>weight</th>\n      <th>r</th>\n      <th>RMSE</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>39</th>\n      <td>4</td>\n      <td>0.41</td>\n      <td>13.0</td>\n      <td>0.865293</td>\n    </tr>\n    <tr>\n      <th>30</th>\n      <td>4</td>\n      <td>0.39</td>\n      <td>10.0</td>\n      <td>0.865373</td>\n    </tr>\n    <tr>\n      <th>33</th>\n      <td>4</td>\n      <td>0.36</td>\n      <td>10.0</td>\n      <td>0.865408</td>\n    </tr>\n    <tr>\n      <th>31</th>\n      <td>4</td>\n      <td>0.38</td>\n      <td>10.0</td>\n      <td>0.865569</td>\n    </tr>\n    <tr>\n      <th>34</th>\n      <td>4</td>\n      <td>0.39</td>\n      <td>11.0</td>\n      <td>0.865717</td>\n    </tr>\n    <tr>\n      <th>35</th>\n      <td>4</td>\n      <td>0.37</td>\n      <td>10.0</td>\n      <td>0.866763</td>\n    </tr>\n    <tr>\n      <th>37</th>\n      <td>4</td>\n      <td>0.40</td>\n      <td>10.0</td>\n      <td>0.867131</td>\n    </tr>\n    <tr>\n      <th>179</th>\n      <td>18</td>\n      <td>0.41</td>\n      <td>13.0</td>\n      <td>0.867510</td>\n    </tr>\n    <tr>\n      <th>32</th>\n      <td>4</td>\n      <td>0.42</td>\n      <td>10.0</td>\n      <td>0.867536</td>\n    </tr>\n    <tr>\n      <th>36</th>\n      <td>4</td>\n      <td>0.41</td>\n      <td>10.0</td>\n      <td>0.867569</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
-+      "text/plain": "     rep  weight    r      RMSE\n4      1    0.28  8.0  0.872835\n19     2    0.30  8.0  0.867913\n21     3    0.26  8.0  0.859600\n30     4    0.25  8.0  0.856732\n42     5    0.24  8.0  0.869132\n52     6    0.24  8.0  0.876788\n67     7    0.29  8.0  0.877743\n73     8    0.27  8.0  0.861210\n82     9    0.24  8.0  0.875806\n95    10    0.23  8.0  0.875737\n108   11    0.21  8.0  0.870365\n114   12    0.28  8.0  0.883448\n123   13    0.27  8.0  0.864471\n130   14    0.25  8.0  0.862224\n143   15    0.27  8.0  0.872639\n153   16    0.27  8.0  0.867200\n169   17    0.30  8.0  0.880721\n170   18    0.25  8.0  0.865481\n182   19    0.24  8.0  0.869856\n195   20    0.23  8.0  0.876861",
-+      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>rep</th>\n      <th>weight</th>\n      <th>r</th>\n      <th>RMSE</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>4</th>\n      <td>1</td>\n      <td>0.28</td>\n      <td>8.0</td>\n      <td>0.872835</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>2</td>\n      <td>0.30</td>\n      <td>8.0</td>\n      <td>0.867913</td>\n    </tr>\n    <tr>\n      <th>21</th>\n      <td>3</td>\n      <td>0.26</td>\n      <td>8.0</td>\n      <td>0.859600</td>\n    </tr>\n    <tr>\n      <th>30</th>\n      <td>4</td>\n      <td>0.25</td>\n      <td>8.0</td>\n      <td>0.856732</td>\n    </tr>\n    <tr>\n      <th>42</th>\n      <td>5</td>\n      <td>0.24</td>\n      <td>8.0</td>\n      <td>0.869132</td>\n    </tr>\n    <tr>\n      <th>52</th>\n      <td>6</td>\n      <td>0.24</td>\n      <td>8.0</td>\n      <td>0.876788</td>\n    </tr>\n    <tr>\n      <th>67</th>\n      <td>7</td>\n      <td>0.29</td>\n      <td>8.0</td>\n      <td>0.877743</td>\n    </tr>\n    <tr>\n      <th>73</th>\n      <td>8</td>\n      <td>0.27</td>\n      <td>8.0</td>\n      <td>0.861210</td>\n    </tr>\n    <tr>\n      <th>82</th>\n      <td>9</td>\n      <td>0.24</td>\n      <td>8.0</td>\n      <td>0.875806</td>\n    </tr>\n    <tr>\n      <th>95</th>\n      <td>10</td>\n      <td>0.23</td>\n      <td>8.0</td>\n      <td>0.875737</td>\n    </tr>\n    <tr>\n      <th>108</th>\n      <td>11</td>\n      <td>0.21</td>\n      <td>8.0</td>\n      <td>0.870365</td>\n    </tr>\n    <tr>\n      <th>114</th>\n      <td>12</td>\n      <td>0.28</td>\n      <td>8.0</td>\n      <td>0.883448</td>\n    </tr>\n    <tr>\n      <th>123</th>\n      <td>13</td>\n      <td>0.27</td>\n      <td>8.0</td>\n      <td>0.864471</td>\n    </tr>\n    <tr>\n      <th>130</th>\n      <td>14</td>\n      <td>0.25</td>\n      <td>8.0</td>\n      <td>0.862224</td>\n    </tr>\n    <tr>\n      <th>143</th>\n      <td>15</td>\n      <td>0.27</td>\n      <td>8.0</td>\n      <td>0.872639</td>\n    </tr>\n    <tr>\n      <th>153</th>\n      <td>16</td>\n      <td>0.27</td>\n      <td>8.0</td>\n      <td>0.867200</td>\n    </tr>\n    <tr>\n      <th>169</th>\n      <td>17</td>\n      <td>0.30</td>\n      <td>8.0</td>\n      <td>0.880721</td>\n    </tr>\n    <tr>\n      <th>170</th>\n      <td>18</td>\n      <td>0.25</td>\n      <td>8.0</td>\n      <td>0.865481</td>\n    </tr>\n    <tr>\n      <th>182</th>\n      <td>19</td>\n      <td>0.24</td>\n      <td>8.0</td>\n      <td>0.869856</td>\n    </tr>\n    <tr>\n      <th>195</th>\n      <td>20</td>\n      <td>0.23</td>\n      <td>8.0</td>\n      <td>0.876861</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
-      },
--     "execution_count": 52,
-+     "execution_count": 16,
-      "metadata": {},
-      "output_type": "execute_result"
-     }
-    ],
-+   "source": [
-+    "res_svd2_reps = pd.read_csv('Results/results_reps_svd2.csv')\n",
-+    "res_svd2_reps.loc[res_svd2_reps.groupby('rep').idxmin()['RMSE']].median()\n",
-+    "# 0.25500\n",
-+    "# 8.00000\n",
-+    "res_svd2_reps.loc[res_svd2_reps.groupby('rep').idxmin()['RMSE']].mean()\n",
-+    "# 0.258500\n",
-+    "# 8.000000\n",
-+    "res_svd2_reps.loc[res_svd2_reps.groupby('rep').idxmin()['RMSE']]"
-+   ],
-+   "metadata": {
-+    "collapsed": false,
-+    "pycharm": {
-+     "name": "#%%\n"
-+    }
-+   }
-+  },
-+  {
-+   "cell_type": "code",
-+   "execution_count": 19,
-+   "outputs": [
-+    {
-+     "data": {
-+      "text/plain": "     rep  weight     r      RMSE\n9      1    0.38  37.0  0.880965\n19     2    0.38  37.0  0.871062\n23     3    0.39  37.0  0.872295\n38     4    0.37  18.0  0.867952\n41     5    0.41  37.0  0.876259\n50     6    0.40  37.0  0.870456\n69     7    0.38  37.0  0.886954\n76     8    0.42  37.0  0.867154\n83     9    0.39  37.0  0.874463\n96    10    0.42  37.0  0.867500\n107   11    0.41  18.0  0.874133\n113   12    0.39  37.0  0.882826\n122   13    0.39  18.0  0.889002\n130   14    0.40  37.0  0.874015\n144   15    0.40  18.0  0.877746\n155   16    0.38  18.0  0.870142\n169   17    0.38  37.0  0.880930\n179   18    0.38  37.0  0.888667\n183   19    0.39  37.0  0.877390\n193   20    0.39  37.0  0.874302",
-+      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>rep</th>\n      <th>weight</th>\n      <th>r</th>\n      <th>RMSE</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>9</th>\n      <td>1</td>\n      <td>0.38</td>\n      <td>37.0</td>\n      <td>0.880965</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>2</td>\n      <td>0.38</td>\n      <td>37.0</td>\n      <td>0.871062</td>\n    </tr>\n    <tr>\n      <th>23</th>\n      <td>3</td>\n      <td>0.39</td>\n      <td>37.0</td>\n      <td>0.872295</td>\n    </tr>\n    <tr>\n      <th>38</th>\n      <td>4</td>\n      <td>0.37</td>\n      <td>18.0</td>\n      <td>0.867952</td>\n    </tr>\n    <tr>\n      <th>41</th>\n      <td>5</td>\n      <td>0.41</td>\n      <td>37.0</td>\n      <td>0.876259</td>\n    </tr>\n    <tr>\n      <th>50</th>\n      <td>6</td>\n      <td>0.40</td>\n      <td>37.0</td>\n      <td>0.870456</td>\n    </tr>\n    <tr>\n      <th>69</th>\n      <td>7</td>\n      <td>0.38</td>\n      <td>37.0</td>\n      <td>0.886954</td>\n    </tr>\n    <tr>\n      <th>76</th>\n      <td>8</td>\n      <td>0.42</td>\n      <td>37.0</td>\n      <td>0.867154</td>\n    </tr>\n    <tr>\n      <th>83</th>\n      <td>9</td>\n      <td>0.39</td>\n      <td>37.0</td>\n      <td>0.874463</td>\n    </tr>\n    <tr>\n      <th>96</th>\n      <td>10</td>\n      <td>0.42</td>\n      <td>37.0</td>\n      <td>0.867500</td>\n    </tr>\n    <tr>\n      <th>107</th>\n      <td>11</td>\n      <td>0.41</td>\n      <td>18.0</td>\n      <td>0.874133</td>\n    </tr>\n    <tr>\n      <th>113</th>\n      <td>12</td>\n      <td>0.39</td>\n      <td>37.0</td>\n      <td>0.882826</td>\n    </tr>\n    <tr>\n      <th>122</th>\n      <td>13</td>\n      <td>0.39</td>\n      <td>18.0</td>\n      <td>0.889002</td>\n    </tr>\n    <tr>\n      <th>130</th>\n      <td>14</td>\n      <td>0.40</td>\n      <td>37.0</td>\n      <td>0.874015</td>\n    </tr>\n    <tr>\n      <th>144</th>\n      <td>15</td>\n      <td>0.40</td>\n      <td>18.0</td>\n      <td>0.877746</td>\n    </tr>\n    <tr>\n      <th>155</th>\n      <td>16</td>\n      <td>0.38</td>\n      <td>18.0</td>\n      <td>0.870142</td>\n    </tr>\n    <tr>\n      <th>169</th>\n      <td>17</td>\n      <td>0.38</td>\n      <td>37.0</td>\n      <td>0.880930</td>\n    </tr>\n    <tr>\n      <th>179</th>\n      <td>18</td>\n      <td>0.38</td>\n      <td>37.0</td>\n      <td>0.888667</td>\n    </tr>\n    <tr>\n      <th>183</th>\n      <td>19</td>\n      <td>0.39</td>\n      <td>37.0</td>\n      <td>0.877390</td>\n    </tr>\n    <tr>\n      <th>193</th>\n      <td>20</td>\n      <td>0.39</td>\n      <td>37.0</td>\n      <td>0.874302</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
-+     },
-+     "execution_count": 19,
-+     "metadata": {},
-+     "output_type": "execute_result"
-+    }
-+   ],
-+   "source": [
-+    "res_nmf_reps = pd.read_csv('Results/results_reps_nmf.csv')\n",
-+    "res_nmf_reps.loc[res_nmf_reps.groupby('rep').idxmin()['RMSE']].median()\n",
-+    "# 0.390000\n",
-+    "# 37.000000\n",
-+    "res_nmf_reps.loc[res_nmf_reps.groupby('rep').idxmin()['RMSE']].mean()\n",
-+    "# 0.392500\n",
-+    "# 32.250000\n",
-+    "res_nmf_reps.loc[res_nmf_reps.groupby('rep').idxmin()['RMSE']]\n",
-+    "# 5 razy 18 reszta 37"
-+   ],
-+   "metadata": {
-+    "collapsed": false,
-+    "pycharm": {
-+     "name": "#%%\n"
-+    }
-+   }
-+  },
-+  {
-+   "cell_type": "code",
-+   "execution_count": null,
-+   "outputs": [],
-    "source": [
-     "n = 10\n",
-     "res_svd1_reps.loc[res_svd1_reps.apply(lambda x: pd.Series(x.nsmallest(n).index))['RMSE']]"
-Index: .idea/workspace.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"62d33fe8-2ec7-4d31-9bba-7fa36bc76fcb\" name=\"Changes\" comment=\"planning\">\r\n      <change afterPath=\"$PROJECT_DIR$/auxil/report.aux\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/auxil/report.log\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/out/report.pdf\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/out/report.synctex.gz\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/MoCaDR_proj1.iml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/MoCaDR_proj1.iml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/misc.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/misc.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_02_04_2022_09_45_[Changes]/shelved.patch\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_02_04_2022_09_45__Changes_.xml\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_09_04_2022_08_52__Changes_.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_09_04_2022_08_52__Changes_.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Report/auxil/report.aux\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Report/auxil/report.aux\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Report/auxil/report.log\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Report/auxil/report.log\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Report/out/report.pdf\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Report/out/report.pdf\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Report/out/report.synctex.gz\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Report/out/report.synctex.gz\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Report/report.tex\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Report/report.tex\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"RMarkdown.document\" />\r\n        <option value=\"Jupyter Notebook\" />\r\n        <option value=\"Python Script\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitSEFilterConfiguration\">\r\n    <file-type-list>\r\n      <filtered-out-file-type name=\"LOCAL_BRANCH\" />\r\n      <filtered-out-file-type name=\"REMOTE_BRANCH\" />\r\n      <filtered-out-file-type name=\"TAG\" />\r\n      <filtered-out-file-type name=\"COMMIT_BY_MESSAGE\" />\r\n    </file-type-list>\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"267VjyGJ9wr8oG7c6vyJzNQTvFk\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\">\r\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">\r\n    <property name=\"ASKED_ADD_EXTERNAL_FILES\" value=\"true\" />\r\n    <property name=\"ASKED_SHARE_PROJECT_CONFIGURATION_FILES\" value=\"true\" />\r\n    <property name=\"RunOnceActivity.OpenProjectViewOnStart\" value=\"true\" />\r\n    <property name=\"RunOnceActivity.ShowReadmeOnStart\" value=\"true\" />\r\n    <property name=\"SHARE_PROJECT_CONFIGURATION_FILES\" value=\"true\" />\r\n    <property name=\"WebServerToolWindowFactoryState\" value=\"false\" />\r\n    <property name=\"last_opened_file_path\" value=\"$PROJECT_DIR$/Report\" />\r\n    <property name=\"node.js.detected.package.eslint\" value=\"true\" />\r\n    <property name=\"node.js.detected.package.tslint\" value=\"true\" />\r\n    <property name=\"node.js.selected.package.eslint\" value=\"(autodetect)\" />\r\n    <property name=\"node.js.selected.package.tslint\" value=\"(autodetect)\" />\r\n    <property name=\"settings.editor.selected.configurable\" value=\"configurable.group.language\" />\r\n  </component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"D:\\Studia\\MoCaDR_proj1\\Report\" />\r\n      <recent name=\"D:\\Studia\\MoCaDR_proj1\" />\r\n    </key>\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"D:\\Studia\\MoCaDR_proj1\\Report\\fig\\syf\" />\r\n      <recent name=\"D:\\Studia\\MoCaDR_proj1\\Results\\Syf\" />\r\n      <recent name=\"D:\\Studia\\MoCaDR_proj1\\Report\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\" selected=\"LaTeX.report\">\r\n    <configuration name=\"report\" type=\"LATEX_RUN_CONFIGURATION\" factoryName=\"LaTeX configuration factory\" temporary=\"true\">\r\n      <texify>\r\n        <compiler>PDFLATEX</compiler>\r\n        <compiler-path />\r\n        <sumatra-path />\r\n        <pdf-viewer>SUMATRA</pdf-viewer>\r\n        <viewer-command />\r\n        <compiler-arguments />\r\n        <envs />\r\n        <main-file>$PROJECT_DIR$/Report/report.tex</main-file>\r\n        <output-path>$PROJECT_DIR$/out</output-path>\r\n        <auxil-path>$PROJECT_DIR$/auxil</auxil-path>\r\n        <compile-twice>false</compile-twice>\r\n        <output-format>PDF</output-format>\r\n        <latex-distribution>MIKTEX</latex-distribution>\r\n        <has-been-run>true</has-been-run>\r\n        <bib-run-config>[]</bib-run-config>\r\n        <makeindex-run-config>[]</makeindex-run-config>\r\n      </texify>\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"compute_results3\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"MoCaDR_proj1\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/src\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/src/compute_results3.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"manipulating_datasets\" type=\"PythonConfigurationType\" factoryName=\"Python\" nameIsGenerated=\"true\">\r\n      <module name=\"MoCaDR_proj1\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"D:\\Studia\\MoCaDR_proj1\\manipulating_datasets.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"performing_algorithms\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"MoCaDR_proj1\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/src\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/src/performing_algorithms.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"splitting_data\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"MoCaDR_proj1\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/splitting_data.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <list>\r\n      <item itemvalue=\"LaTeX.report\" />\r\n      <item itemvalue=\"Python.manipulating_datasets\" />\r\n      <item itemvalue=\"Python.compute_results3\" />\r\n      <item itemvalue=\"Python.performing_algorithms\" />\r\n      <item itemvalue=\"Python.splitting_data\" />\r\n    </list>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"LaTeX.report\" />\r\n        <item itemvalue=\"Python.splitting_data\" />\r\n        <item itemvalue=\"Python.performing_algorithms\" />\r\n        <item itemvalue=\"Python.compute_results3\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"SvnConfiguration\">\r\n    <configuration>C:\\Users\\dmika\\AppData\\Roaming\\Subversion</configuration>\r\n  </component>\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"62d33fe8-2ec7-4d31-9bba-7fa36bc76fcb\" name=\"Changes\" comment=\"\" />\r\n      <created>1646774751311</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1646774751311</updated>\r\n      <workItem from=\"1646774754054\" duration=\"26000\" />\r\n      <workItem from=\"1646774814002\" duration=\"835000\" />\r\n      <workItem from=\"1646775670059\" duration=\"47000\" />\r\n      <workItem from=\"1646775727774\" duration=\"757000\" />\r\n      <workItem from=\"1646816479175\" duration=\"461000\" />\r\n      <workItem from=\"1646896158453\" duration=\"762000\" />\r\n      <workItem from=\"1646896945682\" duration=\"630000\" />\r\n      <workItem from=\"1646897595717\" duration=\"2651000\" />\r\n      <workItem from=\"1646900622776\" duration=\"425000\" />\r\n      <workItem from=\"1646915517163\" duration=\"449000\" />\r\n      <workItem from=\"1646915983800\" duration=\"240000\" />\r\n      <workItem from=\"1646916258164\" duration=\"389000\" />\r\n      <workItem from=\"1646916663441\" duration=\"393000\" />\r\n      <workItem from=\"1646933050771\" duration=\"1105000\" />\r\n      <workItem from=\"1646936230049\" duration=\"1064000\" />\r\n      <workItem from=\"1647027781891\" duration=\"1279000\" />\r\n      <workItem from=\"1647071928401\" duration=\"2390000\" />\r\n      <workItem from=\"1647181792640\" duration=\"2955000\" />\r\n      <workItem from=\"1647276453225\" duration=\"264000\" />\r\n      <workItem from=\"1647276734574\" duration=\"7710000\" />\r\n      <workItem from=\"1647699257802\" duration=\"1713000\" />\r\n      <workItem from=\"1647774897107\" duration=\"5656000\" />\r\n      <workItem from=\"1648326375030\" duration=\"985000\" />\r\n      <workItem from=\"1648327394372\" duration=\"485000\" />\r\n      <workItem from=\"1648481964443\" duration=\"4660000\" />\r\n      <workItem from=\"1648576643019\" duration=\"4941000\" />\r\n      <workItem from=\"1648885683106\" duration=\"2799000\" />\r\n      <workItem from=\"1649100586613\" duration=\"401000\" />\r\n      <workItem from=\"1649142695450\" duration=\"1248000\" />\r\n      <workItem from=\"1649154173111\" duration=\"1535000\" />\r\n      <workItem from=\"1649225210342\" duration=\"2520000\" />\r\n      <workItem from=\"1649252977347\" duration=\"33000\" />\r\n      <workItem from=\"1649256897698\" duration=\"20000\" />\r\n      <workItem from=\"1649263859461\" duration=\"4502000\" />\r\n      <workItem from=\"1649340598453\" duration=\"3005000\" />\r\n      <workItem from=\"1649345448932\" duration=\"596000\" />\r\n      <workItem from=\"1649407349351\" duration=\"1672000\" />\r\n      <workItem from=\"1649429201664\" duration=\"3019000\" />\r\n      <workItem from=\"1649438274438\" duration=\"1751000\" />\r\n      <workItem from=\"1649535983650\" duration=\"89000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"a\">\r\n      <created>1646775274557</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646775274557</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"init commit\">\r\n      <created>1646775361377</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646775361377</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"init commit\">\r\n      <created>1646775521666</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646775521666</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"init commit\">\r\n      <created>1646775784756</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646775784756</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"init commit\">\r\n      <created>1646775870305</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646775870305</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"Adding dataset\">\r\n      <created>1646816860800</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646816860800</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"Setting up LaTeX\">\r\n      <created>1646898995949</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646898995949</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00008\" summary=\"Setting up LaTeX\">\r\n      <created>1646900639924</created>\r\n      <option name=\"number\" value=\"00008\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646900639924</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00009\" summary=\"Cleaning data\">\r\n      <created>1646934068924</created>\r\n      <option name=\"number\" value=\"00009\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646934068924</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00010\" summary=\"Cleaning data\">\r\n      <created>1647028888721</created>\r\n      <option name=\"number\" value=\"00010\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647028888721</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00011\" summary=\"Cleaning data\">\r\n      <created>1647029054319</created>\r\n      <option name=\"number\" value=\"00011\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647029054319</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00012\" summary=\"Tamarka testing\">\r\n      <created>1647163191686</created>\r\n      <option name=\"number\" value=\"00012\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00012\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647163191686</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00013\" summary=\"Experimenting with 'NaN' values\">\r\n      <created>1647168883206</created>\r\n      <option name=\"number\" value=\"00013\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00013\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647168883206</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00014\" summary=\"Experimenting with 'NaN' values\">\r\n      <created>1647175373237</created>\r\n      <option name=\"number\" value=\"00014\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00014\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647175373237</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00015\" summary=\"Removing duplicated packages\">\r\n      <created>1647175629524</created>\r\n      <option name=\"number\" value=\"00015\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00015\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647175629524</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00016\" summary=\"Testing methods\">\r\n      <created>1647184013664</created>\r\n      <option name=\"number\" value=\"00016\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00016\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647184013664</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00017\" summary=\"Testing methods\">\r\n      <created>1647184756535</created>\r\n      <option name=\"number\" value=\"00017\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00017\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647184756535</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00018\" summary=\"SVD opis Tamarka\">\r\n      <created>1647698852885</created>\r\n      <option name=\"number\" value=\"00018\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00018\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647698852885</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00019\" summary=\"SVD opis Tamarka\">\r\n      <created>1647699044053</created>\r\n      <option name=\"number\" value=\"00019\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00019\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647699044053</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00020\" summary=\"SVD opis Tamarka\">\r\n      <created>1647699173625</created>\r\n      <option name=\"number\" value=\"00020\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00020\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647699173625</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00021\" summary=\"Testing SVD2\">\r\n      <created>1648327858794</created>\r\n      <option name=\"number\" value=\"00021\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00021\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1648327858794</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00022\" summary=\"computing results\">\r\n      <created>1649155805892</created>\r\n      <option name=\"number\" value=\"00022\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00022\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1649155805892</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00023\" summary=\"Computing stop condition svd2\">\r\n      <created>1649345310151</created>\r\n      <option name=\"number\" value=\"00023\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00023\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1649345310151</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00024\" summary=\"Computing stop condition svd2\">\r\n      <created>1649408687739</created>\r\n      <option name=\"number\" value=\"00024\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00024\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1649408687739</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00025\" summary=\"Presenting results for NMF\">\r\n      <created>1649408979238</created>\r\n      <option name=\"number\" value=\"00025\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00025\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1649408979239</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00026\" summary=\"computing results\">\r\n      <created>1649434249565</created>\r\n      <option name=\"number\" value=\"00026\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00026\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1649434249565</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00027\" summary=\"computing results\">\r\n      <created>1649492068004</created>\r\n      <option name=\"number\" value=\"00027\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00027\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1649492068004</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"28\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <option name=\"ADD_EXTERNAL_FILES_SILENTLY\" value=\"true\" />\r\n    <MESSAGE value=\"a\" />\r\n    <MESSAGE value=\"init commit\" />\r\n    <MESSAGE value=\"Adding dataset\" />\r\n    <MESSAGE value=\"Setting up LaTeX\" />\r\n    <MESSAGE value=\"Cleaning data\" />\r\n    <MESSAGE value=\"Tamarka testing\" />\r\n    <MESSAGE value=\"Experimenting with 'NaN' values\" />\r\n    <MESSAGE value=\"Removing duplicated packages\" />\r\n    <MESSAGE value=\"Testing methods\" />\r\n    <MESSAGE value=\"SVD opis Tamarka\" />\r\n    <MESSAGE value=\"Testing SVD2\" />\r\n    <MESSAGE value=\"Computing stop condition svd2\" />\r\n    <MESSAGE value=\"Presenting results for NMF\" />\r\n    <MESSAGE value=\"computing results\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"computing results\" />\r\n  </component>\r\n  <component name=\"com.intellij.coverage.CoverageDataManagerImpl\">\r\n    <SUITE FILE_PATH=\"coverage/main_py$performing_algorithms.coverage\" NAME=\"performing_algorithms Coverage Results\" MODIFIED=\"1647784050444\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/src\" />\r\n    <SUITE FILE_PATH=\"coverage/main_py$algorithms_script.coverage\" NAME=\"performing_algorithms Coverage Results\" MODIFIED=\"1647535849226\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/src\" />\r\n    <SUITE FILE_PATH=\"coverage/main_py$splitting_manipulating_data.coverage\" NAME=\"splitting_manipulating_data Coverage Results\" MODIFIED=\"1648627073782\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/src\" />\r\n    <SUITE FILE_PATH=\"coverage/main_py$performing_algorithms__1_.coverage\" NAME=\"performing_algorithms (1) Coverage Results\" MODIFIED=\"1648057220868\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/src\" />\r\n    <SUITE FILE_PATH=\"coverage/main_py$splitting_manipulating_data__1_.coverage\" NAME=\"splitting_manipulating_data (1) Coverage Results\" MODIFIED=\"1647870795349\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/src\" />\r\n    <SUITE FILE_PATH=\"coverage/main_py$compute_results3.coverage\" NAME=\"compute_results3 Coverage Results\" MODIFIED=\"1649268385203\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/src\" />\r\n    <SUITE FILE_PATH=\"coverage/MoCaDR_proj1$splitting_data.coverage\" NAME=\"splitting_data Coverage Results\" MODIFIED=\"1647174411611\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\r\n    <SUITE FILE_PATH=\"coverage/main_py$a.coverage\" NAME=\"a Coverage Results\" MODIFIED=\"1648057368569\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/src\" />\r\n    <SUITE FILE_PATH=\"coverage/main_py$algorithm_functions.coverage\" NAME=\"algorithm_functions Coverage Results\" MODIFIED=\"1648826781925\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/src\" />\r\n    <SUITE FILE_PATH=\"coverage/main_py$computing_results.coverage\" NAME=\"computing_results Coverage Results\" MODIFIED=\"1648727756891\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/src\" />\r\n  </component>\r\n</project>
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/.idea/workspace.xml b/.idea/workspace.xml
---- a/.idea/workspace.xml	(revision 4150129e7bd8166c8f9a24bbfc6601436329d089)
-+++ b/.idea/workspace.xml	(date 1649603980390)
-@@ -4,22 +4,14 @@
-     <option name="autoReloadType" value="SELECTIVE" />
-   </component>
-   <component name="ChangeListManager">
--    <list default="true" id="62d33fe8-2ec7-4d31-9bba-7fa36bc76fcb" name="Changes" comment="planning">
--      <change afterPath="$PROJECT_DIR$/auxil/report.aux" afterDir="false" />
--      <change afterPath="$PROJECT_DIR$/auxil/report.log" afterDir="false" />
--      <change afterPath="$PROJECT_DIR$/out/report.pdf" afterDir="false" />
--      <change afterPath="$PROJECT_DIR$/out/report.synctex.gz" afterDir="false" />
--      <change beforePath="$PROJECT_DIR$/.idea/MoCaDR_proj1.iml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/MoCaDR_proj1.iml" afterDir="false" />
--      <change beforePath="$PROJECT_DIR$/.idea/misc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/misc.xml" afterDir="false" />
--      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_02_04_2022_09_45_[Changes]/shelved.patch" beforeDir="false" />
--      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_02_04_2022_09_45__Changes_.xml" beforeDir="false" />
--      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_09_04_2022_08_52__Changes_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_09_04_2022_08_52__Changes_.xml" afterDir="false" />
-+    <list default="true" id="62d33fe8-2ec7-4d31-9bba-7fa36bc76fcb" name="Changes" comment="Report">
-       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
--      <change beforePath="$PROJECT_DIR$/Report/auxil/report.aux" beforeDir="false" afterPath="$PROJECT_DIR$/Report/auxil/report.aux" afterDir="false" />
--      <change beforePath="$PROJECT_DIR$/Report/auxil/report.log" beforeDir="false" afterPath="$PROJECT_DIR$/Report/auxil/report.log" afterDir="false" />
--      <change beforePath="$PROJECT_DIR$/Report/out/report.pdf" beforeDir="false" afterPath="$PROJECT_DIR$/Report/out/report.pdf" afterDir="false" />
--      <change beforePath="$PROJECT_DIR$/Report/out/report.synctex.gz" beforeDir="false" afterPath="$PROJECT_DIR$/Report/out/report.synctex.gz" afterDir="false" />
-       <change beforePath="$PROJECT_DIR$/Report/report.tex" beforeDir="false" afterPath="$PROJECT_DIR$/Report/report.tex" afterDir="false" />
-+      <change beforePath="$PROJECT_DIR$/auxil/report.aux" beforeDir="false" afterPath="$PROJECT_DIR$/auxil/report.aux" afterDir="false" />
-+      <change beforePath="$PROJECT_DIR$/auxil/report.log" beforeDir="false" afterPath="$PROJECT_DIR$/auxil/report.log" afterDir="false" />
-+      <change beforePath="$PROJECT_DIR$/out/report.pdf" beforeDir="false" afterPath="$PROJECT_DIR$/out/report.pdf" afterDir="false" />
-+      <change beforePath="$PROJECT_DIR$/out/report.synctex.gz" beforeDir="false" afterPath="$PROJECT_DIR$/out/report.synctex.gz" afterDir="false" />
-+      <change beforePath="$PROJECT_DIR$/src/presenting_results.ipynb" beforeDir="false" afterPath="$PROJECT_DIR$/src/presenting_results.ipynb" afterDir="false" />
-     </list>
-     <option name="SHOW_DIALOG" value="false" />
-     <option name="HIGHLIGHT_CONFLICTS" value="true" />
-@@ -258,7 +250,8 @@
-       <workItem from="1649407349351" duration="1672000" />
-       <workItem from="1649429201664" duration="3019000" />
-       <workItem from="1649438274438" duration="1751000" />
--      <workItem from="1649535983650" duration="89000" />
-+      <workItem from="1649535983650" duration="487000" />
-+      <workItem from="1649583240166" duration="11104000" />
-     </task>
-     <task id="LOCAL-00001" summary="a">
-       <created>1646775274557</created>
-@@ -449,7 +442,14 @@
-       <option name="project" value="LOCAL" />
-       <updated>1649492068004</updated>
-     </task>
--    <option name="localTasksCounter" value="28" />
-+    <task id="LOCAL-00028" summary="Report">
-+      <created>1649536105319</created>
-+      <option name="number" value="00028" />
-+      <option name="presentableId" value="LOCAL-00028" />
-+      <option name="project" value="LOCAL" />
-+      <updated>1649536105319</updated>
-+    </task>
-+    <option name="localTasksCounter" value="29" />
-     <servers />
-   </component>
-   <component name="TypeScriptGeneratedFilesManager">
-@@ -482,7 +482,8 @@
-     <MESSAGE value="Computing stop condition svd2" />
-     <MESSAGE value="Presenting results for NMF" />
-     <MESSAGE value="computing results" />
--    <option name="LAST_COMMIT_MESSAGE" value="computing results" />
-+    <MESSAGE value="Report" />
-+    <option name="LAST_COMMIT_MESSAGE" value="Report" />
-   </component>
-   <component name="com.intellij.coverage.CoverageDataManagerImpl">
-     <SUITE FILE_PATH="coverage/main_py$performing_algorithms.coverage" NAME="performing_algorithms Coverage Results" MODIFIED="1647784050444" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/src" />
Index: .idea/shelf/Uncommitted_changes_before_Update_at_12_04_2022_10_56_[Changes]/shelved.patch
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_12_04_2022_10_56_[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_12_04_2022_10_56_[Changes]/shelved.patch
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_12_04_2022_10_56_[Changes]/shelved.patch	
+++ /dev/null	
@@ -1,97 +0,0 @@
-Index: .idea/shelf/Uncommitted_changes_before_Update_at_04_04_2022_19_49__Changes_.xml
-===================================================================
-diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_04_04_2022_19_49__Changes_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_04_04_2022_19_49__Changes_.xml
-deleted file mode 100644
---- a/.idea/shelf/Uncommitted_changes_before_Update_at_04_04_2022_19_49__Changes_.xml	(revision b652e825d5e8d14b0d1b2a18327a95cfc48bb3df)
-+++ /dev/null	(revision b652e825d5e8d14b0d1b2a18327a95cfc48bb3df)
-@@ -1,4 +0,0 @@
--<changelist name="Uncommitted_changes_before_Update_at_04_04_2022_19_49_[Changes]" date="1649094589962" recycled="true" deleted="true">
--  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_04_04_2022_19_49_[Changes]/shelved.patch" />
--  <option name="DESCRIPTION" value="Uncommitted changes before Update at 04.04.2022 19:49 [Changes]" />
--</changelist>
-\ No newline at end of file
-Index: .idea/misc.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ProjectRootManager\" version=\"2\" project-jdk-name=\"Python 3.10 (MoCaDR_proj1)\" project-jdk-type=\"Python SDK\" />\r\n  <component name=\"RMarkdownSettings\">\r\n    <option name=\"renderProfiles\">\r\n      <map>\r\n        <entry key=\"file://$PROJECT_DIR$/Report/tescik.rmd\">\r\n          <value>\r\n            <RMarkdownRenderProfile>\r\n              <option name=\"outputDirectoryUrl\" value=\"file://$PROJECT_DIR$/Report\" />\r\n            </RMarkdownRenderProfile>\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n</project>
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/.idea/misc.xml b/.idea/misc.xml
---- a/.idea/misc.xml	(revision b652e825d5e8d14b0d1b2a18327a95cfc48bb3df)
-+++ b/.idea/misc.xml	(date 1649711548348)
-@@ -1,6 +1,6 @@
- <?xml version="1.0" encoding="UTF-8"?>
- <project version="4">
--  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.10 (MoCaDR_proj1)" project-jdk-type="Python SDK" />
-+  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.10" project-jdk-type="Python SDK" />
-   <component name="RMarkdownSettings">
-     <option name="renderProfiles">
-       <map>
-Index: .idea/MoCaDR_proj1.iml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<module type=\"PYTHON_MODULE\" version=\"4\">\r\n  <component name=\"NewModuleRootManager\">\r\n    <content url=\"file://$MODULE_DIR$\">\r\n      <sourceFolder url=\"file://$MODULE_DIR$/src\" isTestSource=\"false\" />\r\n    </content>\r\n    <orderEntry type=\"jdk\" jdkName=\"Python 3.10 (MoCaDR_proj1)\" jdkType=\"Python SDK\" />\r\n    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\r\n  </component>\r\n</module>
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/.idea/MoCaDR_proj1.iml b/.idea/MoCaDR_proj1.iml
---- a/.idea/MoCaDR_proj1.iml	(revision b652e825d5e8d14b0d1b2a18327a95cfc48bb3df)
-+++ b/.idea/MoCaDR_proj1.iml	(date 1649711548303)
-@@ -4,7 +4,7 @@
-     <content url="file://$MODULE_DIR$">
-       <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
-     </content>
--    <orderEntry type="jdk" jdkName="Python 3.10 (MoCaDR_proj1)" jdkType="Python SDK" />
-+    <orderEntry type="jdk" jdkName="Python 3.10" jdkType="Python SDK" />
-     <orderEntry type="sourceFolder" forTests="false" />
-   </component>
- </module>
-\ No newline at end of file
-Index: .idea/workspace.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"62d33fe8-2ec7-4d31-9bba-7fa36bc76fcb\" name=\"Changes\" comment=\"Report\" />\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"RMarkdown.document\" />\r\n        <option value=\"Jupyter Notebook\" />\r\n        <option value=\"Python Script\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitSEFilterConfiguration\">\r\n    <file-type-list>\r\n      <filtered-out-file-type name=\"LOCAL_BRANCH\" />\r\n      <filtered-out-file-type name=\"REMOTE_BRANCH\" />\r\n      <filtered-out-file-type name=\"TAG\" />\r\n      <filtered-out-file-type name=\"COMMIT_BY_MESSAGE\" />\r\n    </file-type-list>\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"267VjyGJ9wr8oG7c6vyJzNQTvFk\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\">\r\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">\r\n    <property name=\"ASKED_ADD_EXTERNAL_FILES\" value=\"true\" />\r\n    <property name=\"ASKED_SHARE_PROJECT_CONFIGURATION_FILES\" value=\"true\" />\r\n    <property name=\"RunOnceActivity.OpenProjectViewOnStart\" value=\"true\" />\r\n    <property name=\"RunOnceActivity.ShowReadmeOnStart\" value=\"true\" />\r\n    <property name=\"SHARE_PROJECT_CONFIGURATION_FILES\" value=\"true\" />\r\n    <property name=\"WebServerToolWindowFactoryState\" value=\"false\" />\r\n    <property name=\"last_opened_file_path\" value=\"$PROJECT_DIR$/Report\" />\r\n    <property name=\"node.js.detected.package.eslint\" value=\"true\" />\r\n    <property name=\"node.js.detected.package.tslint\" value=\"true\" />\r\n    <property name=\"node.js.selected.package.eslint\" value=\"(autodetect)\" />\r\n    <property name=\"node.js.selected.package.tslint\" value=\"(autodetect)\" />\r\n    <property name=\"settings.editor.selected.configurable\" value=\"configurable.group.language\" />\r\n  </component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"D:\\Studia\\MoCaDR_proj1\\Report\" />\r\n      <recent name=\"D:\\Studia\\MoCaDR_proj1\" />\r\n    </key>\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"D:\\Studia\\MoCaDR_proj1\\Report\\fig\\syf\" />\r\n      <recent name=\"D:\\Studia\\MoCaDR_proj1\\Results\\Syf\" />\r\n      <recent name=\"D:\\Studia\\MoCaDR_proj1\\Report\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\" selected=\"LaTeX.report\">\r\n    <configuration name=\"report\" type=\"LATEX_RUN_CONFIGURATION\" factoryName=\"LaTeX configuration factory\" temporary=\"true\">\r\n      <texify>\r\n        <compiler>PDFLATEX</compiler>\r\n        <compiler-path />\r\n        <sumatra-path />\r\n        <pdf-viewer>SUMATRA</pdf-viewer>\r\n        <viewer-command />\r\n        <compiler-arguments />\r\n        <envs />\r\n        <main-file>$PROJECT_DIR$/Report/report.tex</main-file>\r\n        <output-path>$PROJECT_DIR$/Report/out</output-path>\r\n        <auxil-path>$PROJECT_DIR$/Report/auxil</auxil-path>\r\n        <compile-twice>false</compile-twice>\r\n        <output-format>PDF</output-format>\r\n        <latex-distribution>MIKTEX</latex-distribution>\r\n        <has-been-run>true</has-been-run>\r\n        <bib-run-config>[]</bib-run-config>\r\n        <makeindex-run-config>[]</makeindex-run-config>\r\n      </texify>\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"compute_results3\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"MoCaDR_proj1\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/src\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/src/compute_results3.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"compute_results_sgd_test\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"MoCaDR_proj1\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/src\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/src/compute_results_sgd_test.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"manipulating_datasets\" type=\"PythonConfigurationType\" factoryName=\"Python\" nameIsGenerated=\"true\">\r\n      <module name=\"MoCaDR_proj1\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"D:\\Studia\\MoCaDR_proj1\\manipulating_datasets.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"performing_algorithms\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"MoCaDR_proj1\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/src\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/src/performing_algorithms.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"splitting_data\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"MoCaDR_proj1\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/splitting_data.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <list>\r\n      <item itemvalue=\"LaTeX.report\" />\r\n      <item itemvalue=\"Python.manipulating_datasets\" />\r\n      <item itemvalue=\"Python.compute_results3\" />\r\n      <item itemvalue=\"Python.performing_algorithms\" />\r\n      <item itemvalue=\"Python.splitting_data\" />\r\n      <item itemvalue=\"Python.compute_results_sgd_test\" />\r\n    </list>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"LaTeX.report\" />\r\n        <item itemvalue=\"Python.compute_results_sgd_test\" />\r\n        <item itemvalue=\"Python.splitting_data\" />\r\n        <item itemvalue=\"Python.performing_algorithms\" />\r\n        <item itemvalue=\"Python.compute_results3\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"SvnConfiguration\">\r\n    <configuration>C:\\Users\\dmika\\AppData\\Roaming\\Subversion</configuration>\r\n  </component>\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"62d33fe8-2ec7-4d31-9bba-7fa36bc76fcb\" name=\"Changes\" comment=\"\" />\r\n      <created>1646774751311</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1646774751311</updated>\r\n      <workItem from=\"1646774754054\" duration=\"26000\" />\r\n      <workItem from=\"1646774814002\" duration=\"835000\" />\r\n      <workItem from=\"1646775670059\" duration=\"47000\" />\r\n      <workItem from=\"1646775727774\" duration=\"757000\" />\r\n      <workItem from=\"1646816479175\" duration=\"461000\" />\r\n      <workItem from=\"1646896158453\" duration=\"762000\" />\r\n      <workItem from=\"1646896945682\" duration=\"630000\" />\r\n      <workItem from=\"1646897595717\" duration=\"2651000\" />\r\n      <workItem from=\"1646900622776\" duration=\"425000\" />\r\n      <workItem from=\"1646915517163\" duration=\"449000\" />\r\n      <workItem from=\"1646915983800\" duration=\"240000\" />\r\n      <workItem from=\"1646916258164\" duration=\"389000\" />\r\n      <workItem from=\"1646916663441\" duration=\"393000\" />\r\n      <workItem from=\"1646933050771\" duration=\"1105000\" />\r\n      <workItem from=\"1646936230049\" duration=\"1064000\" />\r\n      <workItem from=\"1647027781891\" duration=\"1279000\" />\r\n      <workItem from=\"1647071928401\" duration=\"2390000\" />\r\n      <workItem from=\"1647181792640\" duration=\"2955000\" />\r\n      <workItem from=\"1647276453225\" duration=\"264000\" />\r\n      <workItem from=\"1647276734574\" duration=\"7710000\" />\r\n      <workItem from=\"1647699257802\" duration=\"1713000\" />\r\n      <workItem from=\"1647774897107\" duration=\"5656000\" />\r\n      <workItem from=\"1648326375030\" duration=\"985000\" />\r\n      <workItem from=\"1648327394372\" duration=\"485000\" />\r\n      <workItem from=\"1648481964443\" duration=\"4660000\" />\r\n      <workItem from=\"1648576643019\" duration=\"4941000\" />\r\n      <workItem from=\"1648885683106\" duration=\"2799000\" />\r\n      <workItem from=\"1649100586613\" duration=\"401000\" />\r\n      <workItem from=\"1649142695450\" duration=\"1248000\" />\r\n      <workItem from=\"1649154173111\" duration=\"1535000\" />\r\n      <workItem from=\"1649225210342\" duration=\"2520000\" />\r\n      <workItem from=\"1649252977347\" duration=\"33000\" />\r\n      <workItem from=\"1649256897698\" duration=\"20000\" />\r\n      <workItem from=\"1649263859461\" duration=\"4502000\" />\r\n      <workItem from=\"1649340598453\" duration=\"3005000\" />\r\n      <workItem from=\"1649345448932\" duration=\"596000\" />\r\n      <workItem from=\"1649407349351\" duration=\"1672000\" />\r\n      <workItem from=\"1649429201664\" duration=\"3019000\" />\r\n      <workItem from=\"1649438274438\" duration=\"1751000\" />\r\n      <workItem from=\"1649686874514\" duration=\"78000\" />\r\n      <workItem from=\"1649692535120\" duration=\"7952000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"a\">\r\n      <created>1646775274557</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646775274557</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"init commit\">\r\n      <created>1646775361377</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646775361377</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"init commit\">\r\n      <created>1646775521666</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646775521666</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"init commit\">\r\n      <created>1646775784756</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646775784756</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"init commit\">\r\n      <created>1646775870305</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646775870305</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"Adding dataset\">\r\n      <created>1646816860800</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646816860800</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"Setting up LaTeX\">\r\n      <created>1646898995949</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646898995949</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00008\" summary=\"Setting up LaTeX\">\r\n      <created>1646900639924</created>\r\n      <option name=\"number\" value=\"00008\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646900639924</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00009\" summary=\"Cleaning data\">\r\n      <created>1646934068924</created>\r\n      <option name=\"number\" value=\"00009\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646934068924</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00010\" summary=\"Cleaning data\">\r\n      <created>1647028888721</created>\r\n      <option name=\"number\" value=\"00010\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647028888721</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00011\" summary=\"Cleaning data\">\r\n      <created>1647029054319</created>\r\n      <option name=\"number\" value=\"00011\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647029054319</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00012\" summary=\"Tamarka testing\">\r\n      <created>1647163191686</created>\r\n      <option name=\"number\" value=\"00012\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00012\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647163191686</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00013\" summary=\"Experimenting with 'NaN' values\">\r\n      <created>1647168883206</created>\r\n      <option name=\"number\" value=\"00013\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00013\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647168883206</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00014\" summary=\"Experimenting with 'NaN' values\">\r\n      <created>1647175373237</created>\r\n      <option name=\"number\" value=\"00014\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00014\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647175373237</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00015\" summary=\"Removing duplicated packages\">\r\n      <created>1647175629524</created>\r\n      <option name=\"number\" value=\"00015\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00015\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647175629524</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00016\" summary=\"Testing methods\">\r\n      <created>1647184013664</created>\r\n      <option name=\"number\" value=\"00016\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00016\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647184013664</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00017\" summary=\"Testing methods\">\r\n      <created>1647184756535</created>\r\n      <option name=\"number\" value=\"00017\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00017\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647184756535</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00018\" summary=\"SVD opis Tamarka\">\r\n      <created>1647698852885</created>\r\n      <option name=\"number\" value=\"00018\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00018\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647698852885</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00019\" summary=\"SVD opis Tamarka\">\r\n      <created>1647699044053</created>\r\n      <option name=\"number\" value=\"00019\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00019\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647699044053</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00020\" summary=\"SVD opis Tamarka\">\r\n      <created>1647699173625</created>\r\n      <option name=\"number\" value=\"00020\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00020\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647699173625</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00021\" summary=\"Testing SVD2\">\r\n      <created>1648327858794</created>\r\n      <option name=\"number\" value=\"00021\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00021\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1648327858794</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00022\" summary=\"computing results\">\r\n      <created>1649155805892</created>\r\n      <option name=\"number\" value=\"00022\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00022\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1649155805892</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00023\" summary=\"Computing stop condition svd2\">\r\n      <created>1649345310151</created>\r\n      <option name=\"number\" value=\"00023\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00023\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1649345310151</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00024\" summary=\"Computing stop condition svd2\">\r\n      <created>1649408687739</created>\r\n      <option name=\"number\" value=\"00024\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00024\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1649408687739</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00025\" summary=\"Presenting results for NMF\">\r\n      <created>1649408979238</created>\r\n      <option name=\"number\" value=\"00025\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00025\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1649408979239</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00026\" summary=\"computing results\">\r\n      <created>1649434249565</created>\r\n      <option name=\"number\" value=\"00026\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00026\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1649434249565</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00027\" summary=\"computing results\">\r\n      <created>1649492068004</created>\r\n      <option name=\"number\" value=\"00027\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00027\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1649492068004</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00028\" summary=\"computing results\">\r\n      <created>1649518863744</created>\r\n      <option name=\"number\" value=\"00028\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00028\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1649518863744</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00029\" summary=\"Report\">\r\n      <created>1649686912044</created>\r\n      <option name=\"number\" value=\"00029\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00029\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1649686912044</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00030\" summary=\"Report\">\r\n      <created>1649711398768</created>\r\n      <option name=\"number\" value=\"00030\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00030\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1649711398768</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"31\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <option name=\"ADD_EXTERNAL_FILES_SILENTLY\" value=\"true\" />\r\n    <MESSAGE value=\"a\" />\r\n    <MESSAGE value=\"init commit\" />\r\n    <MESSAGE value=\"Adding dataset\" />\r\n    <MESSAGE value=\"Setting up LaTeX\" />\r\n    <MESSAGE value=\"Cleaning data\" />\r\n    <MESSAGE value=\"Tamarka testing\" />\r\n    <MESSAGE value=\"Experimenting with 'NaN' values\" />\r\n    <MESSAGE value=\"Removing duplicated packages\" />\r\n    <MESSAGE value=\"Testing methods\" />\r\n    <MESSAGE value=\"SVD opis Tamarka\" />\r\n    <MESSAGE value=\"Testing SVD2\" />\r\n    <MESSAGE value=\"Computing stop condition svd2\" />\r\n    <MESSAGE value=\"Presenting results for NMF\" />\r\n    <MESSAGE value=\"computing results\" />\r\n    <MESSAGE value=\"Report\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Report\" />\r\n  </component>\r\n  <component name=\"com.intellij.coverage.CoverageDataManagerImpl\">\r\n    <SUITE FILE_PATH=\"coverage/main_py$performing_algorithms.coverage\" NAME=\"performing_algorithms Coverage Results\" MODIFIED=\"1647784050444\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/src\" />\r\n    <SUITE FILE_PATH=\"coverage/main_py$algorithms_script.coverage\" NAME=\"performing_algorithms Coverage Results\" MODIFIED=\"1647535849226\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/src\" />\r\n    <SUITE FILE_PATH=\"coverage/main_py$splitting_manipulating_data.coverage\" NAME=\"splitting_manipulating_data Coverage Results\" MODIFIED=\"1648627073782\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/src\" />\r\n    <SUITE FILE_PATH=\"coverage/main_py$performing_algorithms__1_.coverage\" NAME=\"performing_algorithms (1) Coverage Results\" MODIFIED=\"1648057220868\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/src\" />\r\n    <SUITE FILE_PATH=\"coverage/main_py$splitting_manipulating_data__1_.coverage\" NAME=\"splitting_manipulating_data (1) Coverage Results\" MODIFIED=\"1647870795349\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/src\" />\r\n    <SUITE FILE_PATH=\"coverage/main_py$compute_results3.coverage\" NAME=\"compute_results3 Coverage Results\" MODIFIED=\"1649268385203\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/src\" />\r\n    <SUITE FILE_PATH=\"coverage/MoCaDR_proj1$splitting_data.coverage\" NAME=\"splitting_data Coverage Results\" MODIFIED=\"1647174411611\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\r\n    <SUITE FILE_PATH=\"coverage/main_py$a.coverage\" NAME=\"a Coverage Results\" MODIFIED=\"1648057368569\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/src\" />\r\n    <SUITE FILE_PATH=\"coverage/main_py$algorithm_functions.coverage\" NAME=\"algorithm_functions Coverage Results\" MODIFIED=\"1648826781925\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/src\" />\r\n    <SUITE FILE_PATH=\"coverage/main_py$computing_results.coverage\" NAME=\"computing_results Coverage Results\" MODIFIED=\"1648727756891\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/src\" />\r\n    <SUITE FILE_PATH=\"coverage/main_py$compute_results_sgd_test.coverage\" NAME=\"compute_results_sgd_test Coverage Results\" MODIFIED=\"1649692596753\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/src\" />\r\n  </component>\r\n</project>
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/.idea/workspace.xml b/.idea/workspace.xml
---- a/.idea/workspace.xml	(revision b652e825d5e8d14b0d1b2a18327a95cfc48bb3df)
-+++ b/.idea/workspace.xml	(date 1649753768760)
-@@ -4,7 +4,10 @@
-     <option name="autoReloadType" value="SELECTIVE" />
-   </component>
-   <component name="ChangeListManager">
--    <list default="true" id="62d33fe8-2ec7-4d31-9bba-7fa36bc76fcb" name="Changes" comment="Report" />
-+    <list default="true" id="62d33fe8-2ec7-4d31-9bba-7fa36bc76fcb" name="Changes" comment="Report">
-+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_11_04_2022_17_08__Changes_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_11_04_2022_17_08__Changes_.xml" afterDir="false" />
-+      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-+    </list>
-     <option name="SHOW_DIALOG" value="false" />
-     <option name="HIGHLIGHT_CONFLICTS" value="true" />
-     <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
-@@ -267,7 +270,7 @@
-       <workItem from="1649429201664" duration="3019000" />
-       <workItem from="1649438274438" duration="1751000" />
-       <workItem from="1649686874514" duration="78000" />
--      <workItem from="1649692535120" duration="7952000" />
-+      <workItem from="1649692535120" duration="8090000" />
-     </task>
-     <task id="LOCAL-00001" summary="a">
-       <created>1646775274557</created>
-@@ -479,7 +482,14 @@
-       <option name="project" value="LOCAL" />
-       <updated>1649711398768</updated>
-     </task>
--    <option name="localTasksCounter" value="31" />
-+    <task id="LOCAL-00031" summary="Report">
-+      <created>1649711423174</created>
-+      <option name="number" value="00031" />
-+      <option name="presentableId" value="LOCAL-00031" />
-+      <option name="project" value="LOCAL" />
-+      <updated>1649711423174</updated>
-+    </task>
-+    <option name="localTasksCounter" value="32" />
-     <servers />
-   </component>
-   <component name="TypeScriptGeneratedFilesManager">
Index: .idea/shelf/Uncommitted_changes_before_Update_at_10_04_2022_09_43_[Changes]/shelved.patch
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_10_04_2022_09_43_[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_10_04_2022_09_43_[Changes]/shelved.patch
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_10_04_2022_09_43_[Changes]/shelved.patch	
+++ /dev/null	
@@ -1,164 +0,0 @@
-Index: .idea/shelf/Uncommitted_changes_before_Update_at_02_04_2022_09_45_[Changes]/shelved.patch
-===================================================================
-diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_02_04_2022_09_45_[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_02_04_2022_09_45_[Changes]/shelved.patch
-deleted file mode 100644
---- a/.idea/shelf/Uncommitted_changes_before_Update_at_02_04_2022_09_45_[Changes]/shelved.patch	(revision eaa7efba66c51c4cd4ff3f9635eefb6f78327670)
-+++ /dev/null	(revision eaa7efba66c51c4cd4ff3f9635eefb6f78327670)
-@@ -1,66 +0,0 @@
--Index: .idea/workspace.xml
--IDEA additional info:
--Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
--<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"62d33fe8-2ec7-4d31-9bba-7fa36bc76fcb\" name=\"Changes\" comment=\"Implementing SGD\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/MoCaDR_proj1.iml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/MoCaDR_proj1.iml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/misc.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/misc.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_29_03_2022_08_51__Changes_.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_29_03_2022_08_51__Changes_.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Report/auxil/test.aux\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Report/auxil/test.aux\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Report/auxil/test.log\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Report/auxil/test.log\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Report/out/test.pdf\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Report/out/test.pdf\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Report/out/test.synctex.gz\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Report/out/test.synctex.gz\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Report/test.tex\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Report/test.tex\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/choosing_parameters.ipynb\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/choosing_parameters.ipynb\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/syf1.ipynb\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/syf1.ipynb\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"RMarkdown.document\" />\r\n        <option value=\"Python Script\" />\r\n        <option value=\"Jupyter Notebook\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitSEFilterConfiguration\">\r\n    <file-type-list>\r\n      <filtered-out-file-type name=\"LOCAL_BRANCH\" />\r\n      <filtered-out-file-type name=\"REMOTE_BRANCH\" />\r\n      <filtered-out-file-type name=\"TAG\" />\r\n      <filtered-out-file-type name=\"COMMIT_BY_MESSAGE\" />\r\n    </file-type-list>\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"267VjyGJ9wr8oG7c6vyJzNQTvFk\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\">\r\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">\r\n    <property name=\"ASKED_ADD_EXTERNAL_FILES\" value=\"true\" />\r\n    <property name=\"ASKED_SHARE_PROJECT_CONFIGURATION_FILES\" value=\"true\" />\r\n    <property name=\"RunOnceActivity.OpenProjectViewOnStart\" value=\"true\" />\r\n    <property name=\"RunOnceActivity.ShowReadmeOnStart\" value=\"true\" />\r\n    <property name=\"SHARE_PROJECT_CONFIGURATION_FILES\" value=\"true\" />\r\n    <property name=\"WebServerToolWindowFactoryState\" value=\"false\" />\r\n    <property name=\"last_opened_file_path\" value=\"$PROJECT_DIR$\" />\r\n    <property name=\"node.js.detected.package.eslint\" value=\"true\" />\r\n    <property name=\"node.js.detected.package.tslint\" value=\"true\" />\r\n    <property name=\"node.js.selected.package.eslint\" value=\"(autodetect)\" />\r\n    <property name=\"node.js.selected.package.tslint\" value=\"(autodetect)\" />\r\n    <property name=\"settings.editor.selected.configurable\" value=\"org.jetbrains.plugins.notebooks.jupyter.connections.configuration.JupyterServerConfigurable\" />\r\n  </component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"D:\\Studia\\MoCaDR_proj1\" />\r\n    </key>\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"D:\\Studia\\MoCaDR_proj1\\Report\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\" selected=\"LaTeX.test\">\r\n    <configuration name=\"test\" type=\"LATEX_RUN_CONFIGURATION\" factoryName=\"LaTeX configuration factory\">\r\n      <texify>\r\n        <compiler>PDFLATEX</compiler>\r\n        <compiler-path />\r\n        <sumatra-path />\r\n        <pdf-viewer>SUMATRA</pdf-viewer>\r\n        <viewer-command />\r\n        <compiler-arguments />\r\n        <envs />\r\n        <main-file>$PROJECT_DIR$/Report/test.tex</main-file>\r\n        <output-path>$PROJECT_DIR$/Report/out</output-path>\r\n        <auxil-path>$PROJECT_DIR$/Report/auxil</auxil-path>\r\n        <compile-twice>false</compile-twice>\r\n        <output-format>PDF</output-format>\r\n        <latex-distribution>MIKTEX</latex-distribution>\r\n        <has-been-run>true</has-been-run>\r\n        <bib-run-config>[]</bib-run-config>\r\n        <makeindex-run-config>[]</makeindex-run-config>\r\n      </texify>\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"manipulating_datasets\" type=\"PythonConfigurationType\" factoryName=\"Python\" nameIsGenerated=\"true\">\r\n      <module name=\"MoCaDR_proj1\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"D:\\Studia\\MoCaDR_proj1\\manipulating_datasets.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"performing_algorithms\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"MoCaDR_proj1\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/src\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/src/performing_algorithms.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"splitting_data\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"MoCaDR_proj1\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/splitting_data.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <list>\r\n      <item itemvalue=\"LaTeX.test\" />\r\n      <item itemvalue=\"Python.manipulating_datasets\" />\r\n      <item itemvalue=\"Python.splitting_data\" />\r\n      <item itemvalue=\"Python.performing_algorithms\" />\r\n    </list>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Python.performing_algorithms\" />\r\n        <item itemvalue=\"Python.splitting_data\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"SvnConfiguration\">\r\n    <configuration>C:\\Users\\dmika\\AppData\\Roaming\\Subversion</configuration>\r\n  </component>\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"62d33fe8-2ec7-4d31-9bba-7fa36bc76fcb\" name=\"Changes\" comment=\"\" />\r\n      <created>1646774751311</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1646774751311</updated>\r\n      <workItem from=\"1646774754054\" duration=\"26000\" />\r\n      <workItem from=\"1646774814002\" duration=\"835000\" />\r\n      <workItem from=\"1646775670059\" duration=\"47000\" />\r\n      <workItem from=\"1646775727774\" duration=\"757000\" />\r\n      <workItem from=\"1646816479175\" duration=\"461000\" />\r\n      <workItem from=\"1646896158453\" duration=\"762000\" />\r\n      <workItem from=\"1646896945682\" duration=\"630000\" />\r\n      <workItem from=\"1646897595717\" duration=\"2651000\" />\r\n      <workItem from=\"1646900622776\" duration=\"425000\" />\r\n      <workItem from=\"1646915517163\" duration=\"449000\" />\r\n      <workItem from=\"1646915983800\" duration=\"240000\" />\r\n      <workItem from=\"1646916258164\" duration=\"389000\" />\r\n      <workItem from=\"1646916663441\" duration=\"393000\" />\r\n      <workItem from=\"1646933050771\" duration=\"1105000\" />\r\n      <workItem from=\"1646936230049\" duration=\"1064000\" />\r\n      <workItem from=\"1647027781891\" duration=\"1279000\" />\r\n      <workItem from=\"1647071928401\" duration=\"2390000\" />\r\n      <workItem from=\"1647181792640\" duration=\"2955000\" />\r\n      <workItem from=\"1647276453225\" duration=\"264000\" />\r\n      <workItem from=\"1647276734574\" duration=\"7710000\" />\r\n      <workItem from=\"1647699257802\" duration=\"1713000\" />\r\n      <workItem from=\"1647774897107\" duration=\"5656000\" />\r\n      <workItem from=\"1648326375030\" duration=\"985000\" />\r\n      <workItem from=\"1648327394372\" duration=\"485000\" />\r\n      <workItem from=\"1648481964443\" duration=\"4660000\" />\r\n      <workItem from=\"1648576643019\" duration=\"4941000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"a\">\r\n      <created>1646775274557</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646775274557</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"init commit\">\r\n      <created>1646775361377</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646775361377</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"init commit\">\r\n      <created>1646775521666</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646775521666</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"init commit\">\r\n      <created>1646775784756</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646775784756</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"init commit\">\r\n      <created>1646775870305</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646775870305</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"Adding dataset\">\r\n      <created>1646816860800</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646816860800</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"Setting up LaTeX\">\r\n      <created>1646898995949</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646898995949</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00008\" summary=\"Setting up LaTeX\">\r\n      <created>1646900639924</created>\r\n      <option name=\"number\" value=\"00008\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646900639924</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00009\" summary=\"Cleaning data\">\r\n      <created>1646934068924</created>\r\n      <option name=\"number\" value=\"00009\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646934068924</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00010\" summary=\"Cleaning data\">\r\n      <created>1647028888721</created>\r\n      <option name=\"number\" value=\"00010\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647028888721</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00011\" summary=\"Cleaning data\">\r\n      <created>1647029054319</created>\r\n      <option name=\"number\" value=\"00011\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647029054319</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00012\" summary=\"Tamarka testing\">\r\n      <created>1647163191686</created>\r\n      <option name=\"number\" value=\"00012\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00012\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647163191686</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00013\" summary=\"Experimenting with 'NaN' values\">\r\n      <created>1647168883206</created>\r\n      <option name=\"number\" value=\"00013\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00013\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647168883206</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00014\" summary=\"Experimenting with 'NaN' values\">\r\n      <created>1647175373237</created>\r\n      <option name=\"number\" value=\"00014\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00014\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647175373237</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00015\" summary=\"Removing duplicated packages\">\r\n      <created>1647175629524</created>\r\n      <option name=\"number\" value=\"00015\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00015\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647175629524</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00016\" summary=\"Testing methods\">\r\n      <created>1647184013664</created>\r\n      <option name=\"number\" value=\"00016\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00016\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647184013664</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00017\" summary=\"Testing methods\">\r\n      <created>1647184756535</created>\r\n      <option name=\"number\" value=\"00017\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00017\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647184756535</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00018\" summary=\"SVD opis Tamarka\">\r\n      <created>1647698852885</created>\r\n      <option name=\"number\" value=\"00018\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00018\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647698852885</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00019\" summary=\"SVD opis Tamarka\">\r\n      <created>1647699044053</created>\r\n      <option name=\"number\" value=\"00019\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00019\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647699044053</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00020\" summary=\"SVD opis Tamarka\">\r\n      <created>1647699173625</created>\r\n      <option name=\"number\" value=\"00020\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00020\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647699173625</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00021\" summary=\"Testing SVD2\">\r\n      <created>1648327858794</created>\r\n      <option name=\"number\" value=\"00021\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00021\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1648327858794</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"22\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <option name=\"ADD_EXTERNAL_FILES_SILENTLY\" value=\"true\" />\r\n    <MESSAGE value=\"a\" />\r\n    <MESSAGE value=\"init commit\" />\r\n    <MESSAGE value=\"Adding dataset\" />\r\n    <MESSAGE value=\"Setting up LaTeX\" />\r\n    <MESSAGE value=\"Cleaning data\" />\r\n    <MESSAGE value=\"Tamarka testing\" />\r\n    <MESSAGE value=\"Experimenting with 'NaN' values\" />\r\n    <MESSAGE value=\"Removing duplicated packages\" />\r\n    <MESSAGE value=\"Testing methods\" />\r\n    <MESSAGE value=\"SVD opis Tamarka\" />\r\n    <MESSAGE value=\"Testing SVD2\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Testing SVD2\" />\r\n  </component>\r\n  <component name=\"com.intellij.coverage.CoverageDataManagerImpl\">\r\n    <SUITE FILE_PATH=\"coverage/main_py$performing_algorithms.coverage\" NAME=\"performing_algorithms Coverage Results\" MODIFIED=\"1647784050444\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/src\" />\r\n    <SUITE FILE_PATH=\"coverage/MoCaDR_proj1$splitting_data.coverage\" NAME=\"splitting_data Coverage Results\" MODIFIED=\"1647174411611\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\r\n  </component>\r\n</project>
--Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
--<+>UTF-8
--===================================================================
--diff --git a/.idea/workspace.xml b/.idea/workspace.xml
----- a/.idea/workspace.xml	(revision 442f5fa4930c44b3ed30a2cff1614564dae4b002)
--+++ b/.idea/workspace.xml	(date 1648885439014)
--@@ -4,19 +4,7 @@
--     <option name="autoReloadType" value="SELECTIVE" />
--   </component>
--   <component name="ChangeListManager">
---    <list default="true" id="62d33fe8-2ec7-4d31-9bba-7fa36bc76fcb" name="Changes" comment="Implementing SGD">
---      <change beforePath="$PROJECT_DIR$/.idea/MoCaDR_proj1.iml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/MoCaDR_proj1.iml" afterDir="false" />
---      <change beforePath="$PROJECT_DIR$/.idea/misc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/misc.xml" afterDir="false" />
---      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_29_03_2022_08_51__Changes_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_29_03_2022_08_51__Changes_.xml" afterDir="false" />
---      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
---      <change beforePath="$PROJECT_DIR$/Report/auxil/test.aux" beforeDir="false" afterPath="$PROJECT_DIR$/Report/auxil/test.aux" afterDir="false" />
---      <change beforePath="$PROJECT_DIR$/Report/auxil/test.log" beforeDir="false" afterPath="$PROJECT_DIR$/Report/auxil/test.log" afterDir="false" />
---      <change beforePath="$PROJECT_DIR$/Report/out/test.pdf" beforeDir="false" afterPath="$PROJECT_DIR$/Report/out/test.pdf" afterDir="false" />
---      <change beforePath="$PROJECT_DIR$/Report/out/test.synctex.gz" beforeDir="false" afterPath="$PROJECT_DIR$/Report/out/test.synctex.gz" afterDir="false" />
---      <change beforePath="$PROJECT_DIR$/Report/test.tex" beforeDir="false" afterPath="$PROJECT_DIR$/Report/test.tex" afterDir="false" />
---      <change beforePath="$PROJECT_DIR$/src/choosing_parameters.ipynb" beforeDir="false" afterPath="$PROJECT_DIR$/src/choosing_parameters.ipynb" afterDir="false" />
---      <change beforePath="$PROJECT_DIR$/src/syf1.ipynb" beforeDir="false" afterPath="$PROJECT_DIR$/src/syf1.ipynb" afterDir="false" />
---    </list>
--+    <list default="true" id="62d33fe8-2ec7-4d31-9bba-7fa36bc76fcb" name="Changes" comment="report" />
--     <option name="SHOW_DIALOG" value="false" />
--     <option name="HIGHLIGHT_CONFLICTS" value="true" />
--     <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
--@@ -212,7 +200,7 @@
--       <workItem from="1648326375030" duration="985000" />
--       <workItem from="1648327394372" duration="485000" />
--       <workItem from="1648481964443" duration="4660000" />
---      <workItem from="1648576643019" duration="4941000" />
--+      <workItem from="1648576643019" duration="5862000" />
--     </task>
--     <task id="LOCAL-00001" summary="a">
--       <created>1646775274557</created>
--@@ -361,7 +349,14 @@
--       <option name="project" value="LOCAL" />
--       <updated>1648327858794</updated>
--     </task>
---    <option name="localTasksCounter" value="22" />
--+    <task id="LOCAL-00022" summary="report">
--+      <created>1648583418325</created>
--+      <option name="number" value="00022" />
--+      <option name="presentableId" value="LOCAL-00022" />
--+      <option name="project" value="LOCAL" />
--+      <updated>1648583418325</updated>
--+    </task>
--+    <option name="localTasksCounter" value="23" />
--     <servers />
--   </component>
--   <component name="TypeScriptGeneratedFilesManager">
--@@ -391,7 +386,8 @@
--     <MESSAGE value="Testing methods" />
--     <MESSAGE value="SVD opis Tamarka" />
--     <MESSAGE value="Testing SVD2" />
---    <option name="LAST_COMMIT_MESSAGE" value="Testing SVD2" />
--+    <MESSAGE value="report" />
--+    <option name="LAST_COMMIT_MESSAGE" value="report" />
--   </component>
--   <component name="com.intellij.coverage.CoverageDataManagerImpl">
--     <SUITE FILE_PATH="coverage/main_py$performing_algorithms.coverage" NAME="performing_algorithms Coverage Results" MODIFIED="1647784050444" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/src" />
-Index: .idea/shelf/Uncommitted_changes_before_Update_at_02_04_2022_09_45__Changes_.xml
-===================================================================
-diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_02_04_2022_09_45__Changes_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_02_04_2022_09_45__Changes_.xml
-deleted file mode 100644
---- a/.idea/shelf/Uncommitted_changes_before_Update_at_02_04_2022_09_45__Changes_.xml	(revision eaa7efba66c51c4cd4ff3f9635eefb6f78327670)
-+++ /dev/null	(revision eaa7efba66c51c4cd4ff3f9635eefb6f78327670)
-@@ -1,4 +0,0 @@
--<changelist name="Uncommitted_changes_before_Update_at_02_04_2022_09_45_[Changes]" date="1648885559775" recycled="true" deleted="true">
--  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_02_04_2022_09_45_[Changes]/shelved.patch" />
--  <option name="DESCRIPTION" value="Uncommitted changes before Update at 02.04.2022 09:45 [Changes]" />
--</changelist>
-\ No newline at end of file
-Index: .idea/workspace.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"62d33fe8-2ec7-4d31-9bba-7fa36bc76fcb\" name=\"Changes\" comment=\"computing results\">\r\n      <change afterPath=\"$PROJECT_DIR$/Results/results_sgd_all.csv\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/src/compute_results_sgd_test.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Report/auxil/report.aux\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Report/auxil/report.aux\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Report/auxil/report.log\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Report/auxil/report.log\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Report/out/report.pdf\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Report/out/report.pdf\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Report/out/report.synctex.gz\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Report/out/report.synctex.gz\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/algorithm_functions.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/algorithm_functions.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/syf2.ipynb\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/syf2.ipynb\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"RMarkdown.document\" />\r\n        <option value=\"Jupyter Notebook\" />\r\n        <option value=\"Python Script\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitSEFilterConfiguration\">\r\n    <file-type-list>\r\n      <filtered-out-file-type name=\"LOCAL_BRANCH\" />\r\n      <filtered-out-file-type name=\"REMOTE_BRANCH\" />\r\n      <filtered-out-file-type name=\"TAG\" />\r\n      <filtered-out-file-type name=\"COMMIT_BY_MESSAGE\" />\r\n    </file-type-list>\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"267VjyGJ9wr8oG7c6vyJzNQTvFk\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\">\r\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">\r\n    <property name=\"ASKED_ADD_EXTERNAL_FILES\" value=\"true\" />\r\n    <property name=\"ASKED_SHARE_PROJECT_CONFIGURATION_FILES\" value=\"true\" />\r\n    <property name=\"RunOnceActivity.OpenProjectViewOnStart\" value=\"true\" />\r\n    <property name=\"RunOnceActivity.ShowReadmeOnStart\" value=\"true\" />\r\n    <property name=\"SHARE_PROJECT_CONFIGURATION_FILES\" value=\"true\" />\r\n    <property name=\"WebServerToolWindowFactoryState\" value=\"false\" />\r\n    <property name=\"last_opened_file_path\" value=\"$PROJECT_DIR$/Report\" />\r\n    <property name=\"node.js.detected.package.eslint\" value=\"true\" />\r\n    <property name=\"node.js.detected.package.tslint\" value=\"true\" />\r\n    <property name=\"node.js.selected.package.eslint\" value=\"(autodetect)\" />\r\n    <property name=\"node.js.selected.package.tslint\" value=\"(autodetect)\" />\r\n    <property name=\"settings.editor.selected.configurable\" value=\"configurable.group.language\" />\r\n  </component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"D:\\Studia\\MoCaDR_proj1\\Report\" />\r\n      <recent name=\"D:\\Studia\\MoCaDR_proj1\" />\r\n    </key>\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"D:\\Studia\\MoCaDR_proj1\\Report\\fig\\syf\" />\r\n      <recent name=\"D:\\Studia\\MoCaDR_proj1\\Results\\Syf\" />\r\n      <recent name=\"D:\\Studia\\MoCaDR_proj1\\Report\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\" selected=\"Python.compute_results_sgd_test\">\r\n    <configuration name=\"report\" type=\"LATEX_RUN_CONFIGURATION\" factoryName=\"LaTeX configuration factory\" temporary=\"true\">\r\n      <texify>\r\n        <compiler>PDFLATEX</compiler>\r\n        <compiler-path />\r\n        <sumatra-path />\r\n        <pdf-viewer>SUMATRA</pdf-viewer>\r\n        <viewer-command />\r\n        <compiler-arguments />\r\n        <envs />\r\n        <main-file>$PROJECT_DIR$/Report/report.tex</main-file>\r\n        <output-path>$PROJECT_DIR$/Report/out</output-path>\r\n        <auxil-path>$PROJECT_DIR$/Report/auxil</auxil-path>\r\n        <compile-twice>false</compile-twice>\r\n        <output-format>PDF</output-format>\r\n        <latex-distribution>MIKTEX</latex-distribution>\r\n        <has-been-run>true</has-been-run>\r\n        <bib-run-config>[]</bib-run-config>\r\n        <makeindex-run-config>[]</makeindex-run-config>\r\n      </texify>\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"compute_results3\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"MoCaDR_proj1\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/src\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/src/compute_results3.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"compute_results_sgd_test\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"MoCaDR_proj1\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/src\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/src/compute_results_sgd_test.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"manipulating_datasets\" type=\"PythonConfigurationType\" factoryName=\"Python\" nameIsGenerated=\"true\">\r\n      <module name=\"MoCaDR_proj1\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"D:\\Studia\\MoCaDR_proj1\\manipulating_datasets.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"performing_algorithms\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"MoCaDR_proj1\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/src\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/src/performing_algorithms.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"splitting_data\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"MoCaDR_proj1\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/splitting_data.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <list>\r\n      <item itemvalue=\"LaTeX.report\" />\r\n      <item itemvalue=\"Python.manipulating_datasets\" />\r\n      <item itemvalue=\"Python.compute_results3\" />\r\n      <item itemvalue=\"Python.performing_algorithms\" />\r\n      <item itemvalue=\"Python.splitting_data\" />\r\n      <item itemvalue=\"Python.compute_results_sgd_test\" />\r\n    </list>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Python.compute_results_sgd_test\" />\r\n        <item itemvalue=\"LaTeX.report\" />\r\n        <item itemvalue=\"Python.splitting_data\" />\r\n        <item itemvalue=\"Python.performing_algorithms\" />\r\n        <item itemvalue=\"Python.compute_results3\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"SvnConfiguration\">\r\n    <configuration>C:\\Users\\dmika\\AppData\\Roaming\\Subversion</configuration>\r\n  </component>\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"62d33fe8-2ec7-4d31-9bba-7fa36bc76fcb\" name=\"Changes\" comment=\"\" />\r\n      <created>1646774751311</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1646774751311</updated>\r\n      <workItem from=\"1646774754054\" duration=\"26000\" />\r\n      <workItem from=\"1646774814002\" duration=\"835000\" />\r\n      <workItem from=\"1646775670059\" duration=\"47000\" />\r\n      <workItem from=\"1646775727774\" duration=\"757000\" />\r\n      <workItem from=\"1646816479175\" duration=\"461000\" />\r\n      <workItem from=\"1646896158453\" duration=\"762000\" />\r\n      <workItem from=\"1646896945682\" duration=\"630000\" />\r\n      <workItem from=\"1646897595717\" duration=\"2651000\" />\r\n      <workItem from=\"1646900622776\" duration=\"425000\" />\r\n      <workItem from=\"1646915517163\" duration=\"449000\" />\r\n      <workItem from=\"1646915983800\" duration=\"240000\" />\r\n      <workItem from=\"1646916258164\" duration=\"389000\" />\r\n      <workItem from=\"1646916663441\" duration=\"393000\" />\r\n      <workItem from=\"1646933050771\" duration=\"1105000\" />\r\n      <workItem from=\"1646936230049\" duration=\"1064000\" />\r\n      <workItem from=\"1647027781891\" duration=\"1279000\" />\r\n      <workItem from=\"1647071928401\" duration=\"2390000\" />\r\n      <workItem from=\"1647181792640\" duration=\"2955000\" />\r\n      <workItem from=\"1647276453225\" duration=\"264000\" />\r\n      <workItem from=\"1647276734574\" duration=\"7710000\" />\r\n      <workItem from=\"1647699257802\" duration=\"1713000\" />\r\n      <workItem from=\"1647774897107\" duration=\"5656000\" />\r\n      <workItem from=\"1648326375030\" duration=\"985000\" />\r\n      <workItem from=\"1648327394372\" duration=\"485000\" />\r\n      <workItem from=\"1648481964443\" duration=\"4660000\" />\r\n      <workItem from=\"1648576643019\" duration=\"4941000\" />\r\n      <workItem from=\"1648885683106\" duration=\"2799000\" />\r\n      <workItem from=\"1649100586613\" duration=\"401000\" />\r\n      <workItem from=\"1649142695450\" duration=\"1248000\" />\r\n      <workItem from=\"1649154173111\" duration=\"1535000\" />\r\n      <workItem from=\"1649225210342\" duration=\"2520000\" />\r\n      <workItem from=\"1649252977347\" duration=\"33000\" />\r\n      <workItem from=\"1649256897698\" duration=\"20000\" />\r\n      <workItem from=\"1649263859461\" duration=\"4502000\" />\r\n      <workItem from=\"1649340598453\" duration=\"3005000\" />\r\n      <workItem from=\"1649345448932\" duration=\"596000\" />\r\n      <workItem from=\"1649407349351\" duration=\"1672000\" />\r\n      <workItem from=\"1649429201664\" duration=\"3019000\" />\r\n      <workItem from=\"1649438274438\" duration=\"1751000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"a\">\r\n      <created>1646775274557</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646775274557</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"init commit\">\r\n      <created>1646775361377</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646775361377</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"init commit\">\r\n      <created>1646775521666</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646775521666</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"init commit\">\r\n      <created>1646775784756</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646775784756</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"init commit\">\r\n      <created>1646775870305</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646775870305</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"Adding dataset\">\r\n      <created>1646816860800</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646816860800</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"Setting up LaTeX\">\r\n      <created>1646898995949</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646898995949</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00008\" summary=\"Setting up LaTeX\">\r\n      <created>1646900639924</created>\r\n      <option name=\"number\" value=\"00008\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646900639924</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00009\" summary=\"Cleaning data\">\r\n      <created>1646934068924</created>\r\n      <option name=\"number\" value=\"00009\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646934068924</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00010\" summary=\"Cleaning data\">\r\n      <created>1647028888721</created>\r\n      <option name=\"number\" value=\"00010\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647028888721</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00011\" summary=\"Cleaning data\">\r\n      <created>1647029054319</created>\r\n      <option name=\"number\" value=\"00011\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647029054319</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00012\" summary=\"Tamarka testing\">\r\n      <created>1647163191686</created>\r\n      <option name=\"number\" value=\"00012\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00012\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647163191686</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00013\" summary=\"Experimenting with 'NaN' values\">\r\n      <created>1647168883206</created>\r\n      <option name=\"number\" value=\"00013\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00013\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647168883206</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00014\" summary=\"Experimenting with 'NaN' values\">\r\n      <created>1647175373237</created>\r\n      <option name=\"number\" value=\"00014\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00014\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647175373237</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00015\" summary=\"Removing duplicated packages\">\r\n      <created>1647175629524</created>\r\n      <option name=\"number\" value=\"00015\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00015\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647175629524</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00016\" summary=\"Testing methods\">\r\n      <created>1647184013664</created>\r\n      <option name=\"number\" value=\"00016\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00016\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647184013664</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00017\" summary=\"Testing methods\">\r\n      <created>1647184756535</created>\r\n      <option name=\"number\" value=\"00017\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00017\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647184756535</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00018\" summary=\"SVD opis Tamarka\">\r\n      <created>1647698852885</created>\r\n      <option name=\"number\" value=\"00018\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00018\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647698852885</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00019\" summary=\"SVD opis Tamarka\">\r\n      <created>1647699044053</created>\r\n      <option name=\"number\" value=\"00019\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00019\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647699044053</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00020\" summary=\"SVD opis Tamarka\">\r\n      <created>1647699173625</created>\r\n      <option name=\"number\" value=\"00020\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00020\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647699173625</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00021\" summary=\"Testing SVD2\">\r\n      <created>1648327858794</created>\r\n      <option name=\"number\" value=\"00021\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00021\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1648327858794</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00022\" summary=\"computing results\">\r\n      <created>1649155805892</created>\r\n      <option name=\"number\" value=\"00022\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00022\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1649155805892</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00023\" summary=\"Computing stop condition svd2\">\r\n      <created>1649345310151</created>\r\n      <option name=\"number\" value=\"00023\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00023\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1649345310151</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00024\" summary=\"Computing stop condition svd2\">\r\n      <created>1649408687739</created>\r\n      <option name=\"number\" value=\"00024\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00024\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1649408687739</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00025\" summary=\"Presenting results for NMF\">\r\n      <created>1649408979238</created>\r\n      <option name=\"number\" value=\"00025\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00025\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1649408979239</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00026\" summary=\"computing results\">\r\n      <created>1649434249565</created>\r\n      <option name=\"number\" value=\"00026\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00026\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1649434249565</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00027\" summary=\"computing results\">\r\n      <created>1649492068004</created>\r\n      <option name=\"number\" value=\"00027\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00027\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1649492068004</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00028\" summary=\"computing results\">\r\n      <created>1649518863744</created>\r\n      <option name=\"number\" value=\"00028\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00028\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1649518863744</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"29\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <option name=\"ADD_EXTERNAL_FILES_SILENTLY\" value=\"true\" />\r\n    <MESSAGE value=\"a\" />\r\n    <MESSAGE value=\"init commit\" />\r\n    <MESSAGE value=\"Adding dataset\" />\r\n    <MESSAGE value=\"Setting up LaTeX\" />\r\n    <MESSAGE value=\"Cleaning data\" />\r\n    <MESSAGE value=\"Tamarka testing\" />\r\n    <MESSAGE value=\"Experimenting with 'NaN' values\" />\r\n    <MESSAGE value=\"Removing duplicated packages\" />\r\n    <MESSAGE value=\"Testing methods\" />\r\n    <MESSAGE value=\"SVD opis Tamarka\" />\r\n    <MESSAGE value=\"Testing SVD2\" />\r\n    <MESSAGE value=\"Computing stop condition svd2\" />\r\n    <MESSAGE value=\"Presenting results for NMF\" />\r\n    <MESSAGE value=\"computing results\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"computing results\" />\r\n  </component>\r\n  <component name=\"com.intellij.coverage.CoverageDataManagerImpl\">\r\n    <SUITE FILE_PATH=\"coverage/main_py$splitting_manipulating_data.coverage\" NAME=\"splitting_manipulating_data Coverage Results\" MODIFIED=\"1648627073782\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/src\" />\r\n    <SUITE FILE_PATH=\"coverage/main_py$algorithm_functions.coverage\" NAME=\"algorithm_functions Coverage Results\" MODIFIED=\"1648826781925\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/src\" />\r\n    <SUITE FILE_PATH=\"coverage/main_py$computing_results.coverage\" NAME=\"computing_results Coverage Results\" MODIFIED=\"1648727756891\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/src\" />\r\n    <SUITE FILE_PATH=\"coverage/main_py$algorithms_script.coverage\" NAME=\"performing_algorithms Coverage Results\" MODIFIED=\"1647535849226\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/src\" />\r\n    <SUITE FILE_PATH=\"coverage/main_py$splitting_manipulating_data__1_.coverage\" NAME=\"splitting_manipulating_data (1) Coverage Results\" MODIFIED=\"1647870795349\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/src\" />\r\n    <SUITE FILE_PATH=\"coverage/main_py$a.coverage\" NAME=\"a Coverage Results\" MODIFIED=\"1648057368569\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/src\" />\r\n    <SUITE FILE_PATH=\"coverage/main_py$compute_results3.coverage\" NAME=\"compute_results3 Coverage Results\" MODIFIED=\"1649268385203\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/src\" />\r\n    <SUITE FILE_PATH=\"coverage/main_py$compute_results_sgd_test.coverage\" NAME=\"compute_results_sgd_test Coverage Results\" MODIFIED=\"1649528622400\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/src\" />\r\n    <SUITE FILE_PATH=\"coverage/MoCaDR_proj1$splitting_data.coverage\" NAME=\"splitting_data Coverage Results\" MODIFIED=\"1647174411611\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\r\n    <SUITE FILE_PATH=\"coverage/main_py$performing_algorithms__1_.coverage\" NAME=\"performing_algorithms (1) Coverage Results\" MODIFIED=\"1648057220868\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/src\" />\r\n    <SUITE FILE_PATH=\"coverage/main_py$performing_algorithms.coverage\" NAME=\"performing_algorithms Coverage Results\" MODIFIED=\"1648365686686\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/src\" />\r\n  </component>\r\n</project>
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/.idea/workspace.xml b/.idea/workspace.xml
---- a/.idea/workspace.xml	(revision eaa7efba66c51c4cd4ff3f9635eefb6f78327670)
-+++ b/.idea/workspace.xml	(date 1649576459870)
-@@ -4,17 +4,7 @@
-     <option name="autoReloadType" value="SELECTIVE" />
-   </component>
-   <component name="ChangeListManager">
--    <list default="true" id="62d33fe8-2ec7-4d31-9bba-7fa36bc76fcb" name="Changes" comment="computing results">
--      <change afterPath="$PROJECT_DIR$/Results/results_sgd_all.csv" afterDir="false" />
--      <change afterPath="$PROJECT_DIR$/src/compute_results_sgd_test.py" afterDir="false" />
--      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
--      <change beforePath="$PROJECT_DIR$/Report/auxil/report.aux" beforeDir="false" afterPath="$PROJECT_DIR$/Report/auxil/report.aux" afterDir="false" />
--      <change beforePath="$PROJECT_DIR$/Report/auxil/report.log" beforeDir="false" afterPath="$PROJECT_DIR$/Report/auxil/report.log" afterDir="false" />
--      <change beforePath="$PROJECT_DIR$/Report/out/report.pdf" beforeDir="false" afterPath="$PROJECT_DIR$/Report/out/report.pdf" afterDir="false" />
--      <change beforePath="$PROJECT_DIR$/Report/out/report.synctex.gz" beforeDir="false" afterPath="$PROJECT_DIR$/Report/out/report.synctex.gz" afterDir="false" />
--      <change beforePath="$PROJECT_DIR$/src/algorithm_functions.py" beforeDir="false" afterPath="$PROJECT_DIR$/src/algorithm_functions.py" afterDir="false" />
--      <change beforePath="$PROJECT_DIR$/src/syf2.ipynb" beforeDir="false" afterPath="$PROJECT_DIR$/src/syf2.ipynb" afterDir="false" />
--    </list>
-+    <list default="true" id="62d33fe8-2ec7-4d31-9bba-7fa36bc76fcb" name="Changes" comment="computing results" />
-     <option name="SHOW_DIALOG" value="false" />
-     <option name="HIGHLIGHT_CONFLICTS" value="true" />
-     <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
-@@ -473,7 +463,14 @@
-       <option name="project" value="LOCAL" />
-       <updated>1649518863744</updated>
-     </task>
--    <option name="localTasksCounter" value="29" />
-+    <task id="LOCAL-00029" summary="computing results">
-+      <created>1649533415405</created>
-+      <option name="number" value="00029" />
-+      <option name="presentableId" value="LOCAL-00029" />
-+      <option name="project" value="LOCAL" />
-+      <updated>1649533415405</updated>
-+    </task>
-+    <option name="localTasksCounter" value="30" />
-     <servers />
-   </component>
-   <component name="TypeScriptGeneratedFilesManager">
-Index: src/presenting_results.ipynb
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/src/presenting_results.ipynb b/src/presenting_results.ipynb
---- a/src/presenting_results.ipynb	(revision eaa7efba66c51c4cd4ff3f9635eefb6f78327670)
-+++ b/src/presenting_results.ipynb	(date 1649576587190)
-@@ -229,7 +229,7 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 7,
-+   "execution_count": 2,
-    "outputs": [],
-    "source": [
-     "res_svd2_stop = pd.read_csv('Results/results_stop_svd2.csv')"
-@@ -243,14 +243,14 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 8,
-+   "execution_count": 3,
-    "outputs": [
-     {
-      "data": {
-       "text/plain": "       stop   r      RMSE\n378  0.0086   9  0.879578\n356  0.0085   9  0.880032\n400  0.0087   9  0.880051\n421  0.0088   8  0.880321\n232  0.0079  17  0.880356\n399  0.0087   8  0.880363\n210  0.0078  17  0.880485\n299  0.0082  18  0.880578\n275  0.0081  16  0.880597\n384  0.0086  15  0.880600",
-       "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>stop</th>\n      <th>r</th>\n      <th>RMSE</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>378</th>\n      <td>0.0086</td>\n      <td>9</td>\n      <td>0.879578</td>\n    </tr>\n    <tr>\n      <th>356</th>\n      <td>0.0085</td>\n      <td>9</td>\n      <td>0.880032</td>\n    </tr>\n    <tr>\n      <th>400</th>\n      <td>0.0087</td>\n      <td>9</td>\n      <td>0.880051</td>\n    </tr>\n    <tr>\n      <th>421</th>\n      <td>0.0088</td>\n      <td>8</td>\n      <td>0.880321</td>\n    </tr>\n    <tr>\n      <th>232</th>\n      <td>0.0079</td>\n      <td>17</td>\n      <td>0.880356</td>\n    </tr>\n    <tr>\n      <th>399</th>\n      <td>0.0087</td>\n      <td>8</td>\n      <td>0.880363</td>\n    </tr>\n    <tr>\n      <th>210</th>\n      <td>0.0078</td>\n      <td>17</td>\n      <td>0.880485</td>\n    </tr>\n    <tr>\n      <th>299</th>\n      <td>0.0082</td>\n      <td>18</td>\n      <td>0.880578</td>\n    </tr>\n    <tr>\n      <th>275</th>\n      <td>0.0081</td>\n      <td>16</td>\n      <td>0.880597</td>\n    </tr>\n    <tr>\n      <th>384</th>\n      <td>0.0086</td>\n      <td>15</td>\n      <td>0.880600</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
-      },
--     "execution_count": 8,
-+     "execution_count": 3,
-      "metadata": {},
-      "output_type": "execute_result"
-     }
Index: .idea/shelf/Uncommitted_changes_before_Update_at_09_04_2022_18_50__Changes_.xml
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_09_04_2022_18_50__Changes_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_09_04_2022_18_50__Changes_.xml
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_09_04_2022_18_50__Changes_.xml	
+++ /dev/null	
@@ -1,4 +0,0 @@
-<changelist name="Uncommitted_changes_before_Update_at_09_04_2022_18_50_[Changes]" date="1649523069731" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_09_04_2022_18_50_[Changes]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Update at 09.04.2022 18:50 [Changes]" />
-</changelist>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_09_04_2022_08_52_[Changes]/shelved.patch
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_09_04_2022_08_52_[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_09_04_2022_08_52_[Changes]/shelved.patch
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_09_04_2022_08_52_[Changes]/shelved.patch	
+++ /dev/null	
@@ -1,48 +0,0 @@
-Index: .idea/workspace.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"62d33fe8-2ec7-4d31-9bba-7fa36bc76fcb\" name=\"Changes\" comment=\"computing results\">\r\n      <change afterPath=\"$PROJECT_DIR$/Report/fig/svd2_r_w.png\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/presenting_results.ipynb\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/presenting_results.ipynb\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"RMarkdown.document\" />\r\n        <option value=\"Jupyter Notebook\" />\r\n        <option value=\"Python Script\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitSEFilterConfiguration\">\r\n    <file-type-list>\r\n      <filtered-out-file-type name=\"LOCAL_BRANCH\" />\r\n      <filtered-out-file-type name=\"REMOTE_BRANCH\" />\r\n      <filtered-out-file-type name=\"TAG\" />\r\n      <filtered-out-file-type name=\"COMMIT_BY_MESSAGE\" />\r\n    </file-type-list>\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"267VjyGJ9wr8oG7c6vyJzNQTvFk\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\">\r\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">\r\n    <property name=\"ASKED_ADD_EXTERNAL_FILES\" value=\"true\" />\r\n    <property name=\"ASKED_SHARE_PROJECT_CONFIGURATION_FILES\" value=\"true\" />\r\n    <property name=\"RunOnceActivity.OpenProjectViewOnStart\" value=\"true\" />\r\n    <property name=\"RunOnceActivity.ShowReadmeOnStart\" value=\"true\" />\r\n    <property name=\"SHARE_PROJECT_CONFIGURATION_FILES\" value=\"true\" />\r\n    <property name=\"WebServerToolWindowFactoryState\" value=\"false\" />\r\n    <property name=\"last_opened_file_path\" value=\"$PROJECT_DIR$/Report\" />\r\n    <property name=\"node.js.detected.package.eslint\" value=\"true\" />\r\n    <property name=\"node.js.detected.package.tslint\" value=\"true\" />\r\n    <property name=\"node.js.selected.package.eslint\" value=\"(autodetect)\" />\r\n    <property name=\"node.js.selected.package.tslint\" value=\"(autodetect)\" />\r\n    <property name=\"settings.editor.selected.configurable\" value=\"configurable.group.language\" />\r\n  </component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"D:\\Studia\\MoCaDR_proj1\\Report\" />\r\n      <recent name=\"D:\\Studia\\MoCaDR_proj1\" />\r\n    </key>\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"D:\\Studia\\MoCaDR_proj1\\Report\\fig\\syf\" />\r\n      <recent name=\"D:\\Studia\\MoCaDR_proj1\\Results\\Syf\" />\r\n      <recent name=\"D:\\Studia\\MoCaDR_proj1\\Report\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\" selected=\"LaTeX.report\">\r\n    <configuration name=\"report\" type=\"LATEX_RUN_CONFIGURATION\" factoryName=\"LaTeX configuration factory\" temporary=\"true\">\r\n      <texify>\r\n        <compiler>PDFLATEX</compiler>\r\n        <compiler-path />\r\n        <sumatra-path />\r\n        <pdf-viewer>SUMATRA</pdf-viewer>\r\n        <viewer-command />\r\n        <compiler-arguments />\r\n        <envs />\r\n        <main-file>$PROJECT_DIR$/Report/report.tex</main-file>\r\n        <output-path>$PROJECT_DIR$/Report/out</output-path>\r\n        <auxil-path>$PROJECT_DIR$/Report/auxil</auxil-path>\r\n        <compile-twice>false</compile-twice>\r\n        <output-format>PDF</output-format>\r\n        <latex-distribution>MIKTEX</latex-distribution>\r\n        <has-been-run>true</has-been-run>\r\n        <bib-run-config>[]</bib-run-config>\r\n        <makeindex-run-config>[]</makeindex-run-config>\r\n      </texify>\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"compute_results3\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"MoCaDR_proj1\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/src\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/src/compute_results3.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"manipulating_datasets\" type=\"PythonConfigurationType\" factoryName=\"Python\" nameIsGenerated=\"true\">\r\n      <module name=\"MoCaDR_proj1\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"D:\\Studia\\MoCaDR_proj1\\manipulating_datasets.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"performing_algorithms\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"MoCaDR_proj1\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/src\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/src/performing_algorithms.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"splitting_data\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"MoCaDR_proj1\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/splitting_data.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <list>\r\n      <item itemvalue=\"LaTeX.report\" />\r\n      <item itemvalue=\"Python.manipulating_datasets\" />\r\n      <item itemvalue=\"Python.compute_results3\" />\r\n      <item itemvalue=\"Python.performing_algorithms\" />\r\n      <item itemvalue=\"Python.splitting_data\" />\r\n    </list>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Python.splitting_data\" />\r\n        <item itemvalue=\"Python.performing_algorithms\" />\r\n        <item itemvalue=\"Python.compute_results3\" />\r\n        <item itemvalue=\"LaTeX.report\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"SvnConfiguration\">\r\n    <configuration>C:\\Users\\dmika\\AppData\\Roaming\\Subversion</configuration>\r\n  </component>\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"62d33fe8-2ec7-4d31-9bba-7fa36bc76fcb\" name=\"Changes\" comment=\"\" />\r\n      <created>1646774751311</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1646774751311</updated>\r\n      <workItem from=\"1646774754054\" duration=\"26000\" />\r\n      <workItem from=\"1646774814002\" duration=\"835000\" />\r\n      <workItem from=\"1646775670059\" duration=\"47000\" />\r\n      <workItem from=\"1646775727774\" duration=\"757000\" />\r\n      <workItem from=\"1646816479175\" duration=\"461000\" />\r\n      <workItem from=\"1646896158453\" duration=\"762000\" />\r\n      <workItem from=\"1646896945682\" duration=\"630000\" />\r\n      <workItem from=\"1646897595717\" duration=\"2651000\" />\r\n      <workItem from=\"1646900622776\" duration=\"425000\" />\r\n      <workItem from=\"1646915517163\" duration=\"449000\" />\r\n      <workItem from=\"1646915983800\" duration=\"240000\" />\r\n      <workItem from=\"1646916258164\" duration=\"389000\" />\r\n      <workItem from=\"1646916663441\" duration=\"393000\" />\r\n      <workItem from=\"1646933050771\" duration=\"1105000\" />\r\n      <workItem from=\"1646936230049\" duration=\"1064000\" />\r\n      <workItem from=\"1647027781891\" duration=\"1279000\" />\r\n      <workItem from=\"1647071928401\" duration=\"2390000\" />\r\n      <workItem from=\"1647181792640\" duration=\"2955000\" />\r\n      <workItem from=\"1647276453225\" duration=\"264000\" />\r\n      <workItem from=\"1647276734574\" duration=\"7710000\" />\r\n      <workItem from=\"1647699257802\" duration=\"1713000\" />\r\n      <workItem from=\"1647774897107\" duration=\"5656000\" />\r\n      <workItem from=\"1648326375030\" duration=\"985000\" />\r\n      <workItem from=\"1648327394372\" duration=\"485000\" />\r\n      <workItem from=\"1648481964443\" duration=\"4660000\" />\r\n      <workItem from=\"1648576643019\" duration=\"4941000\" />\r\n      <workItem from=\"1648885683106\" duration=\"2799000\" />\r\n      <workItem from=\"1649100586613\" duration=\"401000\" />\r\n      <workItem from=\"1649142695450\" duration=\"1248000\" />\r\n      <workItem from=\"1649154173111\" duration=\"1535000\" />\r\n      <workItem from=\"1649225210342\" duration=\"2520000\" />\r\n      <workItem from=\"1649252977347\" duration=\"33000\" />\r\n      <workItem from=\"1649256897698\" duration=\"20000\" />\r\n      <workItem from=\"1649263859461\" duration=\"4502000\" />\r\n      <workItem from=\"1649340598453\" duration=\"3005000\" />\r\n      <workItem from=\"1649345448932\" duration=\"596000\" />\r\n      <workItem from=\"1649407349351\" duration=\"1672000\" />\r\n      <workItem from=\"1649429201664\" duration=\"3019000\" />\r\n      <workItem from=\"1649438274438\" duration=\"1751000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"a\">\r\n      <created>1646775274557</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646775274557</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"init commit\">\r\n      <created>1646775361377</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646775361377</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"init commit\">\r\n      <created>1646775521666</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646775521666</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"init commit\">\r\n      <created>1646775784756</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646775784756</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"init commit\">\r\n      <created>1646775870305</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646775870305</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"Adding dataset\">\r\n      <created>1646816860800</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646816860800</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"Setting up LaTeX\">\r\n      <created>1646898995949</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646898995949</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00008\" summary=\"Setting up LaTeX\">\r\n      <created>1646900639924</created>\r\n      <option name=\"number\" value=\"00008\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646900639924</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00009\" summary=\"Cleaning data\">\r\n      <created>1646934068924</created>\r\n      <option name=\"number\" value=\"00009\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646934068924</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00010\" summary=\"Cleaning data\">\r\n      <created>1647028888721</created>\r\n      <option name=\"number\" value=\"00010\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647028888721</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00011\" summary=\"Cleaning data\">\r\n      <created>1647029054319</created>\r\n      <option name=\"number\" value=\"00011\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647029054319</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00012\" summary=\"Tamarka testing\">\r\n      <created>1647163191686</created>\r\n      <option name=\"number\" value=\"00012\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00012\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647163191686</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00013\" summary=\"Experimenting with 'NaN' values\">\r\n      <created>1647168883206</created>\r\n      <option name=\"number\" value=\"00013\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00013\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647168883206</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00014\" summary=\"Experimenting with 'NaN' values\">\r\n      <created>1647175373237</created>\r\n      <option name=\"number\" value=\"00014\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00014\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647175373237</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00015\" summary=\"Removing duplicated packages\">\r\n      <created>1647175629524</created>\r\n      <option name=\"number\" value=\"00015\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00015\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647175629524</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00016\" summary=\"Testing methods\">\r\n      <created>1647184013664</created>\r\n      <option name=\"number\" value=\"00016\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00016\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647184013664</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00017\" summary=\"Testing methods\">\r\n      <created>1647184756535</created>\r\n      <option name=\"number\" value=\"00017\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00017\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647184756535</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00018\" summary=\"SVD opis Tamarka\">\r\n      <created>1647698852885</created>\r\n      <option name=\"number\" value=\"00018\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00018\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647698852885</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00019\" summary=\"SVD opis Tamarka\">\r\n      <created>1647699044053</created>\r\n      <option name=\"number\" value=\"00019\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00019\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647699044053</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00020\" summary=\"SVD opis Tamarka\">\r\n      <created>1647699173625</created>\r\n      <option name=\"number\" value=\"00020\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00020\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647699173625</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00021\" summary=\"Testing SVD2\">\r\n      <created>1648327858794</created>\r\n      <option name=\"number\" value=\"00021\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00021\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1648327858794</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00022\" summary=\"computing results\">\r\n      <created>1649155805892</created>\r\n      <option name=\"number\" value=\"00022\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00022\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1649155805892</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00023\" summary=\"Computing stop condition svd2\">\r\n      <created>1649345310151</created>\r\n      <option name=\"number\" value=\"00023\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00023\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1649345310151</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00024\" summary=\"Computing stop condition svd2\">\r\n      <created>1649408687739</created>\r\n      <option name=\"number\" value=\"00024\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00024\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1649408687739</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00025\" summary=\"Presenting results for NMF\">\r\n      <created>1649408979238</created>\r\n      <option name=\"number\" value=\"00025\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00025\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1649408979239</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00026\" summary=\"computing results\">\r\n      <created>1649434249565</created>\r\n      <option name=\"number\" value=\"00026\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00026\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1649434249565</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"27\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <option name=\"ADD_EXTERNAL_FILES_SILENTLY\" value=\"true\" />\r\n    <MESSAGE value=\"a\" />\r\n    <MESSAGE value=\"init commit\" />\r\n    <MESSAGE value=\"Adding dataset\" />\r\n    <MESSAGE value=\"Setting up LaTeX\" />\r\n    <MESSAGE value=\"Cleaning data\" />\r\n    <MESSAGE value=\"Tamarka testing\" />\r\n    <MESSAGE value=\"Experimenting with 'NaN' values\" />\r\n    <MESSAGE value=\"Removing duplicated packages\" />\r\n    <MESSAGE value=\"Testing methods\" />\r\n    <MESSAGE value=\"SVD opis Tamarka\" />\r\n    <MESSAGE value=\"Testing SVD2\" />\r\n    <MESSAGE value=\"Computing stop condition svd2\" />\r\n    <MESSAGE value=\"Presenting results for NMF\" />\r\n    <MESSAGE value=\"computing results\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"computing results\" />\r\n  </component>\r\n  <component name=\"com.intellij.coverage.CoverageDataManagerImpl\">\r\n    <SUITE FILE_PATH=\"coverage/main_py$splitting_manipulating_data.coverage\" NAME=\"splitting_manipulating_data Coverage Results\" MODIFIED=\"1648627073782\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/src\" />\r\n    <SUITE FILE_PATH=\"coverage/main_py$algorithm_functions.coverage\" NAME=\"algorithm_functions Coverage Results\" MODIFIED=\"1648826781925\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/src\" />\r\n    <SUITE FILE_PATH=\"coverage/main_py$computing_results.coverage\" NAME=\"computing_results Coverage Results\" MODIFIED=\"1648727756891\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/src\" />\r\n    <SUITE FILE_PATH=\"coverage/main_py$algorithms_script.coverage\" NAME=\"performing_algorithms Coverage Results\" MODIFIED=\"1647535849226\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/src\" />\r\n    <SUITE FILE_PATH=\"coverage/main_py$splitting_manipulating_data__1_.coverage\" NAME=\"splitting_manipulating_data (1) Coverage Results\" MODIFIED=\"1647870795349\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/src\" />\r\n    <SUITE FILE_PATH=\"coverage/main_py$a.coverage\" NAME=\"a Coverage Results\" MODIFIED=\"1648057368569\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/src\" />\r\n    <SUITE FILE_PATH=\"coverage/main_py$compute_results3.coverage\" NAME=\"compute_results3 Coverage Results\" MODIFIED=\"1649268385203\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/src\" />\r\n    <SUITE FILE_PATH=\"coverage/MoCaDR_proj1$splitting_data.coverage\" NAME=\"splitting_data Coverage Results\" MODIFIED=\"1647174411611\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\r\n    <SUITE FILE_PATH=\"coverage/main_py$performing_algorithms__1_.coverage\" NAME=\"performing_algorithms (1) Coverage Results\" MODIFIED=\"1648057220868\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/src\" />\r\n    <SUITE FILE_PATH=\"coverage/main_py$performing_algorithms.coverage\" NAME=\"performing_algorithms Coverage Results\" MODIFIED=\"1648365686686\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/src\" />\r\n  </component>\r\n</project>
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/.idea/workspace.xml b/.idea/workspace.xml
---- a/.idea/workspace.xml	(revision e59903d722586b438828abbde22010fc97effb32)
-+++ b/.idea/workspace.xml	(date 1649487155206)
-@@ -4,11 +4,7 @@
-     <option name="autoReloadType" value="SELECTIVE" />
-   </component>
-   <component name="ChangeListManager">
--    <list default="true" id="62d33fe8-2ec7-4d31-9bba-7fa36bc76fcb" name="Changes" comment="computing results">
--      <change afterPath="$PROJECT_DIR$/Report/fig/svd2_r_w.png" afterDir="false" />
--      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
--      <change beforePath="$PROJECT_DIR$/src/presenting_results.ipynb" beforeDir="false" afterPath="$PROJECT_DIR$/src/presenting_results.ipynb" afterDir="false" />
--    </list>
-+    <list default="true" id="62d33fe8-2ec7-4d31-9bba-7fa36bc76fcb" name="Changes" comment="computing results" />
-     <option name="SHOW_DIALOG" value="false" />
-     <option name="HIGHLIGHT_CONFLICTS" value="true" />
-     <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
-@@ -245,7 +241,7 @@
-       <workItem from="1649345448932" duration="596000" />
-       <workItem from="1649407349351" duration="1672000" />
-       <workItem from="1649429201664" duration="3019000" />
--      <workItem from="1649438274438" duration="1751000" />
-+      <workItem from="1649438274438" duration="1777000" />
-     </task>
-     <task id="LOCAL-00001" summary="a">
-       <created>1646775274557</created>
-@@ -429,7 +425,14 @@
-       <option name="project" value="LOCAL" />
-       <updated>1649434249565</updated>
-     </task>
--    <option name="localTasksCounter" value="27" />
-+    <task id="LOCAL-00027" summary="computing results">
-+      <created>1649443572175</created>
-+      <option name="number" value="00027" />
-+      <option name="presentableId" value="LOCAL-00027" />
-+      <option name="project" value="LOCAL" />
-+      <updated>1649443572175</updated>
-+    </task>
-+    <option name="localTasksCounter" value="28" />
-     <servers />
-   </component>
-   <component name="TypeScriptGeneratedFilesManager">
Index: .idea/shelf/Uncommitted_changes_before_Update_at_10_04_2022_09_43__Changes_.xml
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_10_04_2022_09_43__Changes_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_10_04_2022_09_43__Changes_.xml
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_10_04_2022_09_43__Changes_.xml	
+++ /dev/null	
@@ -1,4 +0,0 @@
-<changelist name="Uncommitted_changes_before_Update_at_10_04_2022_09_43_[Changes]" date="1649576605189" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_10_04_2022_09_43_[Changes]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Update at 10.04.2022 09:43 [Changes]" />
-</changelist>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_08_04_2022_21_09__Changes_.xml
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_08_04_2022_21_09__Changes_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_08_04_2022_21_09__Changes_.xml
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_08_04_2022_21_09__Changes_.xml	
+++ /dev/null	
@@ -1,4 +0,0 @@
-<changelist name="Uncommitted_changes_before_Update_at_08_04_2022_21_09_[Changes]" date="1649444976928" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_08_04_2022_21_09_[Changes]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Update at 08.04.2022 21:09 [Changes]" />
-</changelist>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_10_04_2022_22_04_[Changes]/shelved.patch
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_10_04_2022_22_04_[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_10_04_2022_22_04_[Changes]/shelved.patch
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_10_04_2022_22_04_[Changes]/shelved.patch	
+++ /dev/null	
@@ -1,1245 +0,0 @@
-Index: Report/report.tex
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>%! Author = Miszka and Tamarka\r\n%! Date = 10.03.2022\r\n\r\n% Preamble\r\n\\documentclass[11pt]{amsart}\r\n\r\n% Packages\r\n\\usepackage{float}\r\n\\usepackage[T1]{fontenc}\r\n\\usepackage{geometry}\r\n\\usepackage{parskip}\r\n\\usepackage{amsmath}\r\n\\usepackage{amsfonts}\r\n\\usepackage{amsthm}\r\n\\usepackage{amssymb}\r\n\\usepackage{titling}\r\n%\\usepackage{itemize}\r\n\\usepackage{enumerate}\r\n\\usepackage{multirow}\r\n\\usepackage{graphics}\r\n\\usepackage{graphicx}\r\n\\usepackage{caption}\r\n\\usepackage{array}\r\n\\usepackage{xcolor}\r\n\\usepackage{subcaption}\r\n\r\n\r\n\\graphicspath{ {./fig/} }\r\n\r\n\r\n%\\setlength{\\droptitle}{-2cm}\r\n%\\newgeometry{tmargin=1.9cm, bmargin=1.9cm, lmargin=1.7cm, rmargin=1.7cm}\r\n\r\n\\DeclareMathOperator*{\\argmin}{arg\\,min}\r\n\r\n\\newcommand{\\tami}[1]{{\\textcolor{magenta}{#1}}}\r\n\\newcommand{\\domi}[1]{{\\textcolor{green}{#1}}}\r\n\r\n\\author{Tamara Frączek, Dominik Mika}\r\n\\title{Methods of classification and dimensionality reduction - Report 1}\r\n\\date{\\today}\r\n\r\n% Document\r\n\\begin{document}\r\n\\maketitle\r\n\r\n\r\n\\section{Introduction}\r\n\r\n\\subsection*{Statement of the problem}\r\n\r\nIn this task we have to create a movie recommender system for our users.\r\n\\domi{We have users who rated some movies}.\r\nOf course, not every user rated every movie and it is our task to fill those gaps.\r\nSo if one user hasn't seen one movie, we want to predict how he would like it.\r\n\r\n\r\n\r\n%some movies and some information about how our users rate our movies.\r\n%Since, of course, not every user rated every movie, we want to predict how they would like the movies from our list.\r\n\r\n%We have the data containing information how users rate some movies.\r\n%Our task is to create a recommender system, so having only some data we want to predict all ratings.\r\n\r\nFor this purpose we build few algorithms using different methods of predicting.\r\n%These methods are described in ...\r\nOf course different methods will give us different results (errors).\r\nOur task is to tune parameters of those methods and try to get the best possible ratings prediction.\r\n\r\n\r\n\r\n\\subsection*{Description of methods}\r\n\r\nIn this problem, we use different methods which are subset of PCA methods. They are often used for dimensionality reduction and matrix factorization.\r\n\r\n\\subsubsection*{SVD1}\r\n\r\nThis method gets a $n \\times d$ dimensional matrix $Z$ and approximate it by a different matrix $\\tilde{Z}$.\r\nSince we want somehow $\\tilde{Z}$ to maintain only ''the most important'' information from $Z$, then the rank of $\\tilde{Z}$ is to be much smaller than rank of $Z$.\r\nPrecisely, we want to find matrix $\\tilde{Z}_r$ of rank $r$ ($r < rank(Z)$ and $r$ is a parameter), so that $\\|Z - \\tilde{Z}_r\\|$ is small.\r\n\r\nUsing SVD decomposition $Z = U \\Lambda^{\\frac{1}{2}} V^T$ we construct $\\tilde{Z}$ as\r\n\\[\\tilde{Z}_r = U_r \\Lambda_r^{\\frac{1}{2}}V_r^T,\\]\r\nwhere $\\Lambda_r$ contains $r$ biggest eigenvalues of $Z$ and $U_r$, $V_r$ contains only columns corresponding to those eigenvalues.\r\n\r\n\\subsubsection*{SVD2}\r\n\r\nIt is an iterative method.\r\nWe perform SVD1 on matrix $Z$, then on the result of first SVD1 and so on.\r\nThe algorithm can be stopped after a fixed number of iterations or some stop condition can be established.\r\n\r\n\r\n\\subsubsection*{NMF}\r\n\r\nSimilarly as in SVD1 the method obtain a $n \\times d$ dimensional matrix $Z$ and approximate it by $\\tilde{Z}$.\r\nThis time $\\tilde{Z}$ is constructed as $\\tilde{Z}_r = W_r H_r $, where $W_r$ and $H_r$ are matrices with non-negative elements ($W_r$ has $r$ columns and $H_r$ has $r$ rows).\r\nPrecisely, we look for such $W_r$ and $H_r$ that $\\|Z - W_r H_r \\|^2$ is the smallest, where $\\|A\\|^2 = \\sum_{i, j} A_{ij}^2$.\r\n\r\n\\subsubsection*{SGD}\r\n\r\nThis method, similarly as previous ones want to estimate matrix $Z$ with a product of matrices\r\n$W$ and $H$, but not necessarily obtaining the whole matrix $Z$.\r\n\r\nLet's assume that we have only some values of $z_{ij}$ and let call those pairs $(i,j)$ where we know the value of $Z$ as $I$.\r\nWe look for\r\n$$\\argmin_{W, H} \\sum_{(i,j)\\in I} (z_{ij} - w_i^T h_j)^2 + \\lambda(\\|w_i^T\\|^2 + \\|h_j\\|^2),$$\r\nwhere $h_j$ is $j$-th column of $h$, $w_i^T$ is $i$-th row of $W$ and $\\lambda > 0$ is a parameter.\r\nSo roughly speaking we look for $W$ and $H$ such that $Z \\approx WH$ for elements known in $Z$, but also we want $W$ and $H$ to have quite small values (it gives us the part of sum with parameter $\\lambda$).\r\n\r\n\\tami{opis metody...}\r\n\r\n\\section{Implementation}\r\n\r\n\\subsection*{Description of the data}\r\n\r\nOur data contains information 100837 ratings - exactly 610 users rated 9724 movies.\r\nThe columns are: \\textsf{userId} (integer), \\textsf{movieId} (integer) and \\textsf{rating} (integer), where \\textsf{userId} is a unique user id and \\textsf{movieId} is a unique movie id.\r\n\r\n\r\nWe keep this data in two-dimensional matrix of size $n \\times d$ where $n$ is the number of users and $d$ is the number of movies.\r\nIn element $(i,j)$ we put the rate of the user $i$ of the movie $j$.\r\nIf the user $i$ haven't rated the movie $j$ we leave the element empty.\r\n\r\n\r\n\\subsection*{Performing methods}\r\n\r\n\\tami{??tutaj jakaś intuicja po co dzielić dane??}\r\n\r\nSo to be able to evaluate the quality of the programs we split our data to two parts: train set and test set.\r\nThe train set is used to build the programs.\r\nAnd the test set is used to evaluate how our programs work.\r\n\r\n\r\nTo give our programs enough information about every user we split the data so that the train set contain 90\\% of ratings of each user (and the test set the remaining ones).\r\n\\tami{tutaj coś o tym, że będziemy to powtarzać??}\r\n\r\nLet call the matrix containing the data from the train set as $\\boldsymbol{Z}$ and the matrix containing the data from the test set as $\\boldsymbol{T}$.\r\n\r\n\r\n\\subsection*{Quality of the system}\r\n\r\nAssume that our algorithm return a matrix $\\boldsymbol{Z}^{'}$.\r\nThen the quality of our programs is computed as \\textbf{root-mean square error}\r\n\\[\\textsf{RMSE} =\r\n\\sqrt{\\frac{1}{|\\mathcal{T}|} \\sum_{(u,m) \\in \\mathcal{T}} \\left(\\boldsymbol{Z}^{'}[u,m] - \\boldsymbol{T}[u,m] \\right)^2}\\]\r\nwhere $\\mathcal{T}$ contains pairs $(u,m)$ from test set.\r\n\r\n\r\n\\subsection*{Imputing the missing data}\r\n\r\nSince three of our methods (SVD1, SVD2 and NMF) are given a full matrix $\\boldsymbol{Z}$ then they need the missing data to be imputed before performing.\r\n\r\nWe decided to impute the data in 4 different ways:\r\n\\begin{itemize}\r\n    \\item putting 0 everywhere,\r\n    \\item putting global mean everywhere,\r\n    \\item putting row mean,\r\n    \\item putting weighted row and column mean ($\\alpha \\cdot \\text{\\textsf{col\\_mean}} + (1-\\alpha) \\cdot \\text{\\textsf{row\\_mean}}$, where $\\alpha$ is a parameter).\r\n\\end{itemize}\r\n\r\n\\tami{tutaj przemyślenia na temat tego czemu niektóre metody działają lepiej i dlaczego}\r\n\r\n\\section{Parameters tuning and results}\r\n\r\n\\tami{coś o tym, że metody pozostawiaja trochę dowolności?}\r\n\r\nBefore performing our methods and obtaining results we have to set some parameters.\r\n\r\nFirst of all, all the methods need a parameter $r$, which is the rank of matrices in $Z$ decomposition.\r\nSGD needs also learning rate and $\\lambda$.\r\nAnd iteration methods need maximum of possible iterations or a stop condition.\r\n\r\nWhat's more, for all of our methods we want to choose optimal $\\alpha$ in the last method of imputing data.\r\n\r\n\r\n\r\n\\subsection*{SVD1}\r\n\r\n\\tami{co tu napisać}\r\n\r\n\\tami{napisać co to jest to weighted}\r\n\r\nAt the beginning we consider only \\tami{...}\r\n\r\nBelow, we present a graph showing dependence of RMSE on $r$.\r\n\r\n\\begin{figure}[H]\r\n\\centering\r\n\\begin{minipage}{.5\\textwidth}\r\n  \\centering\r\n  \\includegraphics[scale=0.43]{svd1_1}\r\n%  \\captionof{figure}{A figure}\r\n%  \\label{fig:test1}\r\n\\end{minipage}%\r\n\\begin{minipage}{.5\\textwidth}\r\n  \\centering\r\n  \\includegraphics[scale=0.43]{svd1_2}\r\n%  \\captionof{figure}{Another figure}\r\n%  \\label{fig:test2}\r\n\\end{minipage}\r\n\\end{figure}\r\n\r\nAlso we present a table with the lowest RMSE for every imputation method and the parameter $r$ that gave it.\r\n\\begin{table}[H]\r\n\\begin{tabular}{c|ccccc}\r\n& 0 & column means & global mean & weighted means & row means \\\\\r\n\\hline\r\n$r$ & 7 & 13 & 15 & 9 & 6 \\\\\r\nRMSE & 2.866 & 0.946 & 0.987 & 0.877 & 0.904 \\\\\r\n\\end{tabular}\r\n\\end{table}\r\n%wnioski, że ma wpływ jak uzupełniamy\r\n%jakieś wnioski, te zera beznadziejne\r\n%że weighted wypadają najlepiej i chcemy to alfa dobrać optymalnie\r\n\r\nFirst of all, we observe that as we expected the imputation method does matter.\r\nIt is most clearly seen looking at RMSE of data filled with zeros, that for the best $r$ is around $2.9$.\r\nOther methods also differ a lot.\r\nThe lowest RMSE obtain the data filled with weighted data.\r\nThat's why we may suspect that optimizing $\\alpha$ can give even better results.\r\n\r\n%wprowadzenie, że dobieramy alfa\r\n%no i ten rysunek wyżej nam pozwala obciąć r\r\n%że robimy minimalizację po dwóch parametrach\r\n\r\nTo get optimal result we perform optimization with respect to two parameters: $\\alpha$ and $r$.\r\nAs we can see on the picture above only $r$ between $0$ and $50$ give some reasonable results, so we consider only those (we could use all $r$, but it is time consuming).\r\nBelow, we present graph showing dependence of RMSE on $\\alpha$ and $r$ for data \\tami{...}\r\n\r\n\\begin{figure}[H]\r\n\\includegraphics[scale=0.45]{fig/svd1_r_w}\r\n\\label{fig:figure}\r\n\\end{figure}\r\n\r\nBelow we present also table with \\tami{...} lowest RMSE and pairs $(\\alpha, r)$ that gave those.\r\n\\begin{table}[H]\r\n\\begin{tabular}{cc|c}\r\n\\toprule\r\n $\\alpha$ &  $r$ &     RMSE \\\\\r\n\\midrule\r\n\\hline\r\n       0.39 & 10 & 0.873987 \\\\\r\n       0.38 & 10 & 0.874244 \\\\\r\n       0.42 & 10 & 0.874274 \\\\\r\n       0.36 & 10 & 0.874449 \\\\\r\n       0.39 & 11 & 0.874469 \\\\\r\n\\bottomrule\r\n\\end{tabular}\r\n\\end{table}\r\n\r\nAs we can see 10 seems to be the best $r$ and 0.39 seems to be the best $\\alpha$.\r\nAlso in all those results $(\\alpha, r)$ are close to them.\r\n\\tami{So $\\alpha = 0.39$ and $r = 10$ are parameters that we use to perform this method further in the report.}\r\n\r\nSince in columns we keep indexes of movies, it means that our filled data take a bit more information from user ratings mean than from the movie ratings mean.\r\nThat is probably logical \\tami{...}\r\n\r\nTo conclude this subsection we present our best results obtained using these methods.\r\n\\tami{which means what}\r\n\r\n\\tami{tabelka z najlepszymi wynikami}\r\n\r\n\r\n\\subsection*{SVD2}\r\nIn this case we want to proceed as in SVD1 case.\r\n\r\n\\tami{??In SVD2 we make a correction -- czy to tu}\r\n\r\nstop condition\r\n\r\n\r\n\r\n\\begin{figure}[H]\r\n\\centering\r\n\\begin{minipage}{.5\\textwidth}\r\n  \\centering\r\n  \\includegraphics[scale=0.43]{svd2_1}\r\n%  \\captionof{figure}{A figure}\r\n%  \\label{fig:test1}\r\n\\end{minipage}%\r\n\\begin{minipage}{.5\\textwidth}\r\n  \\centering\r\n  \\includegraphics[scale=0.43]{svd2_2}\r\n%  \\captionof{figure}{Another figure}\r\n%  \\label{fig:test2}\r\n\\end{minipage}\r\n\\end{figure}\r\n\r\n\\begin{table}[H]\r\n\\begin{tabular}{c|ccccc}\r\n& 0 & column means & global mean & weighted means & row means \\\\\r\n\\hline\r\n$r$ & 19 & 10 & 6 & 13 & 7 \\\\\r\nRMSE & 2.779 & 0.942 & 0.942 & 0.875 & 0.878 \\\\\r\n\\end{tabular}\r\n\\end{table}\r\n\r\n\\begin{figure}[H]\r\n\\includegraphics[scale = 0.45]{svd2_r_w}\r\n\\end{figure}\r\n\r\n\\begin{table}[H]\r\n\\begin{tabular}{rrr}\r\n\\toprule\r\n$\\alpha$ &  $r$ &     RMSE \\\\\r\n\\midrule\r\n\\hline\r\n       0.25 &  8 & 0.867393 \\\\\r\n       0.26 &  8 & 0.867397 \\\\\r\n       0.24 &  8 & 0.867402 \\\\\r\n       0.27 &  8 & 0.867410 \\\\\r\n       0.28 &  8 & 0.867494 \\\\\r\n\\bottomrule\r\n\\end{tabular}\r\n\\end{table}\r\n\r\n\\subsection*{NMF}\r\n\r\nIn this case since we have only $r$ and $\\alpha$ to find, we proceed in exactly the same way as in the case of SVD.\r\nSo, firstly we present a graph showing dependence of RMSE on $r$. \\tami{in some cases...}\r\n\r\n\\begin{figure}[H]\r\n\\centering\r\n\\begin{minipage}{.5\\textwidth}\r\n  \\centering\r\n  \\includegraphics[scale=0.43]{nmf_1}\r\n%  \\captionof{figure}{A figure}\r\n%  \\label{fig:test1}\r\n\\end{minipage}%\r\n\\begin{minipage}{.5\\textwidth}\r\n  \\centering\r\n  \\includegraphics[scale=0.43]{nmf_2}\r\n%  \\captionof{figure}{Another figure}\r\n%  \\label{fig:test2}\r\n\\end{minipage}\r\n\\end{figure}\r\n\r\nComparing this graph to the graph for SVD we can see that \\tami{tutaj o tym, że jest bardziej takie postrzępione}\r\n\r\nBelow we also present a table with the lowest RMSE for every imputation method and the parameter $r$ that gave it.\r\n\r\n\\begin{table}[H]\r\n\\begin{tabular}{c|ccccc}\r\n& 0 & column means & global mean & weighted means & row means \\\\\r\n\\hline\r\n$r$ & 6 & 47 & 30 & 37 & 15\\\\\r\nRMSE & 2.900 & 0.946 & 0.987 & 0.877 & 0.905 \\\\\r\n\\end{tabular}\r\n\\end{table}\r\n\r\n\\begin{table}[H]\r\n\\begin{tabular}{cc|c}\r\n\\toprule\r\n$\\alpha$ &  $r$ &     RMSE \\\\\r\n\\midrule\r\n\\hline\r\n       0.40 & 37 & 0.874794 \\\\\r\n       0.41 & 37 & 0.874817 \\\\\r\n       0.39 & 18 & 0.874841 \\\\\r\n       0.39 & 37 & 0.874848 \\\\\r\n       0.40 & 18 & 0.874849 \\\\\r\n\\bottomrule\r\n\\end{tabular}\r\n\\end{table}\r\n\r\nAs we can see the parameters $r$ are in general bigger than in previous cases.\r\n\\tami{czy będą bardziej porostrzelane}\r\n\r\nNow we pefrorm the optimization with respect to $\\alpha$ and $r$ and present a graph showing the results.\r\n\r\n\\begin{figure}[H]\r\n\\includegraphics[scale = 0.45]{nmf_r_w}\r\n\\end{figure}\r\n\r\n\\tami{tabelka z najlepszymi r i alpha}\r\n\\tami{jakie r i alpha wybieramy}\r\n\r\n\\tami{tabelka z najlepszymi wynikami}\r\n\r\n\\subsection*{SGD}\r\n\r\n\\begin{figure}[H]\r\n\\centering\r\n\\begin{minipage}{.5\\textwidth}\r\n  \\centering\r\n  \\includegraphics[scale=0.43]{svd1_1}\r\n%  \\captionof{figure}{A figure}\r\n%  \\label{fig:test1}\r\n\\end{minipage}%\r\n\\begin{minipage}{.5\\textwidth}\r\n  \\centering\r\n  \\includegraphics[scale=0.43]{svd1_2}\r\n%  \\captionof{figure}{Another figure}\r\n%  \\label{fig:test2}\r\n\\end{minipage}\r\n\\end{figure}\r\n\r\n\r\n\r\n\\section{}\r\n\r\n\\section{Conclusions}\r\n\r\n\r\n\r\n\\end{document}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/Report/report.tex b/Report/report.tex
---- a/Report/report.tex	(revision cca69d005446496a4a742e962b2259b3813e93f9)
-+++ b/Report/report.tex	(date 1649620328543)
-@@ -103,11 +103,21 @@
- 
- Let's assume that we have only some values of $z_{ij}$ and let call those pairs $(i,j)$ where we know the value of $Z$ as $I$.
- We look for
--$$\argmin_{W, H} \sum_{(i,j)\in I} (z_{ij} - w_i^T h_j)^2 + \lambda(\|w_i^T\|^2 + \|h_j\|^2),$$
-+\[\argmin_{W, H} \sum_{(i,j)\in I} (z_{ij} - w_i^T h_j)^2 + \lambda(\|w_i^T\|^2 + \|h_j\|^2),\]
- where $h_j$ is $j$-th column of $h$, $w_i^T$ is $i$-th row of $W$ and $\lambda > 0$ is a parameter.
- So roughly speaking we look for $W$ and $H$ such that $Z \approx WH$ for elements known in $Z$, but also we want $W$ and $H$ to have quite small values (it gives us the part of sum with parameter $\lambda$).
- 
--\tami{opis metody...}
-+It is an iterative method and work this way: set some $W$ and $H$,
-+\begin{enumerate}
-+    \item sample one pair $(i,j)$ from $I$,
-+    \item let $\tilde{w}_i^T := w_i^T - \eta \cdot \left(2(z_{ij} - w_i^T h_j) h_j + 2 \lambda w_i^T \right)$ and $\tilde{h}_j := h_j - \eta \cdot \left(2(z_{ij} - w_i^T  h_{j}) w_i^T + 2 \lambda h_j \right)$,
-+    \item the rests of matrices $W$ and $H$ stay unchanged, so $\tilde{w}_k^T = w_k^T$ for $k \neq i$ and $\tilde{h}_l = h_l$ for $l \neq j$,
-+    \item take $W = \tilde{W}$ and $H = \tilde{H}$,
-+\end{enumerate}
-+and repeat.
-+
-+$\eta$ is a parameter that tells us how big steps we want to do.
-+The method stops after a certain number of steps, or it can be given a stop condition.
- 
- \section{Implementation}
- 
-@@ -136,6 +146,7 @@
- 
- Let call the matrix containing the data from the train set as $\boldsymbol{Z}$ and the matrix containing the data from the test set as $\boldsymbol{T}$.
- 
-+\tami{??In SVD2 we make a correction -- czy to tu}
- 
- \subsection*{Quality of the system}
- 
-@@ -150,192 +161,254 @@
- 
- Since three of our methods (SVD1, SVD2 and NMF) are given a full matrix $\boldsymbol{Z}$ then they need the missing data to be imputed before performing.
- 
--We decided to impute the data in 4 different ways:
-+We decided to impute the data in 5 different ways, we replace missing values with:
- \begin{itemize}
--    \item putting 0 everywhere,
--    \item putting global mean everywhere,
--    \item putting row mean,
--    \item putting weighted row and column mean ($\alpha \cdot \text{\textsf{col\_mean}} + (1-\alpha) \cdot \text{\textsf{row\_mean}}$, where $\alpha$ is a parameter).
-+    \item 0 ,
-+    \item global mean,
-+    \item column means,
-+    \item row means,
-+    \item weighted row and column mean ($\alpha \cdot \text{\textsf{col\_mean}} + (1-\alpha) \cdot \text{\textsf{row\_mean}}$, where $\alpha>0$ is a parameter).
- \end{itemize}
- 
-+We may expect that the closer to reality we impute the missing data, the better results we will obtain.
- \tami{tutaj przemyślenia na temat tego czemu niektóre metody działają lepiej i dlaczego}
- 
-+
-+
-+
-+
-+
- \section{Parameters tuning and results}
- 
--\tami{coś o tym, że metody pozostawiaja trochę dowolności?}
--
- Before performing our methods and obtaining results we have to set some parameters.
- 
- First of all, all the methods need a parameter $r$, which is the rank of matrices in $Z$ decomposition.
- SGD needs also learning rate and $\lambda$.
- And iteration methods need maximum of possible iterations or a stop condition.
- 
--What's more, for all of our methods we want to choose optimal $\alpha$ in the last method of imputing data.
-+What's more, for all of our methods we want to choose optimal $\alpha$ in the last imputation method data.
- 
- 
- 
- \subsection*{SVD1}
-+\subsubsection*{Optimizing $r$}
-+For a start, let's consider only imputation methods that don't need estimation of $\alpha$, so:
-+\begin{itemize}
-+    \item putting 0 everywhere,
-+    \item putting global mean everywhere,
-+    \item putting column means,
-+    \item putting row means,
-+    \item putting weighted row and column mean $\frac{1}{2} \cdot \text{\textsf{col\_mean}} + \frac{1}{2} \cdot \text{\textsf{row\_mean}}$.
-+\end{itemize}
-+The last method is the weighted method for $\alpha = \frac{1}{2}$.
-+The imputation methods mentioned above will be called \textit{basic} in this report.
- 
--\tami{co tu napisać}
-+For these methods we only need to find optimal $r$.
-+So for every basic imputation method and for every $r$ from 1 to 100 we perform SVD1.
-+Below, we present a graph showing results.
- 
--\tami{napisać co to jest to weighted}
- 
--At the beginning we consider only \tami{...}
--
--Below, we present a graph showing dependence of RMSE on $r$.
- 
- \begin{figure}[H]
- \centering
--\begin{minipage}{.5\textwidth}
-+\begin{minipage}{.63\textwidth}
-   \centering
--  \includegraphics[scale=0.43]{svd1_1}
-+  \includegraphics[width=\textwidth]{svd1_1}
- %  \captionof{figure}{A figure}
- %  \label{fig:test1}
- \end{minipage}%
--\begin{minipage}{.5\textwidth}
-+\begin{minipage}{.4\textwidth}
-   \centering
--  \includegraphics[scale=0.43]{svd1_2}
-+  \includegraphics[width=\textwidth]{svd1_2}
- %  \captionof{figure}{Another figure}
- %  \label{fig:test2}
- \end{minipage}
-+\caption{RMSE of SVD1 for basic imputation methods and $r = 1, \dots, 100$}
- \end{figure}
- 
--Also we present a table with the lowest RMSE for every imputation method and the parameter $r$ that gave it.
-+Let's denote that we perform it for only one split of the data into train and test set.
-+This results can be different if we take different split.
-+
-+\tami{jakieś wnioski}
-+
-+Of course we look for the lowest RMSE obtained for each imputation method and the optimal $r$.
-+So below we present a table containing these information.
- \begin{table}[H]
- \begin{tabular}{c|ccccc}
- & 0 & column means & global mean & weighted means & row means \\
- \hline
- $r$ & 7 & 13 & 15 & 9 & 6 \\
--RMSE & 2.866 & 0.946 & 0.987 & 0.877 & 0.904 \\
-+RMSE & 2.8660 & 0.9458 & 0.9870 & 0.8767 & 0.9043 \\
- \end{tabular}
-+\caption{The lowest RMSE and optimal $r$ for SVD1 with basic imputation methods}
- \end{table}
- %wnioski, że ma wpływ jak uzupełniamy
- %jakieś wnioski, te zera beznadziejne
- %że weighted wypadają najlepiej i chcemy to alfa dobrać optymalnie
- 
--First of all, we observe that as we expected the imputation method does matter.
--It is most clearly seen looking at RMSE of data filled with zeros, that for the best $r$ is around $2.9$.
--Other methods also differ a lot.
--The lowest RMSE obtain the data filled with weighted data.
-+First of all, we observe that as we expected the choice of the imputation method does matter.
-+It can be most clearly seen on an example of data filled with zeros.
-+For the best $r$ RMSE there is around $2.9$ that is, it is about 3 times larger than for other imputation methods.
-+Other methods also differ.
-+The lowest RMSE is obtained for the data filled with weighted data.
-+But the result for data filled with row means is also quite good.
- That's why we may suspect that optimizing $\alpha$ can give even better results.
- 
- %wprowadzenie, że dobieramy alfa
- %no i ten rysunek wyżej nam pozwala obciąć r
- %że robimy minimalizację po dwóch parametrach
- 
-+\subsubsection*{Optimizing $\alpha$}
-+
- To get optimal result we perform optimization with respect to two parameters: $\alpha$ and $r$.
- As we can see on the picture above only $r$ between $0$ and $50$ give some reasonable results, so we consider only those (we could use all $r$, but it is time consuming).
--Below, we present graph showing dependence of RMSE on $\alpha$ and $r$ for data \tami{...}
-+Below, we present graph showing results of optimization.
- 
- \begin{figure}[H]
--\includegraphics[scale=0.45]{fig/svd1_r_w}
-+\includegraphics[scale=0.6]{fig/svd1_r_w2}
- \label{fig:figure}
-+\caption{RMSE of SVD1 for weigthed imputation method for different $\alpha$ and $r$}
- \end{figure}
- 
--Below we present also table with \tami{...} lowest RMSE and pairs $(\alpha, r)$ that gave those.
-+Below we present also table with 5 lowest RMSE and pairs $(\alpha, r)$ that gave them.
- \begin{table}[H]
- \begin{tabular}{cc|c}
--\toprule
-  $\alpha$ &  $r$ &     RMSE \\
--\midrule
- \hline
--       0.39 & 10 & 0.873987 \\
--       0.38 & 10 & 0.874244 \\
--       0.42 & 10 & 0.874274 \\
--       0.36 & 10 & 0.874449 \\
--       0.39 & 11 & 0.874469 \\
--\bottomrule
-+       0.39 & 10 & 0.8740 \\
-+       0.38 & 10 & 0.8742 \\
-+       0.42 & 10 & 0.8743 \\
-+       0.36 & 10 & 0.8744 \\
-+       0.39 & 11 & 0.8745 \\
- \end{tabular}
-+\caption{5 lowest RMSE of SVD1 for weigthed imputation method and ($\alpha$, $r$) that gave them}
- \end{table}
-+As we can see the pair $(0.39, 10)$ seems to be optimal in this case.
-+All other pairs are close to it.
-+\tami{może coś o tych RMSE}
-+
-+All results above are obtained for only one data split into train and test set.
-+To find the best parameters in our method we have to average those parameters over different splits.
-+So we considered 20 different splits and the results were as follows
-+\begin{itemize}
-+    \item mean value of the best $(\alpha, r)$ is $(0.4055, 12.2)$,
-+    \item median of the best $(\alpha, r)$ is $(0.41, 13)$,
-+    \item in 15 of 20 cases the best pair is $(0.41, 13)$.
-+\end{itemize}
-+\textbf{So $\alpha = 0.41$ and $r = 13$ are the parameters we use in our method SVD1 with weighted means as the imputation method.}
- 
--As we can see 10 seems to be the best $r$ and 0.39 seems to be the best $\alpha$.
--Also in all those results $(\alpha, r)$ are close to them.
--\tami{So $\alpha = 0.39$ and $r = 10$ are parameters that we use to perform this method further in the report.}
- 
--Since in columns we keep indexes of movies, it means that our filled data take a bit more information from user ratings mean than from the movie ratings mean.
--That is probably logical \tami{...}
- 
--To conclude this subsection we present our best results obtained using these methods.
--\tami{which means what}
- 
--\tami{tabelka z najlepszymi wynikami}
-+
- 
- 
- \subsection*{SVD2}
- In this case we want to proceed as in SVD1 case.
--
--\tami{??In SVD2 we make a correction -- czy to tu}
-+But before we start we have to choose some stop condition for SVD2.
- 
--stop condition
-+\subsubsection*{Stop condition}
-+\begin{figure}[H]
-+    \includegraphics[scale=0.55]{svd2_stop2}
-+    \caption{\tami{tutaj}}
-+\end{figure}
- 
--
--
-+\subsubsection*{Optimizing $r$}
-+After choosing the stop condition we can proceed exactly as in SVD1 case.
-+So first of all we present a graph showing dependence of RMSE on $r$ and on the imputation method for basic imputation methods.
- \begin{figure}[H]
- \centering
--\begin{minipage}{.5\textwidth}
-+\begin{minipage}{.63\textwidth}
-   \centering
--  \includegraphics[scale=0.43]{svd2_1}
-+  \includegraphics[width=\textwidth]{svd2_1}
- %  \captionof{figure}{A figure}
- %  \label{fig:test1}
- \end{minipage}%
--\begin{minipage}{.5\textwidth}
-+\begin{minipage}{.4\textwidth}
-   \centering
--  \includegraphics[scale=0.43]{svd2_2}
-+  \includegraphics[width=\textwidth]{svd2_2}
- %  \captionof{figure}{Another figure}
- %  \label{fig:test2}
- \end{minipage}
-+\caption{RMSE of SVD2 for basic imputation methods and $r = 1, \dots, 100$}
- \end{figure}
- 
-+\tami{tutaj, że te wykresy są takie bardziej skaczące, ale generalnie trendy są te same}
-+
-+Now we present a table showing the best $r$ and RMSE for every imputation method.
- \begin{table}[H]
- \begin{tabular}{c|ccccc}
- & 0 & column means & global mean & weighted means & row means \\
- \hline
- $r$ & 19 & 10 & 6 & 13 & 7 \\
--RMSE & 2.779 & 0.942 & 0.942 & 0.875 & 0.878 \\
-+RMSE & 2.7789 & 0.9420 & 0.9425 & 0.8749 & 0.8778 \\
- \end{tabular}
-+\caption{The lowest RMSE and optimal $r$ for SVD2 with basic imputation methods}
- \end{table}
- 
-+Firstly, we can observe that SVD2 improved the results of SVD1.
-+Every result is smaller, but order which methods are better or worse didn't change, maybe differences are a bit smaller.
-+
-+We can observe again that only $r$ between 0 and 50 gives reasonable results.
-+Although the best $r$ chosen by SVD2 in all cases differ a lot from those chosen by SVD1.
-+
-+\subsubsection*{Optimizing $\alpha$}
-+Moving on to the weighted imputation method, we present a graph showing the results of optimization with respect to $\alpha$ and $r$.
- \begin{figure}[H]
--\includegraphics[scale = 0.45]{svd2_r_w}
-+\includegraphics[scale = 0.6]{svd2_r_w2}
-+\caption{RMSE of SVD2 for weigthed imputation method for different $\alpha$ and $r$}
- \end{figure}
--
-+\tami{It may look very similar to analogous graph for SVD1, but results actually differ a bit and it can be seen in following table.}
- \begin{table}[H]
--\begin{tabular}{rrr}
--\toprule
-+\begin{tabular}{cc|c}
- $\alpha$ &  $r$ &     RMSE \\
--\midrule
- \hline
--       0.25 &  8 & 0.867393 \\
--       0.26 &  8 & 0.867397 \\
--       0.24 &  8 & 0.867402 \\
--       0.27 &  8 & 0.867410 \\
--       0.28 &  8 & 0.867494 \\
--\bottomrule
-+       0.25 &  8 & 0.8674 \\
-+       0.26 &  8 & 0.8674 \\
-+       0.24 &  8 & 0.8674 \\
-+       0.27 &  8 & 0.8674 \\
-+       0.28 &  8 & 0.8675 \\
- \end{tabular}
-+\caption{5 lowest RMSE of SVD2 for weigthed imputation method and ($\alpha$, $r$) that gave them}
- \end{table}
-+This time method did the best 5 results for the same $r$.
-+Also in this case, the result are closer.
-+It may suggest that this method is even more stable.
-+\domi{It is intuitive for iterative method because they usually converge to some specific model and that is why we get clear results.}
-+
-+After repeating this optimization for 20 different splits we get that:
-+\begin{itemize}
-+    \item the mean value of the best $(\alpha, r)$ is $(0.259, 8)$,
-+    \item the median of the best $(\alpha, r)$ is $(0.255, 8)$.
-+\end{itemize}
-+\textbf{So $\alpha = 0.26$ and $r=8$ are parameters we use in our SVD2 with weighted means as the imputation method.}
- 
- \subsection*{NMF}
--
- In this case since we have only $r$ and $\alpha$ to find, we proceed in exactly the same way as in the case of SVD.
--So, firstly we present a graph showing dependence of RMSE on $r$. \tami{in some cases...}
-+
-+\subsubsection*{Optimizing $r$}
-+So firstly we present a graph showing dependence of RMSE on $r$ and on the imputation method for basic imputation methods.
- 
- \begin{figure}[H]
- \centering
--\begin{minipage}{.5\textwidth}
-+\begin{minipage}{.63\textwidth}
-   \centering
--  \includegraphics[scale=0.43]{nmf_1}
-+  \includegraphics[width=\textwidth]{nmf_1}
- %  \captionof{figure}{A figure}
- %  \label{fig:test1}
- \end{minipage}%
--\begin{minipage}{.5\textwidth}
-+\begin{minipage}{.4\textwidth}
-   \centering
--  \includegraphics[scale=0.43]{nmf_2}
-+  \includegraphics[width=\textwidth]{nmf_2}
- %  \captionof{figure}{Another figure}
- %  \label{fig:test2}
- \end{minipage}
-+\caption{RMSE of NMF for basic imputation methods and $r = 1, \dots, 100$}
- \end{figure}
- 
--Comparing this graph to the graph for SVD we can see that \tami{tutaj o tym, że jest bardziej takie postrzępione}
-+Comparing this graph to the graph for SVD we can see that it oscillates a lot, which means that for similar $r$ it gives quite different RMSE.
-+What's more, here it is not so obvious where to look for optimal $r$, because for instance for weighted means RMSE don't grow much with $r$. \tami{przeformułować}
-+\tami{jeszcze że kolejność kto który jest podobna}
- 
- Below we also present a table with the lowest RMSE for every imputation method and the parameter $r$ that gave it.
- 
-@@ -344,63 +417,74 @@
- & 0 & column means & global mean & weighted means & row means \\
- \hline
- $r$ & 6 & 47 & 30 & 37 & 15\\
--RMSE & 2.900 & 0.946 & 0.987 & 0.877 & 0.905 \\
-+RMSE & 2.8997 & 0.9462 & 0.9870 & 0.8766 & 0.9053 \\
- \end{tabular}
-+\caption{The lowest RMSE and optimal $r$ for NMF with basic imputation methods}
- \end{table}
- 
-+As we can see the parameters $r$ are in general bigger than in previous cases.
-+The RMSEs are very similar to those obtained using SVD1.
-+
-+\subsubsection*{Optimizing $\alpha$}
-+Now we perform the optimization with respect to $\alpha$ and $r$ and present a graph showing the results.
-+
-+\begin{figure}[H]
-+\includegraphics[scale = 0.6]{nmf_r_w2}
-+\caption{RMSE of NMF for weigthed imputation method for different $\alpha$ and $r$}
-+\end{figure}
-+
-+Similarly as above, this graph is \tami{taki postrzępiony} looking at the axis of $r$.
-+
- \begin{table}[H]
- \begin{tabular}{cc|c}
--\toprule
- $\alpha$ &  $r$ &     RMSE \\
--\midrule
- \hline
--       0.40 & 37 & 0.874794 \\
--       0.41 & 37 & 0.874817 \\
--       0.39 & 18 & 0.874841 \\
--       0.39 & 37 & 0.874848 \\
--       0.40 & 18 & 0.874849 \\
--\bottomrule
-+       0.40 & 37 & 0.8748 \\
-+       0.41 & 37 & 0.8748 \\
-+       0.39 & 18 & 0.8748 \\
-+       0.39 & 37 & 0.8748 \\
-+       0.40 & 18 & 0.8748 \\
- \end{tabular}
-+\caption{5 lowest RMSE of NMF for weigthed imputation method and ($\alpha$, $r$) that gave them}
- \end{table}
- 
--As we can see the parameters $r$ are in general bigger than in previous cases.
--\tami{czy będą bardziej porostrzelane}
- 
--Now we pefrorm the optimization with respect to $\alpha$ and $r$ and present a graph showing the results.
-+After repeating this optimization for 20 different splits we get that:
-+\begin{itemize}
-+    \item the mean value of the best $(\alpha, r)$ is $(0.393, 32.25)$,
-+    \item the median of the best $(\alpha, r)$ is $(0.39, 37)$,
-+    \item 15 times the best $r$ is 37 and 5 times the best $r$ is 18.
-+\end{itemize}
-+\textbf{So $\alpha = 0.39$ and $r=37$ are parameters we use in our NMF with weighted means as the imputation method.}
- 
--\begin{figure}[H]
--\includegraphics[scale = 0.45]{nmf_r_w}
--\end{figure}
- 
--\tami{tabelka z najlepszymi r i alpha}
--\tami{jakie r i alpha wybieramy}
- 
--\tami{tabelka z najlepszymi wynikami}
- 
- \subsection*{SGD}
- 
--\begin{figure}[H]
--\centering
--\begin{minipage}{.5\textwidth}
--  \centering
--  \includegraphics[scale=0.43]{svd1_1}
--%  \captionof{figure}{A figure}
--%  \label{fig:test1}
--\end{minipage}%
--\begin{minipage}{.5\textwidth}
--  \centering
--  \includegraphics[scale=0.43]{svd1_2}
--%  \captionof{figure}{Another figure}
--%  \label{fig:test2}
--\end{minipage}
--\end{figure}
-+%\begin{figure}[H]
-+%\centering
-+%\begin{minipage}{.5\textwidth}
-+%  \centering
-+%  \includegraphics[scale=0.43]{svd1_1}
-+%%  \captionof{figure}{A figure}
-+%%  \label{fig:test1}
-+%\end{minipage}%
-+%\begin{minipage}{.5\textwidth}
-+%  \centering
-+%  \includegraphics[scale=0.43]{svd1_2}
-+%%  \captionof{figure}{Another figure}
-+%%  \label{fig:test2}
-+%\end{minipage}
-+%\end{figure}
- 
- 
- 
- \section{}
- 
--\section{Conclusions}
-+\section{Results}
- 
--
-+Since in columns we keep indexes of movies, it means that our filled data take a bit more information from user ratings mean than from the movie ratings mean.
-+That is probably logical \tami{...}
- 
- \end{document}
-\ No newline at end of file
-Index: .idea/misc.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ProjectRootManager\" version=\"2\" project-jdk-name=\"Python 3.10 (MoCaDR_proj1)\" project-jdk-type=\"Python SDK\" />\r\n  <component name=\"RMarkdownSettings\">\r\n    <option name=\"renderProfiles\">\r\n      <map>\r\n        <entry key=\"file://$PROJECT_DIR$/Report/tescik.rmd\">\r\n          <value>\r\n            <RMarkdownRenderProfile>\r\n              <option name=\"outputDirectoryUrl\" value=\"file://$PROJECT_DIR$/Report\" />\r\n            </RMarkdownRenderProfile>\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n</project>
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/.idea/misc.xml b/.idea/misc.xml
---- a/.idea/misc.xml	(revision cca69d005446496a4a742e962b2259b3813e93f9)
-+++ b/.idea/misc.xml	(date 1649604177407)
-@@ -1,6 +1,6 @@
- <?xml version="1.0" encoding="UTF-8"?>
- <project version="4">
--  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.10 (MoCaDR_proj1)" project-jdk-type="Python SDK" />
-+  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.10" project-jdk-type="Python SDK" />
-   <component name="RMarkdownSettings">
-     <option name="renderProfiles">
-       <map>
-Index: auxil/report.aux
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>\\relax \r\n\\@writefile{toc}{\\contentsline {section}{\\tocsection {}{1}{Introduction}}{1}\\protected@file@percent }\r\n\\@writefile{toc}{\\contentsline {subsection}{\\tocsubsection {}{}{Statement of the problem}}{1}\\protected@file@percent }\r\n\\@writefile{toc}{\\contentsline {subsection}{\\tocsubsection {}{}{Description of methods}}{1}\\protected@file@percent }\r\n\\@writefile{toc}{\\contentsline {subsubsection}{\\tocsubsubsection {}{}{SVD1}}{1}\\protected@file@percent }\r\n\\@writefile{toc}{\\contentsline {subsubsection}{\\tocsubsubsection {}{}{SVD2}}{1}\\protected@file@percent }\r\n\\@writefile{toc}{\\contentsline {subsubsection}{\\tocsubsubsection {}{}{NMF}}{1}\\protected@file@percent }\r\n\\@writefile{toc}{\\contentsline {subsubsection}{\\tocsubsubsection {}{}{SGD}}{2}\\protected@file@percent }\r\n\\@writefile{toc}{\\contentsline {section}{\\tocsection {}{2}{Implementation}}{2}\\protected@file@percent }\r\n\\@writefile{toc}{\\contentsline {subsection}{\\tocsubsection {}{}{Description of the data}}{2}\\protected@file@percent }\r\n\\@writefile{toc}{\\contentsline {subsection}{\\tocsubsection {}{}{Performing methods}}{2}\\protected@file@percent }\r\n\\@writefile{toc}{\\contentsline {subsection}{\\tocsubsection {}{}{Quality of the system}}{2}\\protected@file@percent }\r\n\\@writefile{toc}{\\contentsline {subsection}{\\tocsubsection {}{}{Imputing the missing data}}{3}\\protected@file@percent }\r\n\\@writefile{toc}{\\contentsline {section}{\\tocsection {}{3}{Parameters tuning and results}}{3}\\protected@file@percent }\r\n\\@writefile{toc}{\\contentsline {subsection}{\\tocsubsection {}{}{SVD1}}{3}\\protected@file@percent }\r\n\\providecommand*\\caption@xref[2]{\\@setref\\relax\\@undefined{#1}}\r\n\\newlabel{fig:figure}{{\\caption@xref {fig:figure}{ on input line 232}}{4}}\r\n\\@writefile{toc}{\\contentsline {subsection}{\\tocsubsection {}{}{SVD2}}{5}\\protected@file@percent }\r\n\\@writefile{toc}{\\contentsline {subsection}{\\tocsubsection {}{}{NMF}}{6}\\protected@file@percent }\r\n\\newlabel{tocindent-1}{0pt}\r\n\\newlabel{tocindent0}{15.98535pt}\r\n\\newlabel{tocindent1}{19.35791pt}\r\n\\newlabel{tocindent2}{31.97072pt}\r\n\\newlabel{tocindent3}{0pt}\r\n\\@writefile{toc}{\\contentsline {subsection}{\\tocsubsection {}{}{SGD}}{8}\\protected@file@percent }\r\n\\@writefile{toc}{\\contentsline {section}{\\tocsection {}{4}{}}{9}\\protected@file@percent }\r\n\\@writefile{toc}{\\contentsline {section}{\\tocsection {}{5}{Conclusions}}{9}\\protected@file@percent }\r\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/auxil/report.aux b/auxil/report.aux
---- a/auxil/report.aux	(revision cca69d005446496a4a742e962b2259b3813e93f9)
-+++ b/auxil/report.aux	(date 1649620331359)
-@@ -9,19 +9,39 @@
- \@writefile{toc}{\contentsline {section}{\tocsection {}{2}{Implementation}}{2}\protected@file@percent }
- \@writefile{toc}{\contentsline {subsection}{\tocsubsection {}{}{Description of the data}}{2}\protected@file@percent }
- \@writefile{toc}{\contentsline {subsection}{\tocsubsection {}{}{Performing methods}}{2}\protected@file@percent }
--\@writefile{toc}{\contentsline {subsection}{\tocsubsection {}{}{Quality of the system}}{2}\protected@file@percent }
-+\@writefile{toc}{\contentsline {subsection}{\tocsubsection {}{}{Quality of the system}}{3}\protected@file@percent }
- \@writefile{toc}{\contentsline {subsection}{\tocsubsection {}{}{Imputing the missing data}}{3}\protected@file@percent }
- \@writefile{toc}{\contentsline {section}{\tocsection {}{3}{Parameters tuning and results}}{3}\protected@file@percent }
- \@writefile{toc}{\contentsline {subsection}{\tocsubsection {}{}{SVD1}}{3}\protected@file@percent }
-+\@writefile{toc}{\contentsline {subsubsection}{\tocsubsubsection {}{}{Optimizing $r$}}{3}\protected@file@percent }
-+\@writefile{lof}{\contentsline {figure}{\numberline {1}{\ignorespaces RMSE of SVD1 for basic imputation methods and $r = 1, \dots  , 100$\relax }}{4}\protected@file@percent }
-+\@writefile{lot}{\contentsline {table}{\numberline {1}{\ignorespaces The lowest RMSE and optimal $r$ for SVD1 with basic imputation methods\relax }}{4}\protected@file@percent }
-+\@writefile{toc}{\contentsline {subsubsection}{\tocsubsubsection {}{}{Optimizing $\alpha $}}{5}\protected@file@percent }
- \providecommand*\caption@xref[2]{\@setref\relax\@undefined{#1}}
--\newlabel{fig:figure}{{\caption@xref {fig:figure}{ on input line 232}}{4}}
--\@writefile{toc}{\contentsline {subsection}{\tocsubsection {}{}{SVD2}}{5}\protected@file@percent }
--\@writefile{toc}{\contentsline {subsection}{\tocsubsection {}{}{NMF}}{6}\protected@file@percent }
-+\newlabel{fig:figure}{{\caption@xref {fig:figure}{ on input line 269}}{5}}
-+\@writefile{lof}{\contentsline {figure}{\numberline {2}{\ignorespaces RMSE of SVD1 for weigthed imputation method for different $\alpha $ and $r$\relax }}{5}\protected@file@percent }
-+\@writefile{lot}{\contentsline {table}{\numberline {2}{\ignorespaces 5 lowest RMSE of SVD1 for weigthed imputation method and ($\alpha $, $r$) that gave them\relax }}{5}\protected@file@percent }
-+\@writefile{toc}{\contentsline {subsection}{\tocsubsection {}{}{SVD2}}{6}\protected@file@percent }
-+\@writefile{lof}{\contentsline {figure}{\numberline {3}{\ignorespaces {\leavevmode {\color  {magenta}tutaj}}\relax }}{6}\protected@file@percent }
-+\@writefile{toc}{\contentsline {subsubsection}{\tocsubsubsection {}{}{Stop condition}}{6}\protected@file@percent }
-+\@writefile{toc}{\contentsline {subsubsection}{\tocsubsubsection {}{}{Optimizing $r$}}{6}\protected@file@percent }
-+\@writefile{lof}{\contentsline {figure}{\numberline {4}{\ignorespaces RMSE of SVD2 for basic imputation methods and $r = 1, \dots  , 100$\relax }}{7}\protected@file@percent }
-+\@writefile{lot}{\contentsline {table}{\numberline {3}{\ignorespaces The lowest RMSE and optimal $r$ for SVD2 with basic imputation methods\relax }}{7}\protected@file@percent }
-+\@writefile{toc}{\contentsline {subsubsection}{\tocsubsubsection {}{}{Optimizing $\alpha $}}{7}\protected@file@percent }
-+\@writefile{lof}{\contentsline {figure}{\numberline {5}{\ignorespaces RMSE of SVD2 for weigthed imputation method for different $\alpha $ and $r$\relax }}{8}\protected@file@percent }
-+\@writefile{lot}{\contentsline {table}{\numberline {4}{\ignorespaces 5 lowest RMSE of SVD2 for weigthed imputation method and ($\alpha $, $r$) that gave them\relax }}{8}\protected@file@percent }
-+\@writefile{toc}{\contentsline {subsection}{\tocsubsection {}{}{NMF}}{9}\protected@file@percent }
-+\@writefile{toc}{\contentsline {subsubsection}{\tocsubsubsection {}{}{Optimizing $r$}}{9}\protected@file@percent }
-+\@writefile{lof}{\contentsline {figure}{\numberline {6}{\ignorespaces RMSE of NMF for basic imputation methods and $r = 1, \dots  , 100$\relax }}{9}\protected@file@percent }
-+\@writefile{lot}{\contentsline {table}{\numberline {5}{\ignorespaces The lowest RMSE and optimal $r$ for NMF with basic imputation methods\relax }}{9}\protected@file@percent }
-+\@writefile{toc}{\contentsline {subsubsection}{\tocsubsubsection {}{}{Optimizing $\alpha $}}{10}\protected@file@percent }
-+\@writefile{lof}{\contentsline {figure}{\numberline {7}{\ignorespaces RMSE of NMF for weigthed imputation method for different $\alpha $ and $r$\relax }}{10}\protected@file@percent }
-+\@writefile{lot}{\contentsline {table}{\numberline {6}{\ignorespaces 5 lowest RMSE of NMF for weigthed imputation method and ($\alpha $, $r$) that gave them\relax }}{10}\protected@file@percent }
- \newlabel{tocindent-1}{0pt}
- \newlabel{tocindent0}{15.98535pt}
- \newlabel{tocindent1}{19.35791pt}
- \newlabel{tocindent2}{31.97072pt}
- \newlabel{tocindent3}{0pt}
--\@writefile{toc}{\contentsline {subsection}{\tocsubsection {}{}{SGD}}{8}\protected@file@percent }
--\@writefile{toc}{\contentsline {section}{\tocsection {}{4}{}}{9}\protected@file@percent }
--\@writefile{toc}{\contentsline {section}{\tocsection {}{5}{Conclusions}}{9}\protected@file@percent }
-+\@writefile{toc}{\contentsline {subsection}{\tocsubsection {}{}{SGD}}{11}\protected@file@percent }
-+\@writefile{toc}{\contentsline {section}{\tocsection {}{4}{}}{11}\protected@file@percent }
-+\@writefile{toc}{\contentsline {section}{\tocsection {}{5}{Results}}{11}\protected@file@percent }
-Index: .idea/MoCaDR_proj1.iml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<module type=\"PYTHON_MODULE\" version=\"4\">\r\n  <component name=\"NewModuleRootManager\">\r\n    <content url=\"file://$MODULE_DIR$\">\r\n      <sourceFolder url=\"file://$MODULE_DIR$/src\" isTestSource=\"false\" />\r\n    </content>\r\n    <orderEntry type=\"jdk\" jdkName=\"Python 3.10 (MoCaDR_proj1)\" jdkType=\"Python SDK\" />\r\n    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\r\n  </component>\r\n</module>
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/.idea/MoCaDR_proj1.iml b/.idea/MoCaDR_proj1.iml
---- a/.idea/MoCaDR_proj1.iml	(revision cca69d005446496a4a742e962b2259b3813e93f9)
-+++ b/.idea/MoCaDR_proj1.iml	(date 1649604177388)
-@@ -4,7 +4,7 @@
-     <content url="file://$MODULE_DIR$">
-       <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
-     </content>
--    <orderEntry type="jdk" jdkName="Python 3.10 (MoCaDR_proj1)" jdkType="Python SDK" />
-+    <orderEntry type="jdk" jdkName="Python 3.10" jdkType="Python SDK" />
-     <orderEntry type="sourceFolder" forTests="false" />
-   </component>
- </module>
-\ No newline at end of file
-Index: auxil/report.log
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>This is pdfTeX, Version 3.14159265-2.6-1.40.21 (MiKTeX 2.9.7300 64-bit) (preloaded format=pdflatex 2020.3.10)  9 APR 2022 22:27\r\nentering extended mode\r\n**./report.tex\r\n(report.tex\r\nLaTeX2e <2020-02-02> patch level 2\r\nL3 programming layer <2020-02-14>\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/amscls\\amsart.cls\"\r\nDocument Class: amsart 2017/10/31 v2.20.4\r\n\\linespacing=\\dimen134\r\n\\normalparindent=\\dimen135\r\n\\normaltopskip=\\skip47\r\n\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/amsmath\\amsmath.st\r\ny\"\r\nPackage: amsmath 2020/01/20 v2.17e AMS math features\r\n\\@mathmargin=\\skip48\r\n\r\nFor additional information on amsmath, use the `?' option.\r\n\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/amsmath\\amstext.st\r\ny\"\r\nPackage: amstext 2000/06/29 v2.01 AMS text\r\n\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/amsmath\\amsgen.sty\r\n\"\r\nFile: amsgen.sty 1999/11/30 v2.0 generic functions\r\n\\@emptytoks=\\toks14\r\n\\ex@=\\dimen136\r\n))\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/amsmath\\amsbsy.sty\r\n\"\r\nPackage: amsbsy 1999/11/29 v1.2d Bold Symbols\r\n\\pmbraise@=\\dimen137\r\n)\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/amsmath\\amsopn.sty\r\n\"\r\nPackage: amsopn 2016/03/08 v2.02 operator names\r\n)\r\n\\inf@bad=\\count167\r\nLaTeX Info: Redefining \\frac on input line 227.\r\n\\uproot@=\\count168\r\n\\leftroot@=\\count169\r\nLaTeX Info: Redefining \\overline on input line 389.\r\n\\classnum@=\\count170\r\n\\DOTSCASE@=\\count171\r\nLaTeX Info: Redefining \\ldots on input line 486.\r\nLaTeX Info: Redefining \\dots on input line 489.\r\nLaTeX Info: Redefining \\cdots on input line 610.\r\n\\Mathstrutbox@=\\box45\r\n\\strutbox@=\\box46\r\n\\big@size=\\dimen138\r\nLaTeX Font Info:    Redeclaring font encoding OML on input line 733.\r\nLaTeX Font Info:    Redeclaring font encoding OMS on input line 734.\r\n\\macc@depth=\\count172\r\n\\c@MaxMatrixCols=\\count173\r\n\\dotsspace@=\\muskip16\r\n\\c@parentequation=\\count174\r\n\\dspbrk@lvl=\\count175\r\n\\tag@help=\\toks15\r\n\\row@=\\count176\r\n\\column@=\\count177\r\n\\maxfields@=\\count178\r\n\\andhelp@=\\toks16\r\n\\eqnshift@=\\dimen139\r\n\\alignsep@=\\dimen140\r\n\\tagshift@=\\dimen141\r\n\\tagwidth@=\\dimen142\r\n\\totwidth@=\\dimen143\r\n\\lineht@=\\dimen144\r\n\\@envbody=\\toks17\r\n\\multlinegap=\\skip49\r\n\\multlinetaggap=\\skip50\r\n\\mathdisplay@stack=\\toks18\r\nLaTeX Info: Redefining \\[ on input line 2859.\r\nLaTeX Info: Redefining \\] on input line 2860.\r\n)\r\nLaTeX Font Info:    Trying to load font information for U+msa on input line 398\r\n.\r\n\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/amsfonts\\umsa.fd\"\r\nFile: umsa.fd 2013/01/14 v3.01 AMS symbols A\r\n)\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/amsfonts\\amsfonts.\r\nsty\"\r\nPackage: amsfonts 2013/01/14 v3.01 Basic AMSFonts support\r\n\\symAMSa=\\mathgroup4\r\n\\symAMSb=\\mathgroup5\r\nLaTeX Font Info:    Redeclaring math symbol \\hbar on input line 98.\r\nLaTeX Font Info:    Overwriting math alphabet `\\mathfrak' in version `bold'\r\n(Font)                  U/euf/m/n --> U/euf/b/n on input line 106.\r\n)\r\n\\copyins=\\insert199\r\n\\abstractbox=\\box47\r\n\\listisep=\\skip51\r\n\\c@part=\\count179\r\n\\c@section=\\count180\r\n\\c@subsection=\\count181\r\n\\c@subsubsection=\\count182\r\n\\c@paragraph=\\count183\r\n\\c@subparagraph=\\count184\r\n\\c@figure=\\count185\r\n\\c@table=\\count186\r\n\\abovecaptionskip=\\skip52\r\n\\belowcaptionskip=\\skip53\r\n\\captionindent=\\dimen145\r\n\\thm@style=\\toks19\r\n\\thm@bodyfont=\\toks20\r\n\\thm@headfont=\\toks21\r\n\\thm@notefont=\\toks22\r\n\\thm@headpunct=\\toks23\r\n\\thm@preskip=\\skip54\r\n\\thm@postskip=\\skip55\r\n\\thm@headsep=\\skip56\r\n\\dth@everypar=\\toks24\r\n)\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/float\\float.sty\"\r\nPackage: float 2001/11/08 v1.3d Float enhancements (AL)\r\n\\c@float@type=\\count187\r\n\\float@exts=\\toks25\r\n\\float@box=\\box48\r\n\\@float@everytoks=\\toks26\r\n\\@floatcapt=\\box49\r\n)\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/base\\fontenc.sty\"\r\nPackage: fontenc 2020/02/11 v2.0o Standard LaTeX package\r\n)\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/geometry\\geometry.\r\nsty\"\r\nPackage: geometry 2020/01/02 v5.9 Page Geometry\r\n\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/graphics\\keyval.st\r\ny\"\r\nPackage: keyval 2014/10/28 v1.15 key=value parser (DPC)\r\n\\KV@toks@=\\toks27\r\n)\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/generic/iftex\\ifvtex.sty\r\n\"\r\nPackage: ifvtex 2019/10/25 v1.7 ifvtex legacy package. Use iftex instead.\r\n (\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/generic/iftex\\iftex.sty\r\n\"\r\nPackage: iftex 2019/11/07 v1.0c TeX engine tests\r\n))\r\n\\Gm@cnth=\\count188\r\n\\Gm@cntv=\\count189\r\n\\c@Gm@tempcnt=\\count190\r\n\\Gm@bindingoffset=\\dimen146\r\n\\Gm@wd@mp=\\dimen147\r\n\\Gm@odd@mp=\\dimen148\r\n\\Gm@even@mp=\\dimen149\r\n\\Gm@layoutwidth=\\dimen150\r\n\\Gm@layoutheight=\\dimen151\r\n\\Gm@layouthoffset=\\dimen152\r\n\\Gm@layoutvoffset=\\dimen153\r\n\\Gm@dimlist=\\toks28\r\n\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/geometry\\geometry.\r\ncfg\"))\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/parskip\\parskip.st\r\ny\"\r\nPackage: parskip 2020-01-22 v2.0d non-zero parskip adjustments\r\n\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/kvoptions\\kvoption\r\ns.sty\"\r\nPackage: kvoptions 2019/11/29 v3.13 Key value format for package options (HO)\r\n\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/generic/ltxcmds\\ltxcmds.\r\nsty\"\r\nPackage: ltxcmds 2019/12/15 v1.24 LaTeX kernel commands for general use (HO)\r\n)\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/generic/kvsetkeys\\kvsetk\r\neys.sty\"\r\nPackage: kvsetkeys 2019/12/15 v1.18 Key value parser (HO)\r\n))\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/etoolbox\\etoolbox.\r\nsty\"\r\nPackage: etoolbox 2019/09/21 v2.5h e-TeX tools for LaTeX (JAW)\r\n\\etb@tempcnta=\\count191\r\n)\r\nCouldn't patch \\@starttoc\r\n)\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/amsfonts\\amssymb.s\r\nty\"\r\nPackage: amssymb 2013/01/14 v3.01 AMS font symbols\r\n)\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/titling\\titling.st\r\ny\"\r\nPackage: titling 2009/09/04 v2.1d maketitle typesetting\r\n\\thanksmarkwidth=\\skip57\r\n\\thanksmargin=\\skip58\r\n\\droptitle=\\skip59\r\n)\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/tools\\enumerate.st\r\ny\"\r\nPackage: enumerate 2015/07/23 v3.00 enumerate extensions (DPC)\r\n\\@enLab=\\toks29\r\n)\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/multirow\\multirow.\r\nsty\"\r\nPackage: multirow 2019/05/31 v2.5 Span multiple rows of a table\r\n\\multirow@colwidth=\\skip60\r\n\\multirow@cntb=\\count192\r\n\\multirow@dima=\\skip61\r\n\\bigstrutjot=\\dimen154\r\n)\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/graphics\\graphics.\r\nsty\"\r\nPackage: graphics 2019/11/30 v1.4a Standard LaTeX Graphics (DPC,SPQR)\r\n\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/graphics\\trig.sty\"\r\nPackage: trig 2016/01/03 v1.10 sin cos tan (DPC)\r\n)\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/graphics-cfg\\graph\r\nics.cfg\"\r\nFile: graphics.cfg 2016/06/04 v1.11 sample graphics configuration\r\n)\r\nPackage graphics Info: Driver file: pdftex.def on input line 105.\r\n\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/graphics-def\\pdfte\r\nx.def\"\r\nFile: pdftex.def 2018/01/08 v1.0l Graphics/color driver for pdftex\r\n))\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/graphics\\graphicx.\r\nsty\"\r\nPackage: graphicx 2019/11/30 v1.2a Enhanced LaTeX Graphics (DPC,SPQR)\r\n\\Gin@req@height=\\dimen155\r\n\\Gin@req@width=\\dimen156\r\n)\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/caption\\caption.st\r\ny\"\r\nPackage: caption 2020/10/26 v3.5g Customizing captions (AR)\r\n\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/caption\\caption3.s\r\nty\"\r\nPackage: caption3 2020/10/21 v2.2e caption3 kernel (AR)\r\n\\captionmargin=\\dimen157\r\n\\captionmargin@=\\dimen158\r\n\\captionwidth=\\dimen159\r\n\\caption@tempdima=\\dimen160\r\n\\caption@indent=\\dimen161\r\n\\caption@parindent=\\dimen162\r\n\\caption@hangindent=\\dimen163\r\nPackage caption Info: AMS or SMF document class detected.\r\n\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/caption\\caption-am\r\ns-smf.sto\"\r\nFile: caption-ams-smf.sto 2020/08/22 v2.0 Adaption of the caption package to th\r\ne AMS and SMF document classes (AR)\r\n))\r\n\\c@caption@flags=\\count193\r\n\\c@continuedfloat=\\count194\r\nPackage caption Info: float package is loaded.\r\n)\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/tools\\array.sty\"\r\nPackage: array 2019/08/31 v2.4l Tabular extension package (FMi)\r\n\\col@sep=\\dimen164\r\n\\ar@mcellbox=\\box50\r\n\\extrarowheight=\\dimen165\r\n\\NC@list=\\toks30\r\n\\extratabsurround=\\skip62\r\n\\backup@length=\\skip63\r\n\\ar@cellbox=\\box51\r\n)\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/xcolor\\xcolor.sty\"\r\nPackage: xcolor 2016/05/11 v2.12 LaTeX color extensions (UK)\r\n\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/graphics-cfg\\color\r\n.cfg\"\r\nFile: color.cfg 2016/01/02 v1.6 sample color configuration\r\n)\r\nPackage xcolor Info: Driver file: pdftex.def on input line 225.\r\nPackage xcolor Info: Model `cmy' substituted by `cmy0' on input line 1348.\r\nPackage xcolor Info: Model `hsb' substituted by `rgb' on input line 1352.\r\nPackage xcolor Info: Model `RGB' extended on input line 1364.\r\nPackage xcolor Info: Model `HTML' substituted by `rgb' on input line 1366.\r\nPackage xcolor Info: Model `Hsb' substituted by `hsb' on input line 1367.\r\nPackage xcolor Info: Model `tHsb' substituted by `hsb' on input line 1368.\r\nPackage xcolor Info: Model `HSB' substituted by `hsb' on input line 1369.\r\nPackage xcolor Info: Model `Gray' substituted by `gray' on input line 1370.\r\nPackage xcolor Info: Model `wave' substituted by `hsb' on input line 1371.\r\n)\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/caption\\subcaption\r\n.sty\"\r\nPackage: subcaption 2020/10/07 v1.3j Sub-captions (AR)\r\n\\c@subfigure=\\count195\r\n\\c@subtable=\\count196\r\n)\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/l3backend\\l3backen\r\nd-pdfmode.def\"\r\nFile: l3backend-pdfmode.def 2020-02-03 L3 backend support: PDF mode\r\n\\l__kernel_color_stack_int=\\count197\r\n\\l__pdf_internal_box=\\box52\r\n) (C:/Users\\admin\\PycharmProjects\\MoCaDR_proj1\\auxil\\report.aux)\r\n\\openout1 = `report.aux'.\r\n\r\nLaTeX Font Info:    Checking defaults for OML/cmm/m/it on input line 44.\r\nLaTeX Font Info:    ... okay on input line 44.\r\nLaTeX Font Info:    Checking defaults for OMS/cmsy/m/n on input line 44.\r\nLaTeX Font Info:    ... okay on input line 44.\r\nLaTeX Font Info:    Checking defaults for OT1/cmr/m/n on input line 44.\r\nLaTeX Font Info:    ... okay on input line 44.\r\nLaTeX Font Info:    Checking defaults for T1/cmr/m/n on input line 44.\r\nLaTeX Font Info:    ... okay on input line 44.\r\nLaTeX Font Info:    Checking defaults for TS1/cmr/m/n on input line 44.\r\nLaTeX Font Info:    ... okay on input line 44.\r\nLaTeX Font Info:    Checking defaults for OMX/cmex/m/n on input line 44.\r\nLaTeX Font Info:    ... okay on input line 44.\r\nLaTeX Font Info:    Checking defaults for U/cmr/m/n on input line 44.\r\nLaTeX Font Info:    ... okay on input line 44.\r\nLaTeX Font Info:    Trying to load font information for U+msa on input line 44.\r\n\r\n\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/amsfonts\\umsa.fd\"\r\nFile: umsa.fd 2013/01/14 v3.01 AMS symbols A\r\n)\r\nLaTeX Font Info:    Trying to load font information for U+msb on input line 44.\r\n\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/amsfonts\\umsb.fd\"\r\nFile: umsb.fd 2013/01/14 v3.01 AMS symbols B\r\n)\r\n*geometry* driver: auto-detecting\r\n*geometry* detected driver: pdftex\r\n*geometry* verbose mode - [ preamble ] result:\r\n* driver: pdftex\r\n* paper: <default>\r\n* layout: <same size as paper>\r\n* layoutoffset:(h,v)=(0.0pt,0.0pt)\r\n* modes: twoside \r\n* h-part:(L,W,R)=(73.71613pt, 430.00462pt, 110.57425pt)\r\n* v-part:(T,H,B)=(95.39737pt, 556.47656pt, 143.09605pt)\r\n* \\paperwidth=614.295pt\r\n* \\paperheight=794.96999pt\r\n* \\textwidth=430.00462pt\r\n* \\textheight=556.47656pt\r\n* \\oddsidemargin=1.44614pt\r\n* \\evensidemargin=38.30426pt\r\n* \\topmargin=1.12738pt\r\n* \\headheight=8.0pt\r\n* \\headsep=14.0pt\r\n* \\topskip=10.0pt\r\n* \\footskip=12.0pt\r\n* \\marginparwidth=90.0pt\r\n* \\marginparsep=11.0pt\r\n* \\columnsep=10.0pt\r\n* \\skip\\footins=7.0pt plus 11.0pt\r\n* \\hoffset=0.0pt\r\n* \\voffset=0.0pt\r\n* \\mag=1000\r\n* \\@twocolumnfalse\r\n* \\@twosidetrue\r\n* \\@mparswitchtrue\r\n* \\@reversemarginfalse\r\n* (1in=72.27pt=25.4mm, 1cm=28.453pt)\r\n\r\n\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/context/base/mkii\\supp-p\r\ndf.mkii\"\r\n[Loading MPS to PDF converter (version 2006.09.02).]\r\n\\scratchcounter=\\count198\r\n\\scratchdimen=\\dimen166\r\n\\scratchbox=\\box53\r\n\\nofMPsegments=\\count266\r\n\\nofMParguments=\\count267\r\n\\everyMPshowfont=\\toks31\r\n\\MPscratchCnt=\\count268\r\n\\MPscratchDim=\\dimen167\r\n\\MPnumerator=\\count269\r\n\\makeMPintoPDFobject=\\count270\r\n\\everyMPtoPDFconversion=\\toks32\r\n)\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/epstopdf-pkg\\epsto\r\npdf-base.sty\"\r\nPackage: epstopdf-base 2020-01-24 v2.11 Base part for package epstopdf\r\nPackage epstopdf-base Info: Redefining graphics rule for `.eps' on input line 4\r\n85.\r\n)\r\nPackage caption Info: Begin \\AtBeginDocument code.\r\nPackage caption Info: End \\AtBeginDocument code.\r\n\r\n\r\nLaTeX Warning: No \\author given.\r\n\r\n[1{C:/Users/admin/AppData/Local/MiKTeX/2.9/pdftex/config/pdftex.map}]\r\nLaTeX Font Info:    Trying to load font information for T1+cmss on input line 1\r\n17.\r\n\r\n(\"C:\\Users\\admin\\AppData\\Local\\Programs\\MiKTeX 2.9\\tex/latex/base\\t1cmss.fd\"\r\nFile: t1cmss.fd 2019/12/16 v2.5j Standard LaTeX font definitions\r\n)\r\n[2]\r\n<./fig/svd1_1.png, id=26, 544.9158pt x 329.5512pt>\r\nFile: ./fig/svd1_1.png Graphic file (type png)\r\n<use ./fig/svd1_1.png>\r\nPackage pdftex.def Info: ./fig/svd1_1.png  used on input line 191.\r\n(pdftex.def)             Requested size: 234.30922pt x 141.70424pt.\r\n\r\nOverfull \\hbox (19.30692pt too wide) in paragraph at lines 191--194\r\n [][] \r\n []\r\n\r\n<./fig/svd1_2.png, id=28, 412.6617pt x 329.5512pt>\r\nFile: ./fig/svd1_2.png Graphic file (type png)\r\n<use ./fig/svd1_2.png>\r\nPackage pdftex.def Info: ./fig/svd1_2.png  used on input line 197.\r\n(pdftex.def)             Requested size: 177.44106pt x 141.70424pt.\r\n[3 <./fig/svd1_1.png> <./fig/svd1_2.png>]\r\n<fig/svd1_r_w.png, id=34, 1084.05pt x 722.7pt>\r\nFile: fig/svd1_r_w.png Graphic file (type png)\r\n<use fig/svd1_r_w.png>\r\nPackage pdftex.def Info: fig/svd1_r_w.png  used on input line 231.\r\n(pdftex.def)             Requested size: 487.818pt x 325.21199pt.\r\n\r\nOverfull \\hbox (57.81337pt too wide) in paragraph at lines 231--233\r\n [][] \r\n []\r\n\r\nreport.tex:238: Undefined control sequence.\r\nl.238 \\toprule\r\n              \r\nThe control sequence at the end of the top line\r\nof your error message was never \\def'ed. If you have\r\nmisspelled it (e.g., `\\hobx'), type `I' and the correct\r\nspelling (e.g., `I\\hbox'). Otherwise just continue,\r\nand I'll forget about whatever was undefined.\r\n\r\nreport.tex:240: Undefined control sequence.\r\n<recently read> \\midrule \r\n                         \r\nl.240 \\midrule\r\n              \r\nThe control sequence at the end of the top line\r\nof your error message was never \\def'ed. If you have\r\nmisspelled it (e.g., `\\hobx'), type `I' and the correct\r\nspelling (e.g., `I\\hbox'). Otherwise just continue,\r\nand I'll forget about whatever was undefined.\r\n\r\nreport.tex:247: Undefined control sequence.\r\n<recently read> \\bottomrule \r\n                            \r\nl.247 \\bottomrule\r\n                 \r\nThe control sequence at the end of the top line\r\nof your error message was never \\def'ed. If you have\r\nmisspelled it (e.g., `\\hobx'), type `I' and the correct\r\nspelling (e.g., `I\\hbox'). Otherwise just continue,\r\nand I'll forget about whatever was undefined.\r\n\r\n[4 <./fig/svd1_r_w.png>]\r\n<./fig/svd2_1.png, id=39, 544.9158pt x 329.5512pt>\r\nFile: ./fig/svd2_1.png Graphic file (type png)\r\n<use ./fig/svd2_1.png>\r\nPackage pdftex.def Info: ./fig/svd2_1.png  used on input line 277.\r\n(pdftex.def)             Requested size: 234.30922pt x 141.70424pt.\r\n\r\nOverfull \\hbox (19.30692pt too wide) in paragraph at lines 277--280\r\n [][] \r\n []\r\n\r\n<./fig/svd2_2.png, id=40, 412.6617pt x 329.5512pt>\r\nFile: ./fig/svd2_2.png Graphic file (type png)\r\n<use ./fig/svd2_2.png>\r\nPackage pdftex.def Info: ./fig/svd2_2.png  used on input line 283.\r\n(pdftex.def)             Requested size: 177.44106pt x 141.70424pt.\r\n<./fig/svd2_r_w.png, id=41, 1084.05pt x 722.7pt>\r\nFile: ./fig/svd2_r_w.png Graphic file (type png)\r\n<use ./fig/svd2_r_w.png>\r\nPackage pdftex.def Info: ./fig/svd2_r_w.png  used on input line 299.\r\n(pdftex.def)             Requested size: 487.818pt x 325.21199pt.\r\n\r\nOverfull \\hbox (57.81337pt too wide) in paragraph at lines 299--300\r\n [][] \r\n []\r\n\r\n[5 <./fig/svd2_1.png> <./fig/svd2_2.png>]\r\nreport.tex:304: Undefined control sequence.\r\nl.304 \\toprule\r\n              \r\nThe control sequence at the end of the top line\r\nof your error message was never \\def'ed. If you have\r\nmisspelled it (e.g., `\\hobx'), type `I' and the correct\r\nspelling (e.g., `I\\hbox'). Otherwise just continue,\r\nand I'll forget about whatever was undefined.\r\n\r\nreport.tex:306: Undefined control sequence.\r\n<recently read> \\midrule \r\n                         \r\nl.306 \\midrule\r\n              \r\nThe control sequence at the end of the top line\r\nof your error message was never \\def'ed. If you have\r\nmisspelled it (e.g., `\\hobx'), type `I' and the correct\r\nspelling (e.g., `I\\hbox'). Otherwise just continue,\r\nand I'll forget about whatever was undefined.\r\n\r\nreport.tex:313: Undefined control sequence.\r\n<recently read> \\bottomrule \r\n                            \r\nl.313 \\bottomrule\r\n                 \r\nThe control sequence at the end of the top line\r\nof your error message was never \\def'ed. If you have\r\nmisspelled it (e.g., `\\hobx'), type `I' and the correct\r\nspelling (e.g., `I\\hbox'). Otherwise just continue,\r\nand I'll forget about whatever was undefined.\r\n\r\n<./fig/nmf_1.png, id=47, 544.9158pt x 329.5512pt>\r\nFile: ./fig/nmf_1.png Graphic file (type png)\r\n<use ./fig/nmf_1.png>\r\nPackage pdftex.def Info: ./fig/nmf_1.png  used on input line 326.\r\n(pdftex.def)             Requested size: 234.30922pt x 141.70424pt.\r\n\r\nOverfull \\hbox (19.30692pt too wide) in paragraph at lines 326--329\r\n [][] \r\n []\r\n\r\n<./fig/nmf_2.png, id=48, 412.6617pt x 329.5512pt>\r\nFile: ./fig/nmf_2.png Graphic file (type png)\r\n<use ./fig/nmf_2.png>\r\nPackage pdftex.def Info: ./fig/nmf_2.png  used on input line 332.\r\n(pdftex.def)             Requested size: 177.44106pt x 141.70424pt.\r\n\r\nUnderfull \\vbox (badness 4341) has occurred while \\output is active []\r\n\r\n [6 <./fig/svd2_r_w.png>]\r\nreport.tex:353: Undefined control sequence.\r\nl.353 \\toprule\r\n              \r\nThe control sequence at the end of the top line\r\nof your error message was never \\def'ed. If you have\r\nmisspelled it (e.g., `\\hobx'), type `I' and the correct\r\nspelling (e.g., `I\\hbox'). Otherwise just continue,\r\nand I'll forget about whatever was undefined.\r\n\r\nreport.tex:355: Undefined control sequence.\r\n<recently read> \\midrule \r\n                         \r\nl.355 \\midrule\r\n              \r\nThe control sequence at the end of the top line\r\nof your error message was never \\def'ed. If you have\r\nmisspelled it (e.g., `\\hobx'), type `I' and the correct\r\nspelling (e.g., `I\\hbox'). Otherwise just continue,\r\nand I'll forget about whatever was undefined.\r\n\r\nreport.tex:362: Undefined control sequence.\r\n<recently read> \\bottomrule \r\n                            \r\nl.362 \\bottomrule\r\n                 \r\nThe control sequence at the end of the top line\r\nof your error message was never \\def'ed. If you have\r\nmisspelled it (e.g., `\\hobx'), type `I' and the correct\r\nspelling (e.g., `I\\hbox'). Otherwise just continue,\r\nand I'll forget about whatever was undefined.\r\n\r\n<./fig/nmf_r_w.png, id=53, 1084.05pt x 722.7pt>\r\nFile: ./fig/nmf_r_w.png Graphic file (type png)\r\n<use ./fig/nmf_r_w.png>\r\nPackage pdftex.def Info: ./fig/nmf_r_w.png  used on input line 372.\r\n(pdftex.def)             Requested size: 487.818pt x 325.21199pt.\r\n\r\nOverfull \\hbox (57.81337pt too wide) in paragraph at lines 372--373\r\n [][] \r\n []\r\n\r\n\r\nUnderfull \\vbox (badness 1975) has occurred while \\output is active []\r\n\r\n [7 <./fig/nmf_1.png> <./fig/nmf_2.png>]\r\nFile: ./fig/svd1_1.png Graphic file (type png)\r\n<use ./fig/svd1_1.png>\r\nPackage pdftex.def Info: ./fig/svd1_1.png  used on input line 386.\r\n(pdftex.def)             Requested size: 234.30922pt x 141.70424pt.\r\n\r\nOverfull \\hbox (19.30692pt too wide) in paragraph at lines 386--389\r\n [][] \r\n []\r\n\r\nFile: ./fig/svd1_2.png Graphic file (type png)\r\n<use ./fig/svd1_2.png>\r\nPackage pdftex.def Info: ./fig/svd1_2.png  used on input line 392.\r\n(pdftex.def)             Requested size: 177.44106pt x 141.70424pt.\r\n[8 <./fig/nmf_r_w.png>] [9]\r\n(C:/Users\\admin\\PycharmProjects\\MoCaDR_proj1\\auxil\\report.aux) ) \r\nHere is how much of TeX's memory you used:\r\n 6283 strings out of 481556\r\n 90971 string characters out of 2913869\r\n 335988 words of memory out of 3000000\r\n 21270 multiletter control sequences out of 15000+200000\r\n 552539 words of font info for 78 fonts, out of 3000000 for 9000\r\n 1302 hyphenation exceptions out of 8191\r\n 39i,10n,43p,815b,294s stack positions out of 5000i,500n,10000p,200000b,50000s\r\n <C:\\Users\\admi\r\nn\\AppData\\Local\\MiKTeX\\2.9\\fonts/pk/ljfour/jknappen/ec/dpi600\\ecss1095.pk> <C:\\\r\nUsers\\admin\\AppData\\Local\\MiKTeX\\2.9\\fonts/pk/ljfour/jknappen/ec/dpi600\\ecrm080\r\n0.pk> <C:\\Users\\admin\\AppData\\Local\\MiKTeX\\2.9\\fonts/pk/ljfour/jknappen/ec/dpi6\r\n00\\ecti1095.pk> <C:\\Users\\admin\\AppData\\Local\\MiKTeX\\2.9\\fonts/pk/ljfour/jknapp\r\nen/ec/dpi600\\ecbx1095.pk> <C:\\Users\\admin\\AppData\\Local\\MiKTeX\\2.9\\fonts/pk/ljf\r\nour/jknappen/ec/dpi600\\eccc1095.pk> <C:\\Users\\admin\\AppData\\Local\\MiKTeX\\2.9\\fo\r\nnts/pk/ljfour/jknappen/ec/dpi600\\ecrm1095.pk> <C:\\Users\\admin\\AppData\\Local\\MiK\r\nTeX\\2.9\\fonts/pk/ljfour/jknappen/ec/dpi600\\ecrm1200.pk> <C:\\Users\\admin\\AppData\r\n\\Local\\MiKTeX\\2.9\\fonts/pk/ljfour/jknappen/ec/dpi600\\ecrm1728.pk><C:/Users/admi\r\nn/AppData/Local/Programs/MiKTeX 2.9/fonts/type1/public/amsfonts/cm/cmex10.pfb><\r\nC:/Users/admin/AppData/Local/Programs/MiKTeX 2.9/fonts/type1/public/amsfonts/cm\r\n/cmmi10.pfb><C:/Users/admin/AppData/Local/Programs/MiKTeX 2.9/fonts/type1/publi\r\nc/amsfonts/cm/cmmi8.pfb><C:/Users/admin/AppData/Local/Programs/MiKTeX 2.9/fonts\r\n/type1/public/amsfonts/cm/cmmib10.pfb><C:/Users/admin/AppData/Local/Programs/Mi\r\nKTeX 2.9/fonts/type1/public/amsfonts/cm/cmr10.pfb><C:/Users/admin/AppData/Local\r\n/Programs/MiKTeX 2.9/fonts/type1/public/amsfonts/cm/cmr6.pfb><C:/Users/admin/Ap\r\npData/Local/Programs/MiKTeX 2.9/fonts/type1/public/amsfonts/cm/cmr8.pfb><C:/Use\r\nrs/admin/AppData/Local/Programs/MiKTeX 2.9/fonts/type1/public/amsfonts/cm/cmsy1\r\n0.pfb><C:/Users/admin/AppData/Local/Programs/MiKTeX 2.9/fonts/type1/public/amsf\r\nonts/cm/cmsy6.pfb><C:/Users/admin/AppData/Local/Programs/MiKTeX 2.9/fonts/type1\r\n/public/amsfonts/cm/cmsy8.pfb>\r\nOutput written on C:/Users\\admin\\PycharmProjects\\MoCaDR_proj1\\out\\report.pdf (9\r\n pages, 581368 bytes).\r\nPDF statistics:\r\n 322 PDF objects out of 1000 (max. 8388607)\r\n 0 named destinations out of 1000 (max. 500000)\r\n 46 words of extra memory for PDF output out of 10000 (max. 10000000)\r\n\r\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/auxil/report.log b/auxil/report.log
---- a/auxil/report.log	(revision cca69d005446496a4a742e962b2259b3813e93f9)
-+++ b/auxil/report.log	(date 1649620331510)
-@@ -1,4 +1,4 @@
--This is pdfTeX, Version 3.14159265-2.6-1.40.21 (MiKTeX 2.9.7300 64-bit) (preloaded format=pdflatex 2020.3.10)  9 APR 2022 22:27
-+This is pdfTeX, Version 3.14159265-2.6-1.40.21 (MiKTeX 2.9.7300 64-bit) (preloaded format=pdflatex 2020.3.10)  10 APR 2022 21:52
- entering extended mode
- **./report.tex
- (report.tex
-@@ -380,241 +380,130 @@
- LaTeX Warning: No \author given.
- 
- [1{C:/Users/admin/AppData/Local/MiKTeX/2.9/pdftex/config/pdftex.map}]
-+Overfull \hbox (19.25575pt too wide) in paragraph at lines 113--114
-+[]\T1/cmr/m/n/10.95 let $[] \OT1/cmr/m/n/10.95 := \OML/cmm/m/it/10.95 w[] \OMS/
-+cmsy/m/n/10.95   \OML/cmm/m/it/10.95  \OMS/cmsy/m/n/10.95  []$ \T1/cmr/m/n/10
-+.95 and $[] \OT1/cmr/m/n/10.95 := \OML/cmm/m/it/10.95 h[] \OMS/cmsy/m/n/10.95  
-+ \OML/cmm/m/it/10.95  \OMS/cmsy/m/n/10.95  []$\T1/cmr/m/n/10.95 , 
-+ []
-+
- LaTeX Font Info:    Trying to load font information for T1+cmss on input line 1
--17.
--
-+27.
- ("C:\Users\admin\AppData\Local\Programs\MiKTeX 2.9\tex/latex/base\t1cmss.fd"
- File: t1cmss.fd 2019/12/16 v2.5j Standard LaTeX font definitions
- )
--[2]
--<./fig/svd1_1.png, id=26, 544.9158pt x 329.5512pt>
-+[2] [3]
-+<./fig/svd1_1.png, id=29, 575.9919pt x 335.3328pt>
- File: ./fig/svd1_1.png Graphic file (type png)
- <use ./fig/svd1_1.png>
--Package pdftex.def Info: ./fig/svd1_1.png  used on input line 191.
--(pdftex.def)             Requested size: 234.30922pt x 141.70424pt.
--
--Overfull \hbox (19.30692pt too wide) in paragraph at lines 191--194
-- [][] 
-- []
--
--<./fig/svd1_2.png, id=28, 412.6617pt x 329.5512pt>
-+Package pdftex.def Info: ./fig/svd1_1.png  used on input line 216.
-+(pdftex.def)             Requested size: 270.905pt x 157.719pt.
-+<./fig/svd1_2.png, id=31, 423.5022pt x 335.3328pt>
- File: ./fig/svd1_2.png Graphic file (type png)
- <use ./fig/svd1_2.png>
--Package pdftex.def Info: ./fig/svd1_2.png  used on input line 197.
--(pdftex.def)             Requested size: 177.44106pt x 141.70424pt.
--[3 <./fig/svd1_1.png> <./fig/svd1_2.png>]
--<fig/svd1_r_w.png, id=34, 1084.05pt x 722.7pt>
--File: fig/svd1_r_w.png Graphic file (type png)
--<use fig/svd1_r_w.png>
--Package pdftex.def Info: fig/svd1_r_w.png  used on input line 231.
--(pdftex.def)             Requested size: 487.818pt x 325.21199pt.
-+Package pdftex.def Info: ./fig/svd1_2.png  used on input line 222.
-+(pdftex.def)             Requested size: 171.99922pt x 136.18767pt.
- 
--Overfull \hbox (57.81337pt too wide) in paragraph at lines 231--233
-- [][] 
-+Overfull \hbox (12.8996pt too wide) in paragraph at lines 214--226
-+ []$[]$$[]$ 
-  []
- 
--report.tex:238: Undefined control sequence.
--l.238 \toprule
--              
--The control sequence at the end of the top line
--of your error message was never \def'ed. If you have
--misspelled it (e.g., `\hobx'), type `I' and the correct
--spelling (e.g., `I\hbox'). Otherwise just continue,
--and I'll forget about whatever was undefined.
--
--report.tex:240: Undefined control sequence.
--<recently read> \midrule 
--                         
--l.240 \midrule
--              
--The control sequence at the end of the top line
--of your error message was never \def'ed. If you have
--misspelled it (e.g., `\hobx'), type `I' and the correct
--spelling (e.g., `I\hbox'). Otherwise just continue,
--and I'll forget about whatever was undefined.
--
--report.tex:247: Undefined control sequence.
--<recently read> \bottomrule 
--                            
--l.247 \bottomrule
--                 
--The control sequence at the end of the top line
--of your error message was never \def'ed. If you have
--misspelled it (e.g., `\hobx'), type `I' and the correct
--spelling (e.g., `I\hbox'). Otherwise just continue,
--and I'll forget about whatever was undefined.
--
--[4 <./fig/svd1_r_w.png>]
--<./fig/svd2_1.png, id=39, 544.9158pt x 329.5512pt>
-+[4 <./fig/svd1_1.png> <./fig/svd1_2.png>]
-+<fig/svd1_r_w2.png, id=37, 481.8pt x 382.42876pt>
-+File: fig/svd1_r_w2.png Graphic file (type png)
-+<use fig/svd1_r_w2.png>
-+Package pdftex.def Info: fig/svd1_r_w2.png  used on input line 268.
-+(pdftex.def)             Requested size: 289.08221pt x 229.45901pt.
-+ [5 <./fig/svd1_r_w2.png>]
-+<./fig/svd2_stop2.png, id=42, 487.06969pt x 382.42876pt>
-+File: ./fig/svd2_stop2.png Graphic file (type png)
-+<use ./fig/svd2_stop2.png>
-+Package pdftex.def Info: ./fig/svd2_stop2.png  used on input line 312.
-+(pdftex.def)             Requested size: 267.88914pt x 210.33646pt.
-+<./fig/svd2_1.png, id=43, 575.9919pt x 335.3328pt>
- File: ./fig/svd2_1.png Graphic file (type png)
- <use ./fig/svd2_1.png>
--Package pdftex.def Info: ./fig/svd2_1.png  used on input line 277.
--(pdftex.def)             Requested size: 234.30922pt x 141.70424pt.
--
--Overfull \hbox (19.30692pt too wide) in paragraph at lines 277--280
-- [][] 
-- []
--
--<./fig/svd2_2.png, id=40, 412.6617pt x 329.5512pt>
-+Package pdftex.def Info: ./fig/svd2_1.png  used on input line 323.
-+(pdftex.def)             Requested size: 270.905pt x 157.719pt.
-+<./fig/svd2_2.png, id=44, 423.5022pt x 335.3328pt>
- File: ./fig/svd2_2.png Graphic file (type png)
- <use ./fig/svd2_2.png>
--Package pdftex.def Info: ./fig/svd2_2.png  used on input line 283.
--(pdftex.def)             Requested size: 177.44106pt x 141.70424pt.
--<./fig/svd2_r_w.png, id=41, 1084.05pt x 722.7pt>
--File: ./fig/svd2_r_w.png Graphic file (type png)
--<use ./fig/svd2_r_w.png>
--Package pdftex.def Info: ./fig/svd2_r_w.png  used on input line 299.
--(pdftex.def)             Requested size: 487.818pt x 325.21199pt.
-+Package pdftex.def Info: ./fig/svd2_2.png  used on input line 329.
-+(pdftex.def)             Requested size: 171.99922pt x 136.18767pt.
- 
--Overfull \hbox (57.81337pt too wide) in paragraph at lines 299--300
-- [][] 
-+Overfull \hbox (12.8996pt too wide) in paragraph at lines 321--333
-+ []$[]$$[]$ 
-  []
- 
--[5 <./fig/svd2_1.png> <./fig/svd2_2.png>]
--report.tex:304: Undefined control sequence.
--l.304 \toprule
--              
--The control sequence at the end of the top line
--of your error message was never \def'ed. If you have
--misspelled it (e.g., `\hobx'), type `I' and the correct
--spelling (e.g., `I\hbox'). Otherwise just continue,
--and I'll forget about whatever was undefined.
--
--report.tex:306: Undefined control sequence.
--<recently read> \midrule 
--                         
--l.306 \midrule
--              
--The control sequence at the end of the top line
--of your error message was never \def'ed. If you have
--misspelled it (e.g., `\hobx'), type `I' and the correct
--spelling (e.g., `I\hbox'). Otherwise just continue,
--and I'll forget about whatever was undefined.
-+[6 <./fig/svd2_stop2.png>]
-+<./fig/svd2_r_w2.png, id=49, 488.57532pt x 381.67593pt>
-+File: ./fig/svd2_r_w2.png Graphic file (type png)
-+<use ./fig/svd2_r_w2.png>
-+Package pdftex.def Info: ./fig/svd2_r_w2.png  used on input line 358.
-+(pdftex.def)             Requested size: 293.14745pt x 229.00732pt.
- 
--report.tex:313: Undefined control sequence.
--<recently read> \bottomrule 
--                            
--l.313 \bottomrule
--                 
--The control sequence at the end of the top line
--of your error message was never \def'ed. If you have
--misspelled it (e.g., `\hobx'), type `I' and the correct
--spelling (e.g., `I\hbox'). Otherwise just continue,
--and I'll forget about whatever was undefined.
-+Underfull \vbox (badness 2884) has occurred while \output is active []
- 
--<./fig/nmf_1.png, id=47, 544.9158pt x 329.5512pt>
-+ [7 <./fig/svd2_1.png> <./fig/svd2_2.png>] [8 <./fig/svd2_r_w2.png>]
-+<./fig/nmf_1.png, id=60, 575.9919pt x 335.3328pt>
- File: ./fig/nmf_1.png Graphic file (type png)
- <use ./fig/nmf_1.png>
--Package pdftex.def Info: ./fig/nmf_1.png  used on input line 326.
--(pdftex.def)             Requested size: 234.30922pt x 141.70424pt.
--
--Overfull \hbox (19.30692pt too wide) in paragraph at lines 326--329
-- [][] 
-- []
--
--<./fig/nmf_2.png, id=48, 412.6617pt x 329.5512pt>
-+Package pdftex.def Info: ./fig/nmf_1.png  used on input line 396.
-+(pdftex.def)             Requested size: 270.905pt x 157.719pt.
-+<./fig/nmf_2.png, id=61, 423.5022pt x 335.3328pt>
- File: ./fig/nmf_2.png Graphic file (type png)
- <use ./fig/nmf_2.png>
--Package pdftex.def Info: ./fig/nmf_2.png  used on input line 332.
--(pdftex.def)             Requested size: 177.44106pt x 141.70424pt.
--
--Underfull \vbox (badness 4341) has occurred while \output is active []
--
-- [6 <./fig/svd2_r_w.png>]
--report.tex:353: Undefined control sequence.
--l.353 \toprule
--              
--The control sequence at the end of the top line
--of your error message was never \def'ed. If you have
--misspelled it (e.g., `\hobx'), type `I' and the correct
--spelling (e.g., `I\hbox'). Otherwise just continue,
--and I'll forget about whatever was undefined.
-+Package pdftex.def Info: ./fig/nmf_2.png  used on input line 402.
-+(pdftex.def)             Requested size: 171.99922pt x 136.18767pt.
- 
--report.tex:355: Undefined control sequence.
--<recently read> \midrule 
--                         
--l.355 \midrule
--              
--The control sequence at the end of the top line
--of your error message was never \def'ed. If you have
--misspelled it (e.g., `\hobx'), type `I' and the correct
--spelling (e.g., `I\hbox'). Otherwise just continue,
--and I'll forget about whatever was undefined.
--
--report.tex:362: Undefined control sequence.
--<recently read> \bottomrule 
--                            
--l.362 \bottomrule
--                 
--The control sequence at the end of the top line
--of your error message was never \def'ed. If you have
--misspelled it (e.g., `\hobx'), type `I' and the correct
--spelling (e.g., `I\hbox'). Otherwise just continue,
--and I'll forget about whatever was undefined.
--
--<./fig/nmf_r_w.png, id=53, 1084.05pt x 722.7pt>
--File: ./fig/nmf_r_w.png Graphic file (type png)
--<use ./fig/nmf_r_w.png>
--Package pdftex.def Info: ./fig/nmf_r_w.png  used on input line 372.
--(pdftex.def)             Requested size: 487.818pt x 325.21199pt.
--
--Overfull \hbox (57.81337pt too wide) in paragraph at lines 372--373
-- [][] 
-+Overfull \hbox (12.8996pt too wide) in paragraph at lines 394--406
-+ []$[]$$[]$ 
-  []
- 
--
--Underfull \vbox (badness 1975) has occurred while \output is active []
-+<./fig/nmf_r_w2.png, id=62, 485.56406pt x 379.4175pt>
-+File: ./fig/nmf_r_w2.png Graphic file (type png)
-+<use ./fig/nmf_r_w2.png>
-+Package pdftex.def Info: ./fig/nmf_r_w2.png  used on input line 432.
-+(pdftex.def)             Requested size: 291.34068pt x 227.65225pt.
-+[9 <./fig/nmf_1.png> <./fig/nmf_2.png>] [10 <./fig/nmf_r_w2.png>] [11]
-+(C:/Users\admin\PycharmProjects\MoCaDR_proj1\auxil\report.aux)
- 
-- [7 <./fig/nmf_1.png> <./fig/nmf_2.png>]
--File: ./fig/svd1_1.png Graphic file (type png)
--<use ./fig/svd1_1.png>
--Package pdftex.def Info: ./fig/svd1_1.png  used on input line 386.
--(pdftex.def)             Requested size: 234.30922pt x 141.70424pt.
-+LaTeX Warning: Label(s) may have changed. Rerun to get cross-references right.
- 
--Overfull \hbox (19.30692pt too wide) in paragraph at lines 386--389
-- [][] 
-- []
--
--File: ./fig/svd1_2.png Graphic file (type png)
--<use ./fig/svd1_2.png>
--Package pdftex.def Info: ./fig/svd1_2.png  used on input line 392.
--(pdftex.def)             Requested size: 177.44106pt x 141.70424pt.
--[8 <./fig/nmf_r_w.png>] [9]
--(C:/Users\admin\PycharmProjects\MoCaDR_proj1\auxil\report.aux) ) 
-+ ) 
- Here is how much of TeX's memory you used:
-- 6283 strings out of 481556
-- 90971 string characters out of 2913869
-- 335988 words of memory out of 3000000
-- 21270 multiletter control sequences out of 15000+200000
-+ 6291 strings out of 481556
-+ 91184 string characters out of 2913869
-+ 336989 words of memory out of 3000000
-+ 21278 multiletter control sequences out of 15000+200000
-  552539 words of font info for 78 fonts, out of 3000000 for 9000
-  1302 hyphenation exceptions out of 8191
-- 39i,10n,43p,815b,294s stack positions out of 5000i,500n,10000p,200000b,50000s
-- <C:\Users\admi
--n\AppData\Local\MiKTeX\2.9\fonts/pk/ljfour/jknappen/ec/dpi600\ecss1095.pk> <C:\
--Users\admin\AppData\Local\MiKTeX\2.9\fonts/pk/ljfour/jknappen/ec/dpi600\ecrm080
--0.pk> <C:\Users\admin\AppData\Local\MiKTeX\2.9\fonts/pk/ljfour/jknappen/ec/dpi6
--00\ecti1095.pk> <C:\Users\admin\AppData\Local\MiKTeX\2.9\fonts/pk/ljfour/jknapp
--en/ec/dpi600\ecbx1095.pk> <C:\Users\admin\AppData\Local\MiKTeX\2.9\fonts/pk/ljf
--our/jknappen/ec/dpi600\eccc1095.pk> <C:\Users\admin\AppData\Local\MiKTeX\2.9\fo
--nts/pk/ljfour/jknappen/ec/dpi600\ecrm1095.pk> <C:\Users\admin\AppData\Local\MiK
--TeX\2.9\fonts/pk/ljfour/jknappen/ec/dpi600\ecrm1200.pk> <C:\Users\admin\AppData
--\Local\MiKTeX\2.9\fonts/pk/ljfour/jknappen/ec/dpi600\ecrm1728.pk><C:/Users/admi
--n/AppData/Local/Programs/MiKTeX 2.9/fonts/type1/public/amsfonts/cm/cmex10.pfb><
-+ 39i,10n,43p,815b,321s stack positions out of 5000i,500n,10000p,200000b,50000s
-+ <C:\Users\admin\AppData\Local\MiKTeX\2.9\fonts/pk/ljfour/jknappen/ec/dpi600\
-+ecss1095.pk> <C:\Users\admin\AppData\Local\MiKTeX\2.9\fonts/pk/ljfour/jknappen/
-+ec/dpi600\ecrm0800.pk> <C:\Users\admin\AppData\Local\MiKTeX\2.9\fonts/pk/ljfour
-+/jknappen/ec/dpi600\ecti1095.pk> <C:\Users\admin\AppData\Local\MiKTeX\2.9\fonts
-+/pk/ljfour/jknappen/ec/dpi600\ecbx1095.pk> <C:\Users\admin\AppData\Local\MiKTeX
-+\2.9\fonts/pk/ljfour/jknappen/ec/dpi600\eccc1095.pk> <C:\Users\admin\AppData\Lo
-+cal\MiKTeX\2.9\fonts/pk/ljfour/jknappen/ec/dpi600\ecrm1095.pk> <C:\Users\admin\
-+AppData\Local\MiKTeX\2.9\fonts/pk/ljfour/jknappen/ec/dpi600\ecrm1200.pk> <C:\Us
-+ers\admin\AppData\Local\MiKTeX\2.9\fonts/pk/ljfour/jknappen/ec/dpi600\ecrm1728.
-+pk><C:/Users/admin/AppData/Local/Programs/MiKTeX 2.9/fonts/type1/public/amsfont
-+s/cm/cmex10.pfb><C:/Users/admin/AppData/Local/Programs/MiKTeX 2.9/fonts/type1/p
-+ublic/amsfonts/cm/cmmi10.pfb><C:/Users/admin/AppData/Local/Programs/MiKTeX 2.9/
-+fonts/type1/public/amsfonts/cm/cmmi8.pfb><C:/Users/admin/AppData/Local/Programs
-+/MiKTeX 2.9/fonts/type1/public/amsfonts/cm/cmmib10.pfb><C:/Users/admin/AppData/
-+Local/Programs/MiKTeX 2.9/fonts/type1/public/amsfonts/cm/cmr10.pfb><C:/Users/ad
-+min/AppData/Local/Programs/MiKTeX 2.9/fonts/type1/public/amsfonts/cm/cmr6.pfb><
- C:/Users/admin/AppData/Local/Programs/MiKTeX 2.9/fonts/type1/public/amsfonts/cm
--/cmmi10.pfb><C:/Users/admin/AppData/Local/Programs/MiKTeX 2.9/fonts/type1/publi
--c/amsfonts/cm/cmmi8.pfb><C:/Users/admin/AppData/Local/Programs/MiKTeX 2.9/fonts
--/type1/public/amsfonts/cm/cmmib10.pfb><C:/Users/admin/AppData/Local/Programs/Mi
--KTeX 2.9/fonts/type1/public/amsfonts/cm/cmr10.pfb><C:/Users/admin/AppData/Local
--/Programs/MiKTeX 2.9/fonts/type1/public/amsfonts/cm/cmr6.pfb><C:/Users/admin/Ap
--pData/Local/Programs/MiKTeX 2.9/fonts/type1/public/amsfonts/cm/cmr8.pfb><C:/Use
--rs/admin/AppData/Local/Programs/MiKTeX 2.9/fonts/type1/public/amsfonts/cm/cmsy1
--0.pfb><C:/Users/admin/AppData/Local/Programs/MiKTeX 2.9/fonts/type1/public/amsf
--onts/cm/cmsy6.pfb><C:/Users/admin/AppData/Local/Programs/MiKTeX 2.9/fonts/type1
--/public/amsfonts/cm/cmsy8.pfb>
--Output written on C:/Users\admin\PycharmProjects\MoCaDR_proj1\out\report.pdf (9
-- pages, 581368 bytes).
-+/cmr8.pfb><C:/Users/admin/AppData/Local/Programs/MiKTeX 2.9/fonts/type1/public/
-+amsfonts/cm/cmsy10.pfb><C:/Users/admin/AppData/Local/Programs/MiKTeX 2.9/fonts/
-+type1/public/amsfonts/cm/cmsy6.pfb><C:/Users/admin/AppData/Local/Programs/MiKTe
-+X 2.9/fonts/type1/public/amsfonts/cm/cmsy8.pfb>
-+Output written on C:/Users\admin\PycharmProjects\MoCaDR_proj1\out\report.pdf (1
-+1 pages, 660324 bytes).
- PDF statistics:
-- 322 PDF objects out of 1000 (max. 8388607)
-+ 357 PDF objects out of 1000 (max. 8388607)
-  0 named destinations out of 1000 (max. 500000)
-- 46 words of extra memory for PDF output out of 10000 (max. 10000000)
-+ 51 words of extra memory for PDF output out of 10000 (max. 10000000)
- 
-Index: src/presenting_results.ipynb
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/src/presenting_results.ipynb b/src/presenting_results.ipynb
---- a/src/presenting_results.ipynb	(revision cca69d005446496a4a742e962b2259b3813e93f9)
-+++ b/src/presenting_results.ipynb	(date 1649609480250)
-@@ -2,7 +2,7 @@
-  "cells": [
-   {
-    "cell_type": "code",
--   "execution_count": 13,
-+   "execution_count": 16,
-    "outputs": [],
-    "source": [
-     "import pandas as pd\n",
-@@ -14,7 +14,7 @@
-     "import matplotlib.pyplot as plt\n",
-     "from matplotlib import cm\n",
-     "from matplotlib.ticker import LinearLocator, FormatStrFormatter\n",
--    "os.chdir('D:\\Studia\\MoCaDR_proj1')"
-+    "os.chdir('C:/Users/admin/PycharmProjects/MoCaDR_proj1')"
-    ],
-    "metadata": {
-     "collapsed": false,
-@@ -265,7 +265,7 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 7,
-+   "execution_count": 18,
-    "outputs": [],
-    "source": [
-     "res_svd2_stop = pd.read_csv('Results/results_stop_svd2.csv')"
-@@ -304,17 +304,9 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 34,
-+   "execution_count": 19,
-    "outputs": [
-     {
--     "data": {
--      "text/plain": "<matplotlib.colorbar.Colorbar at 0x13b106368c0>"
--     },
--     "execution_count": 34,
--     "metadata": {},
--     "output_type": "execute_result"
--    },
--    {
-      "data": {
-       "text/plain": "<Figure size 1080x720 with 2 Axes>",
-       "image/png": "\n"
-@@ -335,7 +327,57 @@
-     "ax.set_ylabel('$r$', fontsize=17, color='red', labelpad=10)\n",
-     "ax.set_zlabel('RMSE', rotation=-90, fontsize=17, color='red', labelpad=10)\n",
-     "# Add a color bar which maps values to colors.\n",
--    "fig.colorbar(surf, shrink=0.5, aspect=20)"
-+    "fig.colorbar(surf, shrink=0.5, aspect=20)\n",
-+    "\n",
-+    "plt.savefig('Report/fig/svd2_stop.png')"
-+   ],
-+   "metadata": {
-+    "collapsed": false,
-+    "pycharm": {
-+     "name": "#%%\n"
-+    }
-+   }
-+  },
-+  {
-+   "cell_type": "code",
-+   "execution_count": 23,
-+   "outputs": [
-+    {
-+     "data": {
-+      "text/plain": "       stop   r      RMSE\n378  0.0086   9  0.879578\n356  0.0085   9  0.880032\n400  0.0087   9  0.880051\n421  0.0088   8  0.880321\n232  0.0079  17  0.880356\n399  0.0087   8  0.880363\n210  0.0078  17  0.880485\n299  0.0082  18  0.880578\n275  0.0081  16  0.880597\n384  0.0086  15  0.880600",
-+      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>stop</th>\n      <th>r</th>\n      <th>RMSE</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>378</th>\n      <td>0.0086</td>\n      <td>9</td>\n      <td>0.879578</td>\n    </tr>\n    <tr>\n      <th>356</th>\n      <td>0.0085</td>\n      <td>9</td>\n      <td>0.880032</td>\n    </tr>\n    <tr>\n      <th>400</th>\n      <td>0.0087</td>\n      <td>9</td>\n      <td>0.880051</td>\n    </tr>\n    <tr>\n      <th>421</th>\n      <td>0.0088</td>\n      <td>8</td>\n      <td>0.880321</td>\n    </tr>\n    <tr>\n      <th>232</th>\n      <td>0.0079</td>\n      <td>17</td>\n      <td>0.880356</td>\n    </tr>\n    <tr>\n      <th>399</th>\n      <td>0.0087</td>\n      <td>8</td>\n      <td>0.880363</td>\n    </tr>\n    <tr>\n      <th>210</th>\n      <td>0.0078</td>\n      <td>17</td>\n      <td>0.880485</td>\n    </tr>\n    <tr>\n      <th>299</th>\n      <td>0.0082</td>\n      <td>18</td>\n      <td>0.880578</td>\n    </tr>\n    <tr>\n      <th>275</th>\n      <td>0.0081</td>\n      <td>16</td>\n      <td>0.880597</td>\n    </tr>\n    <tr>\n      <th>384</th>\n      <td>0.0086</td>\n      <td>15</td>\n      <td>0.880600</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
-+     },
-+     "execution_count": 23,
-+     "metadata": {},
-+     "output_type": "execute_result"
-+    }
-+   ],
-+   "source": [
-+    "n=10\n",
-+    "res_svd2_stop.loc[res_svd2_stop.apply(lambda x: pd.Series(x.nsmallest(n).index))['RMSE']]"
-+   ],
-+   "metadata": {
-+    "collapsed": false,
-+    "pycharm": {
-+     "name": "#%%\n"
-+    }
-+   }
-+  },
-+  {
-+   "cell_type": "code",
-+   "execution_count": 26,
-+   "outputs": [
-+    {
-+     "data": {
-+      "text/plain": "stop     0.008318\nr       19.318182\nRMSE     0.882027\ndtype: float64"
-+     },
-+     "execution_count": 26,
-+     "metadata": {},
-+     "output_type": "execute_result"
-+    }
-+   ],
-+   "source": [
-+    "res_svd2_stop.loc[res_svd2_stop.groupby('r').idxmin()['RMSE']].mean()"
-    ],
-    "metadata": {
-     "collapsed": false,
-@@ -402,6 +444,30 @@
-     "n = 10\n",
-     "res_svd1_3d.loc[res_svd1_3d.apply(lambda x: pd.Series(x.nsmallest(n).index))['RMSE']]"
-    ],
-+   "metadata": {
-+    "collapsed": false,
-+    "pycharm": {
-+     "name": "#%%\n"
-+    }
-+   }
-+  },
-+  {
-+   "cell_type": "code",
-+   "execution_count": 24,
-+   "outputs": [
-+    {
-+     "ename": "NameError",
-+     "evalue": "name 'res_svd1_3d' is not defined",
-+     "output_type": "error",
-+     "traceback": [
-+      "\u001B[1;31m---------------------------------------------------------------------------\u001B[0m",
-+      "\u001B[1;31mNameError\u001B[0m                                 Traceback (most recent call last)",
-+      "Input \u001B[1;32mIn [24]\u001B[0m, in \u001B[0;36m<cell line: 1>\u001B[1;34m()\u001B[0m\n\u001B[1;32m----> 1\u001B[0m \u001B[43mres_svd1_3d\u001B[49m\u001B[38;5;241m.\u001B[39mloc[res_svd1_3d\u001B[38;5;241m.\u001B[39mgroupby(\u001B[38;5;124m'\u001B[39m\u001B[38;5;124mr\u001B[39m\u001B[38;5;124m'\u001B[39m)\u001B[38;5;241m.\u001B[39midxmin()[\u001B[38;5;124m'\u001B[39m\u001B[38;5;124mRMSE\u001B[39m\u001B[38;5;124m'\u001B[39m]]\n",
-+      "\u001B[1;31mNameError\u001B[0m: name 'res_svd1_3d' is not defined"
-+     ]
-+    }
-+   ],
-+   "source": [],
-    "metadata": {
-     "collapsed": false,
-     "pycharm": {
-Index: .idea/workspace.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"62d33fe8-2ec7-4d31-9bba-7fa36bc76fcb\" name=\"Changes\" comment=\"computing results\">\r\n      <change afterPath=\"$PROJECT_DIR$/Results/results_sgd_all_2021.csv\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/src/compute_results_sgd_all.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/MoCaDR_proj1.iml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/MoCaDR_proj1.iml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/misc.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/misc.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_09_04_2022_18_50__Changes_.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_09_04_2022_18_50__Changes_.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_09_04_2022_22_22__Changes_.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_09_04_2022_22_22__Changes_.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/presenting_results.ipynb\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/presenting_results.ipynb\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"RMarkdown.document\" />\r\n        <option value=\"Jupyter Notebook\" />\r\n        <option value=\"Python Script\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitSEFilterConfiguration\">\r\n    <file-type-list>\r\n      <filtered-out-file-type name=\"LOCAL_BRANCH\" />\r\n      <filtered-out-file-type name=\"REMOTE_BRANCH\" />\r\n      <filtered-out-file-type name=\"TAG\" />\r\n      <filtered-out-file-type name=\"COMMIT_BY_MESSAGE\" />\r\n    </file-type-list>\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"267VjyGJ9wr8oG7c6vyJzNQTvFk\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\">\r\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">\r\n    <property name=\"ASKED_ADD_EXTERNAL_FILES\" value=\"true\" />\r\n    <property name=\"ASKED_SHARE_PROJECT_CONFIGURATION_FILES\" value=\"true\" />\r\n    <property name=\"RunOnceActivity.OpenProjectViewOnStart\" value=\"true\" />\r\n    <property name=\"RunOnceActivity.ShowReadmeOnStart\" value=\"true\" />\r\n    <property name=\"SHARE_PROJECT_CONFIGURATION_FILES\" value=\"true\" />\r\n    <property name=\"WebServerToolWindowFactoryState\" value=\"false\" />\r\n    <property name=\"last_opened_file_path\" value=\"$PROJECT_DIR$/Report\" />\r\n    <property name=\"node.js.detected.package.eslint\" value=\"true\" />\r\n    <property name=\"node.js.detected.package.tslint\" value=\"true\" />\r\n    <property name=\"node.js.selected.package.eslint\" value=\"(autodetect)\" />\r\n    <property name=\"node.js.selected.package.tslint\" value=\"(autodetect)\" />\r\n    <property name=\"settings.editor.selected.configurable\" value=\"configurable.group.language\" />\r\n  </component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"D:\\Studia\\MoCaDR_proj1\\Report\" />\r\n      <recent name=\"D:\\Studia\\MoCaDR_proj1\" />\r\n    </key>\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"D:\\Studia\\MoCaDR_proj1\\Report\\fig\\syf\" />\r\n      <recent name=\"D:\\Studia\\MoCaDR_proj1\\Results\\Syf\" />\r\n      <recent name=\"D:\\Studia\\MoCaDR_proj1\\Report\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\" selected=\"Python.compute_results_sgd_test\">\r\n    <configuration name=\"report\" type=\"LATEX_RUN_CONFIGURATION\" factoryName=\"LaTeX configuration factory\" temporary=\"true\">\r\n      <texify>\r\n        <compiler>PDFLATEX</compiler>\r\n        <compiler-path />\r\n        <sumatra-path />\r\n        <pdf-viewer>SUMATRA</pdf-viewer>\r\n        <viewer-command />\r\n        <compiler-arguments />\r\n        <envs />\r\n        <main-file>$PROJECT_DIR$/Report/report.tex</main-file>\r\n        <output-path>$PROJECT_DIR$/Report/out</output-path>\r\n        <auxil-path>$PROJECT_DIR$/Report/auxil</auxil-path>\r\n        <compile-twice>false</compile-twice>\r\n        <output-format>PDF</output-format>\r\n        <latex-distribution>MIKTEX</latex-distribution>\r\n        <has-been-run>true</has-been-run>\r\n        <bib-run-config>[]</bib-run-config>\r\n        <makeindex-run-config>[]</makeindex-run-config>\r\n      </texify>\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"compute_results3\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"MoCaDR_proj1\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/src\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/src/compute_results3.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"compute_results_sgd_test\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"MoCaDR_proj1\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/src\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/src/compute_results_sgd_test.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"manipulating_datasets\" type=\"PythonConfigurationType\" factoryName=\"Python\" nameIsGenerated=\"true\">\r\n      <module name=\"MoCaDR_proj1\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"D:\\Studia\\MoCaDR_proj1\\manipulating_datasets.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"performing_algorithms\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"MoCaDR_proj1\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/src\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/src/performing_algorithms.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"splitting_data\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"MoCaDR_proj1\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/splitting_data.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <list>\r\n      <item itemvalue=\"LaTeX.report\" />\r\n      <item itemvalue=\"Python.manipulating_datasets\" />\r\n      <item itemvalue=\"Python.compute_results3\" />\r\n      <item itemvalue=\"Python.performing_algorithms\" />\r\n      <item itemvalue=\"Python.splitting_data\" />\r\n      <item itemvalue=\"Python.compute_results_sgd_test\" />\r\n    </list>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Python.compute_results_sgd_test\" />\r\n        <item itemvalue=\"LaTeX.report\" />\r\n        <item itemvalue=\"Python.splitting_data\" />\r\n        <item itemvalue=\"Python.performing_algorithms\" />\r\n        <item itemvalue=\"Python.compute_results3\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"SvnConfiguration\">\r\n    <configuration>C:\\Users\\dmika\\AppData\\Roaming\\Subversion</configuration>\r\n  </component>\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"62d33fe8-2ec7-4d31-9bba-7fa36bc76fcb\" name=\"Changes\" comment=\"\" />\r\n      <created>1646774751311</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1646774751311</updated>\r\n      <workItem from=\"1646774754054\" duration=\"26000\" />\r\n      <workItem from=\"1646774814002\" duration=\"835000\" />\r\n      <workItem from=\"1646775670059\" duration=\"47000\" />\r\n      <workItem from=\"1646775727774\" duration=\"757000\" />\r\n      <workItem from=\"1646816479175\" duration=\"461000\" />\r\n      <workItem from=\"1646896158453\" duration=\"762000\" />\r\n      <workItem from=\"1646896945682\" duration=\"630000\" />\r\n      <workItem from=\"1646897595717\" duration=\"2651000\" />\r\n      <workItem from=\"1646900622776\" duration=\"425000\" />\r\n      <workItem from=\"1646915517163\" duration=\"449000\" />\r\n      <workItem from=\"1646915983800\" duration=\"240000\" />\r\n      <workItem from=\"1646916258164\" duration=\"389000\" />\r\n      <workItem from=\"1646916663441\" duration=\"393000\" />\r\n      <workItem from=\"1646933050771\" duration=\"1105000\" />\r\n      <workItem from=\"1646936230049\" duration=\"1064000\" />\r\n      <workItem from=\"1647027781891\" duration=\"1279000\" />\r\n      <workItem from=\"1647071928401\" duration=\"2390000\" />\r\n      <workItem from=\"1647181792640\" duration=\"2955000\" />\r\n      <workItem from=\"1647276453225\" duration=\"264000\" />\r\n      <workItem from=\"1647276734574\" duration=\"7710000\" />\r\n      <workItem from=\"1647699257802\" duration=\"1713000\" />\r\n      <workItem from=\"1647774897107\" duration=\"5656000\" />\r\n      <workItem from=\"1648326375030\" duration=\"985000\" />\r\n      <workItem from=\"1648327394372\" duration=\"485000\" />\r\n      <workItem from=\"1648481964443\" duration=\"4660000\" />\r\n      <workItem from=\"1648576643019\" duration=\"4941000\" />\r\n      <workItem from=\"1648885683106\" duration=\"2799000\" />\r\n      <workItem from=\"1649100586613\" duration=\"401000\" />\r\n      <workItem from=\"1649142695450\" duration=\"1248000\" />\r\n      <workItem from=\"1649154173111\" duration=\"1535000\" />\r\n      <workItem from=\"1649225210342\" duration=\"2520000\" />\r\n      <workItem from=\"1649252977347\" duration=\"33000\" />\r\n      <workItem from=\"1649256897698\" duration=\"20000\" />\r\n      <workItem from=\"1649263859461\" duration=\"4502000\" />\r\n      <workItem from=\"1649340598453\" duration=\"3005000\" />\r\n      <workItem from=\"1649345448932\" duration=\"596000\" />\r\n      <workItem from=\"1649407349351\" duration=\"1672000\" />\r\n      <workItem from=\"1649429201664\" duration=\"3019000\" />\r\n      <workItem from=\"1649438274438\" duration=\"1751000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"a\">\r\n      <created>1646775274557</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646775274557</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"init commit\">\r\n      <created>1646775361377</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646775361377</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"init commit\">\r\n      <created>1646775521666</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646775521666</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"init commit\">\r\n      <created>1646775784756</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646775784756</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"init commit\">\r\n      <created>1646775870305</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646775870305</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"Adding dataset\">\r\n      <created>1646816860800</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646816860800</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"Setting up LaTeX\">\r\n      <created>1646898995949</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646898995949</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00008\" summary=\"Setting up LaTeX\">\r\n      <created>1646900639924</created>\r\n      <option name=\"number\" value=\"00008\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646900639924</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00009\" summary=\"Cleaning data\">\r\n      <created>1646934068924</created>\r\n      <option name=\"number\" value=\"00009\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646934068924</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00010\" summary=\"Cleaning data\">\r\n      <created>1647028888721</created>\r\n      <option name=\"number\" value=\"00010\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647028888721</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00011\" summary=\"Cleaning data\">\r\n      <created>1647029054319</created>\r\n      <option name=\"number\" value=\"00011\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647029054319</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00012\" summary=\"Tamarka testing\">\r\n      <created>1647163191686</created>\r\n      <option name=\"number\" value=\"00012\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00012\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647163191686</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00013\" summary=\"Experimenting with 'NaN' values\">\r\n      <created>1647168883206</created>\r\n      <option name=\"number\" value=\"00013\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00013\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647168883206</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00014\" summary=\"Experimenting with 'NaN' values\">\r\n      <created>1647175373237</created>\r\n      <option name=\"number\" value=\"00014\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00014\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647175373237</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00015\" summary=\"Removing duplicated packages\">\r\n      <created>1647175629524</created>\r\n      <option name=\"number\" value=\"00015\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00015\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647175629524</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00016\" summary=\"Testing methods\">\r\n      <created>1647184013664</created>\r\n      <option name=\"number\" value=\"00016\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00016\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647184013664</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00017\" summary=\"Testing methods\">\r\n      <created>1647184756535</created>\r\n      <option name=\"number\" value=\"00017\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00017\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647184756535</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00018\" summary=\"SVD opis Tamarka\">\r\n      <created>1647698852885</created>\r\n      <option name=\"number\" value=\"00018\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00018\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647698852885</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00019\" summary=\"SVD opis Tamarka\">\r\n      <created>1647699044053</created>\r\n      <option name=\"number\" value=\"00019\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00019\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647699044053</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00020\" summary=\"SVD opis Tamarka\">\r\n      <created>1647699173625</created>\r\n      <option name=\"number\" value=\"00020\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00020\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647699173625</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00021\" summary=\"Testing SVD2\">\r\n      <created>1648327858794</created>\r\n      <option name=\"number\" value=\"00021\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00021\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1648327858794</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00022\" summary=\"computing results\">\r\n      <created>1649155805892</created>\r\n      <option name=\"number\" value=\"00022\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00022\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1649155805892</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00023\" summary=\"Computing stop condition svd2\">\r\n      <created>1649345310151</created>\r\n      <option name=\"number\" value=\"00023\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00023\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1649345310151</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00024\" summary=\"Computing stop condition svd2\">\r\n      <created>1649408687739</created>\r\n      <option name=\"number\" value=\"00024\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00024\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1649408687739</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00025\" summary=\"Presenting results for NMF\">\r\n      <created>1649408979238</created>\r\n      <option name=\"number\" value=\"00025\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00025\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1649408979239</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00026\" summary=\"computing results\">\r\n      <created>1649434249565</created>\r\n      <option name=\"number\" value=\"00026\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00026\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1649434249565</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00027\" summary=\"computing results\">\r\n      <created>1649492068004</created>\r\n      <option name=\"number\" value=\"00027\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00027\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1649492068004</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00028\" summary=\"computing results\">\r\n      <created>1649518863744</created>\r\n      <option name=\"number\" value=\"00028\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00028\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1649518863744</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"29\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <option name=\"ADD_EXTERNAL_FILES_SILENTLY\" value=\"true\" />\r\n    <MESSAGE value=\"a\" />\r\n    <MESSAGE value=\"init commit\" />\r\n    <MESSAGE value=\"Adding dataset\" />\r\n    <MESSAGE value=\"Setting up LaTeX\" />\r\n    <MESSAGE value=\"Cleaning data\" />\r\n    <MESSAGE value=\"Tamarka testing\" />\r\n    <MESSAGE value=\"Experimenting with 'NaN' values\" />\r\n    <MESSAGE value=\"Removing duplicated packages\" />\r\n    <MESSAGE value=\"Testing methods\" />\r\n    <MESSAGE value=\"SVD opis Tamarka\" />\r\n    <MESSAGE value=\"Testing SVD2\" />\r\n    <MESSAGE value=\"Computing stop condition svd2\" />\r\n    <MESSAGE value=\"Presenting results for NMF\" />\r\n    <MESSAGE value=\"computing results\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"computing results\" />\r\n  </component>\r\n  <component name=\"com.intellij.coverage.CoverageDataManagerImpl\">\r\n    <SUITE FILE_PATH=\"coverage/main_py$splitting_manipulating_data.coverage\" NAME=\"splitting_manipulating_data Coverage Results\" MODIFIED=\"1648627073782\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/src\" />\r\n    <SUITE FILE_PATH=\"coverage/main_py$algorithm_functions.coverage\" NAME=\"algorithm_functions Coverage Results\" MODIFIED=\"1648826781925\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/src\" />\r\n    <SUITE FILE_PATH=\"coverage/main_py$computing_results.coverage\" NAME=\"computing_results Coverage Results\" MODIFIED=\"1648727756891\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/src\" />\r\n    <SUITE FILE_PATH=\"coverage/main_py$algorithms_script.coverage\" NAME=\"performing_algorithms Coverage Results\" MODIFIED=\"1647535849226\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/src\" />\r\n    <SUITE FILE_PATH=\"coverage/main_py$splitting_manipulating_data__1_.coverage\" NAME=\"splitting_manipulating_data (1) Coverage Results\" MODIFIED=\"1647870795349\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/src\" />\r\n    <SUITE FILE_PATH=\"coverage/main_py$a.coverage\" NAME=\"a Coverage Results\" MODIFIED=\"1648057368569\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/src\" />\r\n    <SUITE FILE_PATH=\"coverage/main_py$compute_results3.coverage\" NAME=\"compute_results3 Coverage Results\" MODIFIED=\"1649268385203\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/src\" />\r\n    <SUITE FILE_PATH=\"coverage/main_py$compute_results_sgd_test.coverage\" NAME=\"compute_results_sgd_test Coverage Results\" MODIFIED=\"1649528622400\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/src\" />\r\n    <SUITE FILE_PATH=\"coverage/MoCaDR_proj1$splitting_data.coverage\" NAME=\"splitting_data Coverage Results\" MODIFIED=\"1647174411611\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\r\n    <SUITE FILE_PATH=\"coverage/main_py$performing_algorithms__1_.coverage\" NAME=\"performing_algorithms (1) Coverage Results\" MODIFIED=\"1648057220868\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/src\" />\r\n    <SUITE FILE_PATH=\"coverage/main_py$performing_algorithms.coverage\" NAME=\"performing_algorithms Coverage Results\" MODIFIED=\"1648365686686\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/src\" />\r\n  </component>\r\n</project>
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/.idea/workspace.xml b/.idea/workspace.xml
---- a/.idea/workspace.xml	(revision cca69d005446496a4a742e962b2259b3813e93f9)
-+++ b/.idea/workspace.xml	(date 1649620047008)
-@@ -4,20 +4,32 @@
-     <option name="autoReloadType" value="SELECTIVE" />
-   </component>
-   <component name="ChangeListManager">
--    <list default="true" id="62d33fe8-2ec7-4d31-9bba-7fa36bc76fcb" name="Changes" comment="computing results">
--      <change afterPath="$PROJECT_DIR$/Results/results_sgd_all_2021.csv" afterDir="false" />
--      <change afterPath="$PROJECT_DIR$/src/compute_results_sgd_all.py" afterDir="false" />
-+    <list default="true" id="62d33fe8-2ec7-4d31-9bba-7fa36bc76fcb" name="Changes" comment="Report">
-+      <change afterPath="$PROJECT_DIR$/Report/fig/nmf_r_w2.png" afterDir="false" />
-+      <change afterPath="$PROJECT_DIR$/Report/fig/svd1_r_w2.png" afterDir="false" />
-+      <change afterPath="$PROJECT_DIR$/Report/fig/svd2_r_w2.png" afterDir="false" />
-+      <change afterPath="$PROJECT_DIR$/Report/fig/svd2_stop.png" afterDir="false" />
-+      <change afterPath="$PROJECT_DIR$/Report/fig/svd2_stop2.png" afterDir="false" />
-+      <change afterPath="$PROJECT_DIR$/Report/fig/syf/svd2_stop2.png" afterDir="false" />
-       <change beforePath="$PROJECT_DIR$/.idea/MoCaDR_proj1.iml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/MoCaDR_proj1.iml" afterDir="false" />
-       <change beforePath="$PROJECT_DIR$/.idea/misc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/misc.xml" afterDir="false" />
--      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_09_04_2022_18_50__Changes_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_09_04_2022_18_50__Changes_.xml" afterDir="false" />
--      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_09_04_2022_22_22__Changes_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_09_04_2022_22_22__Changes_.xml" afterDir="false" />
-+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_10_04_2022_09_43__Changes_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_10_04_2022_09_43__Changes_.xml" afterDir="false" />
-       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-+      <change beforePath="$PROJECT_DIR$/Report/report.tex" beforeDir="false" afterPath="$PROJECT_DIR$/Report/report.tex" afterDir="false" />
-+      <change beforePath="$PROJECT_DIR$/auxil/report.aux" beforeDir="false" afterPath="$PROJECT_DIR$/auxil/report.aux" afterDir="false" />
-+      <change beforePath="$PROJECT_DIR$/auxil/report.log" beforeDir="false" afterPath="$PROJECT_DIR$/auxil/report.log" afterDir="false" />
-+      <change beforePath="$PROJECT_DIR$/out/report.pdf" beforeDir="false" afterPath="$PROJECT_DIR$/out/report.pdf" afterDir="false" />
-+      <change beforePath="$PROJECT_DIR$/out/report.synctex.gz" beforeDir="false" afterPath="$PROJECT_DIR$/out/report.synctex.gz" afterDir="false" />
-       <change beforePath="$PROJECT_DIR$/src/presenting_results.ipynb" beforeDir="false" afterPath="$PROJECT_DIR$/src/presenting_results.ipynb" afterDir="false" />
-     </list>
-     <option name="SHOW_DIALOG" value="false" />
-     <option name="HIGHLIGHT_CONFLICTS" value="true" />
-     <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
-     <option name="LAST_RESOLUTION" value="IGNORE" />
-+  </component>
-+  <component name="ExportToHTMLSettings">
-+    <option name="printScope" value="1" />
-+    <option name="OUTPUT_DIRECTORY" value="$USER_HOME$/Downloads" />
-   </component>
-   <component name="FileTemplateManagerImpl">
-     <option name="RECENT_TEMPLATES">
-@@ -57,7 +69,7 @@
-     <property name="RunOnceActivity.ShowReadmeOnStart" value="true" />
-     <property name="SHARE_PROJECT_CONFIGURATION_FILES" value="true" />
-     <property name="WebServerToolWindowFactoryState" value="false" />
--    <property name="last_opened_file_path" value="$PROJECT_DIR$/Report" />
-+    <property name="last_opened_file_path" value="$USER_HOME$/Desktop" />
-     <property name="node.js.detected.package.eslint" value="true" />
-     <property name="node.js.detected.package.tslint" value="true" />
-     <property name="node.js.selected.package.eslint" value="(autodetect)" />
-@@ -66,16 +78,19 @@
-   </component>
-   <component name="RecentsManager">
-     <key name="CopyFile.RECENT_KEYS">
-+      <recent name="C:\Users\admin\Desktop" />
-       <recent name="D:\Studia\MoCaDR_proj1\Report" />
-       <recent name="D:\Studia\MoCaDR_proj1" />
-     </key>
-     <key name="MoveFile.RECENT_KEYS">
-+      <recent name="C:\Users\admin\PycharmProjects\MoCaDR_proj1\Report\fig" />
-+      <recent name="C:\Users\admin\PycharmProjects\MoCaDR_proj1\Report\fig\syf" />
-       <recent name="D:\Studia\MoCaDR_proj1\Report\fig\syf" />
-       <recent name="D:\Studia\MoCaDR_proj1\Results\Syf" />
-       <recent name="D:\Studia\MoCaDR_proj1\Report" />
-     </key>
-   </component>
--  <component name="RunManager" selected="Python.compute_results_sgd_test">
-+  <component name="RunManager" selected="LaTeX.report">
-     <configuration name="report" type="LATEX_RUN_CONFIGURATION" factoryName="LaTeX configuration factory" temporary="true">
-       <texify>
-         <compiler>PDFLATEX</compiler>
-@@ -86,8 +101,8 @@
-         <compiler-arguments />
-         <envs />
-         <main-file>$PROJECT_DIR$/Report/report.tex</main-file>
--        <output-path>$PROJECT_DIR$/Report/out</output-path>
--        <auxil-path>$PROJECT_DIR$/Report/auxil</auxil-path>
-+        <output-path>$PROJECT_DIR$/out</output-path>
-+        <auxil-path>$PROJECT_DIR$/auxil</auxil-path>
-         <compile-twice>false</compile-twice>
-         <output-format>PDF</output-format>
-         <latex-distribution>MIKTEX</latex-distribution>
-@@ -119,28 +134,6 @@
-       <option name="INPUT_FILE" value="" />
-       <method v="2" />
-     </configuration>
--    <configuration name="compute_results_sgd_test" type="PythonConfigurationType" factoryName="Python" temporary="true" nameIsGenerated="true">
--      <module name="MoCaDR_proj1" />
--      <option name="INTERPRETER_OPTIONS" value="" />
--      <option name="PARENT_ENVS" value="true" />
--      <envs>
--        <env name="PYTHONUNBUFFERED" value="1" />
--      </envs>
--      <option name="SDK_HOME" value="" />
--      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$/src" />
--      <option name="IS_MODULE_SDK" value="true" />
--      <option name="ADD_CONTENT_ROOTS" value="true" />
--      <option name="ADD_SOURCE_ROOTS" value="true" />
--      <EXTENSION ID="PythonCoverageRunConfigurationExtension" runner="coverage.py" />
--      <option name="SCRIPT_NAME" value="$PROJECT_DIR$/src/compute_results_sgd_test.py" />
--      <option name="PARAMETERS" value="" />
--      <option name="SHOW_COMMAND_LINE" value="false" />
--      <option name="EMULATE_TERMINAL" value="false" />
--      <option name="MODULE_MODE" value="false" />
--      <option name="REDIRECT_INPUT" value="false" />
--      <option name="INPUT_FILE" value="" />
--      <method v="2" />
--    </configuration>
-     <configuration name="manipulating_datasets" type="PythonConfigurationType" factoryName="Python" nameIsGenerated="true">
-       <module name="MoCaDR_proj1" />
-       <option name="INTERPRETER_OPTIONS" value="" />
-@@ -213,11 +206,9 @@
-       <item itemvalue="Python.compute_results3" />
-       <item itemvalue="Python.performing_algorithms" />
-       <item itemvalue="Python.splitting_data" />
--      <item itemvalue="Python.compute_results_sgd_test" />
-     </list>
-     <recent_temporary>
-       <list>
--        <item itemvalue="Python.compute_results_sgd_test" />
-         <item itemvalue="LaTeX.report" />
-         <item itemvalue="Python.splitting_data" />
-         <item itemvalue="Python.performing_algorithms" />
-@@ -275,6 +266,8 @@
-       <workItem from="1649407349351" duration="1672000" />
-       <workItem from="1649429201664" duration="3019000" />
-       <workItem from="1649438274438" duration="1751000" />
-+      <workItem from="1649535983650" duration="89000" />
-+      <workItem from="1649608218240" duration="5154000" />
-     </task>
-     <task id="LOCAL-00001" summary="a">
-       <created>1646775274557</created>
-@@ -465,14 +458,7 @@
-       <option name="project" value="LOCAL" />
-       <updated>1649492068004</updated>
-     </task>
--    <task id="LOCAL-00028" summary="computing results">
--      <created>1649518863744</created>
--      <option name="number" value="00028" />
--      <option name="presentableId" value="LOCAL-00028" />
--      <option name="project" value="LOCAL" />
--      <updated>1649518863744</updated>
--    </task>
--    <option name="localTasksCounter" value="29" />
-+    <option name="localTasksCounter" value="28" />
-     <servers />
-   </component>
-   <component name="TypeScriptGeneratedFilesManager">
-@@ -508,16 +494,15 @@
-     <option name="LAST_COMMIT_MESSAGE" value="computing results" />
-   </component>
-   <component name="com.intellij.coverage.CoverageDataManagerImpl">
--    <SUITE FILE_PATH="coverage/main_py$splitting_manipulating_data.coverage" NAME="splitting_manipulating_data Coverage Results" MODIFIED="1648627073782" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/src" />
--    <SUITE FILE_PATH="coverage/main_py$algorithm_functions.coverage" NAME="algorithm_functions Coverage Results" MODIFIED="1648826781925" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/src" />
--    <SUITE FILE_PATH="coverage/main_py$computing_results.coverage" NAME="computing_results Coverage Results" MODIFIED="1648727756891" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/src" />
-+    <SUITE FILE_PATH="coverage/main_py$performing_algorithms.coverage" NAME="performing_algorithms Coverage Results" MODIFIED="1647784050444" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/src" />
-     <SUITE FILE_PATH="coverage/main_py$algorithms_script.coverage" NAME="performing_algorithms Coverage Results" MODIFIED="1647535849226" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/src" />
-+    <SUITE FILE_PATH="coverage/main_py$splitting_manipulating_data.coverage" NAME="splitting_manipulating_data Coverage Results" MODIFIED="1648627073782" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/src" />
-+    <SUITE FILE_PATH="coverage/main_py$performing_algorithms__1_.coverage" NAME="performing_algorithms (1) Coverage Results" MODIFIED="1648057220868" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/src" />
-     <SUITE FILE_PATH="coverage/main_py$splitting_manipulating_data__1_.coverage" NAME="splitting_manipulating_data (1) Coverage Results" MODIFIED="1647870795349" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/src" />
--    <SUITE FILE_PATH="coverage/main_py$a.coverage" NAME="a Coverage Results" MODIFIED="1648057368569" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/src" />
-     <SUITE FILE_PATH="coverage/main_py$compute_results3.coverage" NAME="compute_results3 Coverage Results" MODIFIED="1649268385203" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/src" />
--    <SUITE FILE_PATH="coverage/main_py$compute_results_sgd_test.coverage" NAME="compute_results_sgd_test Coverage Results" MODIFIED="1649528622400" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/src" />
-     <SUITE FILE_PATH="coverage/MoCaDR_proj1$splitting_data.coverage" NAME="splitting_data Coverage Results" MODIFIED="1647174411611" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
--    <SUITE FILE_PATH="coverage/main_py$performing_algorithms__1_.coverage" NAME="performing_algorithms (1) Coverage Results" MODIFIED="1648057220868" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/src" />
--    <SUITE FILE_PATH="coverage/main_py$performing_algorithms.coverage" NAME="performing_algorithms Coverage Results" MODIFIED="1648365686686" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/src" />
-+    <SUITE FILE_PATH="coverage/main_py$a.coverage" NAME="a Coverage Results" MODIFIED="1648057368569" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/src" />
-+    <SUITE FILE_PATH="coverage/main_py$algorithm_functions.coverage" NAME="algorithm_functions Coverage Results" MODIFIED="1648826781925" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/src" />
-+    <SUITE FILE_PATH="coverage/main_py$computing_results.coverage" NAME="computing_results Coverage Results" MODIFIED="1648727756891" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/src" />
-   </component>
- </project>
-\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_10_04_2022_22_04__Changes_.xml
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_10_04_2022_22_04__Changes_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_10_04_2022_22_04__Changes_.xml
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_10_04_2022_22_04__Changes_.xml	
+++ /dev/null	
@@ -1,44 +0,0 @@
-<changelist name="Uncommitted_changes_before_Update_at_10_04_2022_22_04_[Changes]" date="1649621081275" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_10_04_2022_22_04_[Changes]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Update at 10.04.2022 22:04 [Changes]" />
-  <binary>
-    <option name="BEFORE_PATH" />
-    <option name="AFTER_PATH" value="Report/fig/svd2_r_w2.png" />
-    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_10_04_2022_22_04_[Changes]/svd2_r_w2.png" />
-  </binary>
-  <binary>
-    <option name="BEFORE_PATH" value="out/report.pdf" />
-    <option name="AFTER_PATH" value="out/report.pdf" />
-    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_10_04_2022_22_04_[Changes]/report.pdf" />
-  </binary>
-  <binary>
-    <option name="BEFORE_PATH" />
-    <option name="AFTER_PATH" value="Report/fig/svd1_r_w2.png" />
-    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_10_04_2022_22_04_[Changes]/svd1_r_w2.png" />
-  </binary>
-  <binary>
-    <option name="BEFORE_PATH" />
-    <option name="AFTER_PATH" value="Report/fig/svd2_stop2.png" />
-    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_10_04_2022_22_04_[Changes]/svd2_stop2.png" />
-  </binary>
-  <binary>
-    <option name="BEFORE_PATH" />
-    <option name="AFTER_PATH" value="Report/fig/syf/svd2_stop2.png" />
-    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_10_04_2022_22_04_[Changes]/svd2_stop21.png" />
-  </binary>
-  <binary>
-    <option name="BEFORE_PATH" value="out/report.synctex.gz" />
-    <option name="AFTER_PATH" value="out/report.synctex.gz" />
-    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_10_04_2022_22_04_[Changes]/report.synctex.gz" />
-  </binary>
-  <binary>
-    <option name="BEFORE_PATH" />
-    <option name="AFTER_PATH" value="Report/fig/nmf_r_w2.png" />
-    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_10_04_2022_22_04_[Changes]/nmf_r_w2.png" />
-  </binary>
-  <binary>
-    <option name="BEFORE_PATH" />
-    <option name="AFTER_PATH" value="Report/fig/svd2_stop.png" />
-    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_10_04_2022_22_04_[Changes]/svd2_stop.png" />
-  </binary>
-</changelist>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_09_04_2022_22_22_[Changes]/shelved.patch
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_09_04_2022_22_22_[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_09_04_2022_22_22_[Changes]/shelved.patch
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_09_04_2022_22_22_[Changes]/shelved.patch	
+++ /dev/null	
@@ -1,1905 +0,0 @@
-Index: Report/report.tex
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>%! Author = Miszka and Tamarka\r\n%! Date = 10.03.2022\r\n\r\n% Preamble\r\n\\documentclass[11pt]{amsart}\r\n\r\n% Packages\r\n\\usepackage{float}\r\n\\usepackage[T1]{fontenc}\r\n\\usepackage{geometry}\r\n\\usepackage{parskip}\r\n\\usepackage{amsmath}\r\n\\usepackage{amsfonts}\r\n\\usepackage{amsthm}\r\n\\usepackage{amssymb}\r\n\\usepackage{titling}\r\n%\\usepackage{itemize}\r\n\\usepackage{enumerate}\r\n\\usepackage{multirow}\r\n\\usepackage{graphics}\r\n\\usepackage{graphicx}\r\n\\usepackage{caption}\r\n\\usepackage{array}\r\n\\usepackage{xcolor}\r\n\r\n\\graphicspath{ {./fig/} }\r\n\r\n\r\n%\\setlength{\\droptitle}{-2cm}\r\n%\\newgeometry{tmargin=1.9cm, bmargin=1.9cm, lmargin=1.7cm, rmargin=1.7cm}\r\n\r\n\\DeclareMathOperator*{\\argmin}{arg\\,min}\r\n\r\n\\newcommand{\\tami}[1]{{\\textcolor{magenta}{#1}}}\r\n\\newcommand{\\domi}[1]{{\\textcolor{green}{#1}}}\r\n\r\n\\author{Tamara Frączek, Dominik Mika}\r\n\\title{Methods of classification and dimensionality reduction - Report 1}\r\n\\date{\\today}\r\n\r\n% Document\r\n\\begin{document}\r\n\\maketitle\r\n\r\n\r\n\\section{Introduction}\r\n\r\n\\subsection*{Statement of the problem}\r\n\r\nIn this task we have to create a movie recommender system for our users.\r\n\\domi{We have users who rated some movies}.\r\nOf course, not every user rated every movie and it is our task to fill those gaps.\r\nSo if one user hasn't seen one movie, we want to predict how he would like it.\r\n\r\n\r\n\r\n%some movies and some information about how our users rate our movies.\r\n%Since, of course, not every user rated every movie, we want to predict how they would like the movies from our list.\r\n\r\n%We have the data containing information how users rate some movies.\r\n%Our task is to create a recommender system, so having only some data we want to predict all ratings.\r\n\r\nFor this purpose we build few algorithms using different methods of predicting.\r\n%These methods are described in ...\r\nOf course different methods will give us different results (errors).\r\nOur task is to tune parameters of those methods and try to get the best possible ratings prediction.\r\n\r\n\r\n\r\n\\subsection*{Description of methods}\r\n\r\nIn this problem, we use different methods which are subset of PCA methods. They are often used for dimensionality reduction and matrix factorization.\r\n\r\n\\subsubsection*{SVD1}\r\n\r\nThis method gets a $n \\times d$ dimensional matrix $Z$ and approximate it by a different matrix $\\tilde{Z}$.\r\nSince we want somehow $\\tilde{Z}$ to maintain only ''the most important'' information from $Z$, then the rank of $\\tilde{Z}$ is to be much smaller than rank of $Z$.\r\nPrecisely, we want to find matrix $\\tilde{Z}_r$ of rank $r$ ($r < rank(Z)$ and $r$ is a parameter), so that $\\|Z - \\tilde{Z}_r\\|$ is small.\r\n\r\nUsing SVD decomposition $Z = U \\Lambda^{\\frac{1}{2}} V^T$ we construct $\\tilde{Z}$ as\r\n\\[\\tilde{Z}_r = U_r \\Lambda_r^{\\frac{1}{2}}V_r^T,\\]\r\nwhere $\\Lambda_r$ contains $r$ biggest eigenvalues of $Z$ and $U_r$, $V_r$ contains only columns corresponding to those eigenvalues.\r\n\r\n\\subsubsection*{SVD2}\r\n\r\nIt is an iterative method.\r\nWe perform SVD1 on matrix $Z$, then on the result of first SVD1 and so on.\r\nThe algorithm can be stopped after a fixed number of iterations or some stop condition can be established.\r\n\r\n\r\n\\subsubsection*{NMF}\r\n\r\nSimilarly as in SVD1 the method obtain a $n \\times d$ dimensional matrix $Z$ and approximate it by $\\tilde{Z}$.\r\nThis time $\\tilde{Z}$ is constructed as $\\tilde{Z}_r = W_r H_r $, where $W_r$ and $H_r$ are matrices with non-negative elements ($W_r$ has $r$ columns and $H_r$ has $r$ rows).\r\nPrecisely, we look for such $W_r$ and $H_r$ that $\\|Z - W_r H_r \\|^2$ is the smallest, where $\\|A\\|^2 = \\sum_{i, j} A_{ij}^2$.\r\n\r\n\\subsubsection*{SGD}\r\n\r\n\r\n\\section{Implementation}\r\n\r\n\\subsection*{Description of the data}\r\n\r\nOur data contains information 100837 ratings - exactly 610 users rated 9724 movies.\r\nThe columns are: \\textsf{userId} (integer), \\textsf{movieId} (integer) and \\textsf{rating} (integer), where \\textsf{userId} is a unique user id and \\textsf{movieId} is a unique movie id.\r\n\r\n\r\nWe keep this data in two-dimensional matrix of size $n \\times d$ where $n$ is the number of users and $d$ is the number of movies.\r\nIn element $(i,j)$ we put the rate of the user $i$ of the movie $j$.\r\nIf the user $i$ haven't rated the movie $j$ we leave the element empty.\r\n\r\n\r\n\\subsection*{Performing methods}\r\n\r\n\\tami{??tutaj jakaś intuicja po co dzielić dane??}\r\n\r\nSo to be able to evaluate the quality of the programs we split our data to two parts: train set and test set.\r\nThe train set is used to build the programs.\r\nAnd the test set is used to evaluate how our programs work.\r\n\r\n\r\nTo give our programs enough information about every user we split the data so that the train set contain 90\\% of ratings of each user (and the test set the remaining ones).\r\n\r\n\r\nLet call the matrix containing the data from the train set as $\\boldsymbol{Z}$ and the matrix containing the data from the test set as $\\boldsymbol{T}$.\r\n\r\n\r\n\\subsection*{Quality of the system}\r\n\r\nAssume that our algorithm return a matrix $\\boldsymbol{Z}^{'}$.\r\nThen the quality of our programs is computed as \\textbf{root-mean square error}\r\n\\[\\textsf{RMSE} =\r\n\\sqrt{\\frac{1}{|\\mathcal{T}|} \\sum_{(u,m) \\in \\mathcal{T}} \\left(\\boldsymbol{Z}^{'}[u,m] - \\boldsymbol{T}[u,m] \\right)^2}\\]\r\nwhere $\\mathcal{T}$ contains pairs $(u,m)$ from test set.\r\n\r\n\r\n\\subsection*{Imputing the missing data}\r\n\r\nBecause three of our methods (SVD1, SVD2 and NMF) are given a full matrix $\\boldsymbol{Z}$, so they need the missing data to be imputed before performing.\r\n\r\nWe decided to impute the data in 4 different ways:\r\n\\begin{itemize}\r\n    \\item putting 0 everywhere,\r\n    \\item putting global mean everywhere,\r\n    \\item putting row mean,\r\n    \\item putting weighted row and column mean ($\\alpha \\cdot \\text{\\textsf{col\\_mean}} + (1-\\alpha) \\cdot \\text{\\textsf{row\\_mean}}$, where $\\alpha$ is \\tami{...}).\r\n\\end{itemize}\r\n\r\n\\tami{??In SVD2 we make a correction -- czy to tu}\r\n\r\n\\tami{tutaj przemyślenia na temat tego czemu niektóre metody działają lepiej i dlaczego}\r\n\r\n\\section*{Parameters tuning and results}\r\n\r\n\\subsection*{SVD1} r\r\nwprowdzanie, powiedzenie, że trzeba dobrać r\r\n\r\nnapisać co to jest to weighted\r\n\r\n\\begin{figure}[H]\r\n\\includegraphics[scale=1]{fig/svd1_1}\r\n\\label{fig:figure}\r\n\\end{figure}\r\n\\tami{te wykresy po lewej trzeba zrobić od 0}\r\n\r\n\\begin{figure}[H]\r\n\\includegraphics[scale=0.45]{fig/svd1_2}\r\n\\label{fig:figure}\r\n\\end{figure}\r\n\r\numieścić obok siebie\r\n\r\nmała tabelka o tym jakie r najlepsze wychodzi dla tych metod\r\n\r\nwnioski, że ma wpływ jak uzupełniamy\r\njakieś wnioski, te zera beznadziejne\r\nże weighted wypadają najlepiej i chcemy to alfa dobrać optymalnie\r\n\r\n\r\nwprowadzenie, że dobieramy alfa\r\nno i ten rysunek wyżej nam pozwala obciąć r\r\nże robimy minimalizację po dwóch parametrach\r\n\r\n\\begin{figure}[H]\r\n\\includegraphics[scale=0.45]{fig/svd1_r_w}\r\n\\label{fig:figure}\r\n\\end{figure}\r\n\r\ntabelka z wynikami dla różnych alfa\r\n\r\nwnioski, że\r\nwyniki jakie r i waga daje nalepsze rmse, no i że to ma sens\r\n\r\ntabelka z najlepszymi wynikami\r\n\r\n%\\subsubsection*{SVD2} r, czy tutaj \\tami{warunek zatrzymania ????????}\r\n%\\begin{figure}[H]\r\n%\\includegraphics[scale=0.45]{fig/syf/svd2_all}\r\n%\\label{fig:figure}\r\n%\\end{figure}\r\n%\r\n%\\subsubsection*{NMF} r\r\n%\\begin{figure}[H]\r\n%\\includegraphics[scale=0.45]{fig/syf/nmf_all}\r\n%\\label{fig:figure}\r\n%\\end{figure}\r\n\r\n\r\n\r\n\r\n\\subsection*{SGD} $\\eta$, warunek początkowy\r\n\r\n\\section{Results}\r\n\r\n\r\n\r\n\\end{document}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/Report/report.tex b/Report/report.tex
---- a/Report/report.tex	(revision 7551f0ee5fbc5d43453af9d58769adbcb2bdfdb2)
-+++ b/Report/report.tex	(date 1649535677573)
-@@ -22,6 +22,8 @@
- \usepackage{caption}
- \usepackage{array}
- \usepackage{xcolor}
-+\usepackage{subcaption}
-+
- 
- \graphicspath{ {./fig/} }
- 
-@@ -96,6 +98,16 @@
- 
- \subsubsection*{SGD}
- 
-+This method, similarly as previous ones want to estimate matrix $Z$ with a product of matrices
-+$W$ and $H$, but not necessarily obtaining the whole matrix $Z$.
-+
-+Let's assume that we have only some values of $z_{ij}$ and let call those pairs $(i,j)$ where we know the value of $Z$ as $I$.
-+We look for
-+$$\argmin_{W, H} \sum_{(i,j)\in I} (z_{ij} - w_i^T h_j)^2 + \lambda(\|w_i^T\|^2 + \|h_j\|^2),$$
-+where $h_j$ is $j$-th column of $h$, $w_i^T$ is $i$-th row of $W$ and $\lambda > 0$ is a parameter.
-+So roughly speaking we look for $W$ and $H$ such that $Z \approx WH$ for elements known in $Z$, but also we want $W$ and $H$ to have quite small values (it gives us the part of sum with parameter $\lambda$).
-+
-+\tami{opis metody...}
- 
- \section{Implementation}
- 
-@@ -120,7 +132,7 @@
- 
- 
- To give our programs enough information about every user we split the data so that the train set contain 90\% of ratings of each user (and the test set the remaining ones).
--
-+\tami{tutaj coś o tym, że będziemy to powtarzać??}
- 
- Let call the matrix containing the data from the train set as $\boldsymbol{Z}$ and the matrix containing the data from the test set as $\boldsymbol{T}$.
- 
-@@ -136,81 +148,258 @@
- 
- \subsection*{Imputing the missing data}
- 
--Because three of our methods (SVD1, SVD2 and NMF) are given a full matrix $\boldsymbol{Z}$, so they need the missing data to be imputed before performing.
-+Since three of our methods (SVD1, SVD2 and NMF) are given a full matrix $\boldsymbol{Z}$ then they need the missing data to be imputed before performing.
- 
- We decided to impute the data in 4 different ways:
- \begin{itemize}
-     \item putting 0 everywhere,
-     \item putting global mean everywhere,
-     \item putting row mean,
--    \item putting weighted row and column mean ($\alpha \cdot \text{\textsf{col\_mean}} + (1-\alpha) \cdot \text{\textsf{row\_mean}}$, where $\alpha$ is \tami{...}).
-+    \item putting weighted row and column mean ($\alpha \cdot \text{\textsf{col\_mean}} + (1-\alpha) \cdot \text{\textsf{row\_mean}}$, where $\alpha$ is a parameter).
- \end{itemize}
- 
--\tami{??In SVD2 we make a correction -- czy to tu}
--
- \tami{tutaj przemyślenia na temat tego czemu niektóre metody działają lepiej i dlaczego}
- 
--\section*{Parameters tuning and results}
-+\section{Parameters tuning and results}
-+
-+\tami{coś o tym, że metody pozostawiaja trochę dowolności?}
- 
--\subsection*{SVD1} r
--wprowdzanie, powiedzenie, że trzeba dobrać r
-+Before performing our methods and obtaining results we have to set some parameters.
- 
--napisać co to jest to weighted
-+First of all, all the methods need a parameter $r$, which is the rank of matrices in $Z$ decomposition.
-+SGD needs also learning rate and $\lambda$.
-+And iteration methods need maximum of possible iterations or a stop condition.
-+
-+What's more, for all of our methods we want to choose optimal $\alpha$ in the last method of imputing data.
-+
-+
-+
-+\subsection*{SVD1}
-+
-+\tami{co tu napisać}
-+
-+\tami{napisać co to jest to weighted}
-+
-+At the beginning we consider only \tami{...}
-+
-+Below, we present a graph showing dependence of RMSE on $r$.
- 
- \begin{figure}[H]
--\includegraphics[scale=1]{fig/svd1_1}
--\label{fig:figure}
-+\centering
-+\begin{minipage}{.5\textwidth}
-+  \centering
-+  \includegraphics[scale=0.43]{svd1_1}
-+%  \captionof{figure}{A figure}
-+%  \label{fig:test1}
-+\end{minipage}%
-+\begin{minipage}{.5\textwidth}
-+  \centering
-+  \includegraphics[scale=0.43]{svd1_2}
-+%  \captionof{figure}{Another figure}
-+%  \label{fig:test2}
-+\end{minipage}
- \end{figure}
--\tami{te wykresy po lewej trzeba zrobić od 0}
-+
-+Also we present a table with the lowest RMSE for every imputation method and the parameter $r$ that gave it.
-+\begin{table}[H]
-+\begin{tabular}{c|ccccc}
-+& 0 & column means & global mean & weighted means & row means \\
-+\hline
-+$r$ & 7 & 13 & 15 & 9 & 6 \\
-+RMSE & 2.866 & 0.946 & 0.987 & 0.877 & 0.904 \\
-+\end{tabular}
-+\end{table}
-+%wnioski, że ma wpływ jak uzupełniamy
-+%jakieś wnioski, te zera beznadziejne
-+%że weighted wypadają najlepiej i chcemy to alfa dobrać optymalnie
-+
-+First of all, we observe that as we expected the imputation method does matter.
-+It is most clearly seen looking at RMSE of data filled with zeros, that for the best $r$ is around $2.9$.
-+Other methods also differ a lot.
-+The lowest RMSE obtain the data filled with weighted data.
-+That's why we may suspect that optimizing $\alpha$ can give even better results.
-+
-+%wprowadzenie, że dobieramy alfa
-+%no i ten rysunek wyżej nam pozwala obciąć r
-+%że robimy minimalizację po dwóch parametrach
-+
-+To get optimal result we perform optimization with respect to two parameters: $\alpha$ and $r$.
-+As we can see on the picture above only $r$ between $0$ and $50$ give some reasonable results, so we consider only those (we could use all $r$, but it is time consuming).
-+Below, we present graph showing dependence of RMSE on $\alpha$ and $r$ for data \tami{...}
- 
- \begin{figure}[H]
--\includegraphics[scale=0.45]{fig/svd1_2}
-+\includegraphics[scale=0.45]{fig/svd1_r_w}
- \label{fig:figure}
- \end{figure}
- 
--umieścić obok siebie
-+Below we present also table with \tami{...} lowest RMSE and pairs $(\alpha, r)$ that gave those.
-+\begin{table}[H]
-+\begin{tabular}{cc|c}
-+\toprule
-+ $\alpha$ &  $r$ &     RMSE \\
-+\midrule
-+\hline
-+       0.39 & 10 & 0.873987 \\
-+       0.38 & 10 & 0.874244 \\
-+       0.42 & 10 & 0.874274 \\
-+       0.36 & 10 & 0.874449 \\
-+       0.39 & 11 & 0.874469 \\
-+\bottomrule
-+\end{tabular}
-+\end{table}
-+
-+As we can see 10 seems to be the best $r$ and 0.39 seems to be the best $\alpha$.
-+Also in all those results $(\alpha, r)$ are close to them.
-+\tami{So $\alpha = 0.39$ and $r = 10$ are parameters that we use to perform this method further in the report.}
-+
-+Since in columns we keep indexes of movies, it means that our filled data take a bit more information from user ratings mean than from the movie ratings mean.
-+That is probably logical \tami{...}
-+
-+To conclude this subsection we present our best results obtained using these methods.
-+\tami{which means what}
-+
-+\tami{tabelka z najlepszymi wynikami}
- 
--mała tabelka o tym jakie r najlepsze wychodzi dla tych metod
- 
--wnioski, że ma wpływ jak uzupełniamy
--jakieś wnioski, te zera beznadziejne
--że weighted wypadają najlepiej i chcemy to alfa dobrać optymalnie
-+\subsection*{SVD2}
-+In this case we want to proceed as in SVD1 case.
- 
-+\tami{??In SVD2 we make a correction -- czy to tu}
- 
--wprowadzenie, że dobieramy alfa
--no i ten rysunek wyżej nam pozwala obciąć r
--że robimy minimalizację po dwóch parametrach
-+stop condition
-+
-+
- 
- \begin{figure}[H]
--\includegraphics[scale=0.45]{fig/svd1_r_w}
--\label{fig:figure}
-+\centering
-+\begin{minipage}{.5\textwidth}
-+  \centering
-+  \includegraphics[scale=0.43]{svd2_1}
-+%  \captionof{figure}{A figure}
-+%  \label{fig:test1}
-+\end{minipage}%
-+\begin{minipage}{.5\textwidth}
-+  \centering
-+  \includegraphics[scale=0.43]{svd2_2}
-+%  \captionof{figure}{Another figure}
-+%  \label{fig:test2}
-+\end{minipage}
-+\end{figure}
-+
-+\begin{table}[H]
-+\begin{tabular}{c|ccccc}
-+& 0 & column means & global mean & weighted means & row means \\
-+\hline
-+$r$ & 19 & 10 & 6 & 13 & 7 \\
-+RMSE & 2.779 & 0.942 & 0.942 & 0.875 & 0.878 \\
-+\end{tabular}
-+\end{table}
-+
-+\begin{figure}[H]
-+\includegraphics[scale = 0.45]{svd2_r_w}
-+\end{figure}
-+
-+\begin{table}[H]
-+\begin{tabular}{rrr}
-+\toprule
-+$\alpha$ &  $r$ &     RMSE \\
-+\midrule
-+\hline
-+       0.25 &  8 & 0.867393 \\
-+       0.26 &  8 & 0.867397 \\
-+       0.24 &  8 & 0.867402 \\
-+       0.27 &  8 & 0.867410 \\
-+       0.28 &  8 & 0.867494 \\
-+\bottomrule
-+\end{tabular}
-+\end{table}
-+
-+\subsection*{NMF}
-+
-+In this case since we have only $r$ and $\alpha$ to find, we proceed in exactly the same way as in the case of SVD.
-+So, firstly we present a graph showing dependence of RMSE on $r$. \tami{in some cases...}
-+
-+\begin{figure}[H]
-+\centering
-+\begin{minipage}{.5\textwidth}
-+  \centering
-+  \includegraphics[scale=0.43]{nmf_1}
-+%  \captionof{figure}{A figure}
-+%  \label{fig:test1}
-+\end{minipage}%
-+\begin{minipage}{.5\textwidth}
-+  \centering
-+  \includegraphics[scale=0.43]{nmf_2}
-+%  \captionof{figure}{Another figure}
-+%  \label{fig:test2}
-+\end{minipage}
- \end{figure}
- 
--tabelka z wynikami dla różnych alfa
-+Comparing this graph to the graph for SVD we can see that \tami{tutaj o tym, że jest bardziej takie postrzępione}
-+
-+Below we also present a table with the lowest RMSE for every imputation method and the parameter $r$ that gave it.
-+
-+\begin{table}[H]
-+\begin{tabular}{c|ccccc}
-+& 0 & column means & global mean & weighted means & row means \\
-+\hline
-+$r$ & 6 & 47 & 30 & 37 & 15\\
-+RMSE & 2.900 & 0.946 & 0.987 & 0.877 & 0.905 \\
-+\end{tabular}
-+\end{table}
-+
-+\begin{table}[H]
-+\begin{tabular}{cc|c}
-+\toprule
-+$\alpha$ &  $r$ &     RMSE \\
-+\midrule
-+\hline
-+       0.40 & 37 & 0.874794 \\
-+       0.41 & 37 & 0.874817 \\
-+       0.39 & 18 & 0.874841 \\
-+       0.39 & 37 & 0.874848 \\
-+       0.40 & 18 & 0.874849 \\
-+\bottomrule
-+\end{tabular}
-+\end{table}
-+
-+As we can see the parameters $r$ are in general bigger than in previous cases.
-+\tami{czy będą bardziej porostrzelane}
- 
--wnioski, że
--wyniki jakie r i waga daje nalepsze rmse, no i że to ma sens
-+Now we pefrorm the optimization with respect to $\alpha$ and $r$ and present a graph showing the results.
- 
--tabelka z najlepszymi wynikami
-+\begin{figure}[H]
-+\includegraphics[scale = 0.45]{nmf_r_w}
-+\end{figure}
- 
--%\subsubsection*{SVD2} r, czy tutaj \tami{warunek zatrzymania ????????}
--%\begin{figure}[H]
--%\includegraphics[scale=0.45]{fig/syf/svd2_all}
--%\label{fig:figure}
--%\end{figure}
--%
--%\subsubsection*{NMF} r
--%\begin{figure}[H]
--%\includegraphics[scale=0.45]{fig/syf/nmf_all}
--%\label{fig:figure}
--%\end{figure}
-+\tami{tabelka z najlepszymi r i alpha}
-+\tami{jakie r i alpha wybieramy}
- 
-+\tami{tabelka z najlepszymi wynikami}
- 
-+\subsection*{SGD}
- 
-+\begin{figure}[H]
-+\centering
-+\begin{minipage}{.5\textwidth}
-+  \centering
-+  \includegraphics[scale=0.43]{svd1_1}
-+%  \captionof{figure}{A figure}
-+%  \label{fig:test1}
-+\end{minipage}%
-+\begin{minipage}{.5\textwidth}
-+  \centering
-+  \includegraphics[scale=0.43]{svd1_2}
-+%  \captionof{figure}{Another figure}
-+%  \label{fig:test2}
-+\end{minipage}
-+\end{figure}
- 
--\subsection*{SGD} $\eta$, warunek początkowy
- 
--\section{Results}
-+
-+\section{}
-+
-+\section{Conclusions}
- 
- 
- 
-Index: .idea/shelf/Uncommitted_changes_before_Update_at_02_04_2022_09_45__Changes_.xml
-===================================================================
-diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_02_04_2022_09_45__Changes_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_02_04_2022_09_45__Changes_.xml
-deleted file mode 100644
---- a/.idea/shelf/Uncommitted_changes_before_Update_at_02_04_2022_09_45__Changes_.xml	(revision 7551f0ee5fbc5d43453af9d58769adbcb2bdfdb2)
-+++ /dev/null	(revision 7551f0ee5fbc5d43453af9d58769adbcb2bdfdb2)
-@@ -1,4 +0,0 @@
--<changelist name="Uncommitted_changes_before_Update_at_02_04_2022_09_45_[Changes]" date="1648885559775" recycled="true" deleted="true">
--  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_02_04_2022_09_45_[Changes]/shelved.patch" />
--  <option name="DESCRIPTION" value="Uncommitted changes before Update at 02.04.2022 09:45 [Changes]" />
--</changelist>
-\ No newline at end of file
-Index: .idea/shelf/Uncommitted_changes_before_Update_at_02_04_2022_09_45_[Changes]/shelved.patch
-===================================================================
-diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_02_04_2022_09_45_[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_02_04_2022_09_45_[Changes]/shelved.patch
-deleted file mode 100644
---- a/.idea/shelf/Uncommitted_changes_before_Update_at_02_04_2022_09_45_[Changes]/shelved.patch	(revision 7551f0ee5fbc5d43453af9d58769adbcb2bdfdb2)
-+++ /dev/null	(revision 7551f0ee5fbc5d43453af9d58769adbcb2bdfdb2)
-@@ -1,66 +0,0 @@
--Index: .idea/workspace.xml
--IDEA additional info:
--Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
--<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"62d33fe8-2ec7-4d31-9bba-7fa36bc76fcb\" name=\"Changes\" comment=\"Implementing SGD\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/MoCaDR_proj1.iml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/MoCaDR_proj1.iml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/misc.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/misc.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_29_03_2022_08_51__Changes_.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_29_03_2022_08_51__Changes_.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Report/auxil/test.aux\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Report/auxil/test.aux\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Report/auxil/test.log\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Report/auxil/test.log\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Report/out/test.pdf\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Report/out/test.pdf\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Report/out/test.synctex.gz\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Report/out/test.synctex.gz\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Report/test.tex\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Report/test.tex\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/choosing_parameters.ipynb\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/choosing_parameters.ipynb\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/syf1.ipynb\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/syf1.ipynb\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"RMarkdown.document\" />\r\n        <option value=\"Python Script\" />\r\n        <option value=\"Jupyter Notebook\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitSEFilterConfiguration\">\r\n    <file-type-list>\r\n      <filtered-out-file-type name=\"LOCAL_BRANCH\" />\r\n      <filtered-out-file-type name=\"REMOTE_BRANCH\" />\r\n      <filtered-out-file-type name=\"TAG\" />\r\n      <filtered-out-file-type name=\"COMMIT_BY_MESSAGE\" />\r\n    </file-type-list>\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"267VjyGJ9wr8oG7c6vyJzNQTvFk\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\">\r\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">\r\n    <property name=\"ASKED_ADD_EXTERNAL_FILES\" value=\"true\" />\r\n    <property name=\"ASKED_SHARE_PROJECT_CONFIGURATION_FILES\" value=\"true\" />\r\n    <property name=\"RunOnceActivity.OpenProjectViewOnStart\" value=\"true\" />\r\n    <property name=\"RunOnceActivity.ShowReadmeOnStart\" value=\"true\" />\r\n    <property name=\"SHARE_PROJECT_CONFIGURATION_FILES\" value=\"true\" />\r\n    <property name=\"WebServerToolWindowFactoryState\" value=\"false\" />\r\n    <property name=\"last_opened_file_path\" value=\"$PROJECT_DIR$\" />\r\n    <property name=\"node.js.detected.package.eslint\" value=\"true\" />\r\n    <property name=\"node.js.detected.package.tslint\" value=\"true\" />\r\n    <property name=\"node.js.selected.package.eslint\" value=\"(autodetect)\" />\r\n    <property name=\"node.js.selected.package.tslint\" value=\"(autodetect)\" />\r\n    <property name=\"settings.editor.selected.configurable\" value=\"org.jetbrains.plugins.notebooks.jupyter.connections.configuration.JupyterServerConfigurable\" />\r\n  </component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"D:\\Studia\\MoCaDR_proj1\" />\r\n    </key>\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"D:\\Studia\\MoCaDR_proj1\\Report\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\" selected=\"LaTeX.test\">\r\n    <configuration name=\"test\" type=\"LATEX_RUN_CONFIGURATION\" factoryName=\"LaTeX configuration factory\">\r\n      <texify>\r\n        <compiler>PDFLATEX</compiler>\r\n        <compiler-path />\r\n        <sumatra-path />\r\n        <pdf-viewer>SUMATRA</pdf-viewer>\r\n        <viewer-command />\r\n        <compiler-arguments />\r\n        <envs />\r\n        <main-file>$PROJECT_DIR$/Report/test.tex</main-file>\r\n        <output-path>$PROJECT_DIR$/Report/out</output-path>\r\n        <auxil-path>$PROJECT_DIR$/Report/auxil</auxil-path>\r\n        <compile-twice>false</compile-twice>\r\n        <output-format>PDF</output-format>\r\n        <latex-distribution>MIKTEX</latex-distribution>\r\n        <has-been-run>true</has-been-run>\r\n        <bib-run-config>[]</bib-run-config>\r\n        <makeindex-run-config>[]</makeindex-run-config>\r\n      </texify>\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"manipulating_datasets\" type=\"PythonConfigurationType\" factoryName=\"Python\" nameIsGenerated=\"true\">\r\n      <module name=\"MoCaDR_proj1\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"D:\\Studia\\MoCaDR_proj1\\manipulating_datasets.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"performing_algorithms\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"MoCaDR_proj1\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/src\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/src/performing_algorithms.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"splitting_data\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"MoCaDR_proj1\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/splitting_data.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <list>\r\n      <item itemvalue=\"LaTeX.test\" />\r\n      <item itemvalue=\"Python.manipulating_datasets\" />\r\n      <item itemvalue=\"Python.splitting_data\" />\r\n      <item itemvalue=\"Python.performing_algorithms\" />\r\n    </list>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Python.performing_algorithms\" />\r\n        <item itemvalue=\"Python.splitting_data\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"SvnConfiguration\">\r\n    <configuration>C:\\Users\\dmika\\AppData\\Roaming\\Subversion</configuration>\r\n  </component>\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"62d33fe8-2ec7-4d31-9bba-7fa36bc76fcb\" name=\"Changes\" comment=\"\" />\r\n      <created>1646774751311</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1646774751311</updated>\r\n      <workItem from=\"1646774754054\" duration=\"26000\" />\r\n      <workItem from=\"1646774814002\" duration=\"835000\" />\r\n      <workItem from=\"1646775670059\" duration=\"47000\" />\r\n      <workItem from=\"1646775727774\" duration=\"757000\" />\r\n      <workItem from=\"1646816479175\" duration=\"461000\" />\r\n      <workItem from=\"1646896158453\" duration=\"762000\" />\r\n      <workItem from=\"1646896945682\" duration=\"630000\" />\r\n      <workItem from=\"1646897595717\" duration=\"2651000\" />\r\n      <workItem from=\"1646900622776\" duration=\"425000\" />\r\n      <workItem from=\"1646915517163\" duration=\"449000\" />\r\n      <workItem from=\"1646915983800\" duration=\"240000\" />\r\n      <workItem from=\"1646916258164\" duration=\"389000\" />\r\n      <workItem from=\"1646916663441\" duration=\"393000\" />\r\n      <workItem from=\"1646933050771\" duration=\"1105000\" />\r\n      <workItem from=\"1646936230049\" duration=\"1064000\" />\r\n      <workItem from=\"1647027781891\" duration=\"1279000\" />\r\n      <workItem from=\"1647071928401\" duration=\"2390000\" />\r\n      <workItem from=\"1647181792640\" duration=\"2955000\" />\r\n      <workItem from=\"1647276453225\" duration=\"264000\" />\r\n      <workItem from=\"1647276734574\" duration=\"7710000\" />\r\n      <workItem from=\"1647699257802\" duration=\"1713000\" />\r\n      <workItem from=\"1647774897107\" duration=\"5656000\" />\r\n      <workItem from=\"1648326375030\" duration=\"985000\" />\r\n      <workItem from=\"1648327394372\" duration=\"485000\" />\r\n      <workItem from=\"1648481964443\" duration=\"4660000\" />\r\n      <workItem from=\"1648576643019\" duration=\"4941000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"a\">\r\n      <created>1646775274557</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646775274557</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"init commit\">\r\n      <created>1646775361377</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646775361377</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"init commit\">\r\n      <created>1646775521666</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646775521666</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"init commit\">\r\n      <created>1646775784756</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646775784756</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"init commit\">\r\n      <created>1646775870305</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646775870305</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"Adding dataset\">\r\n      <created>1646816860800</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646816860800</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"Setting up LaTeX\">\r\n      <created>1646898995949</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646898995949</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00008\" summary=\"Setting up LaTeX\">\r\n      <created>1646900639924</created>\r\n      <option name=\"number\" value=\"00008\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646900639924</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00009\" summary=\"Cleaning data\">\r\n      <created>1646934068924</created>\r\n      <option name=\"number\" value=\"00009\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646934068924</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00010\" summary=\"Cleaning data\">\r\n      <created>1647028888721</created>\r\n      <option name=\"number\" value=\"00010\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647028888721</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00011\" summary=\"Cleaning data\">\r\n      <created>1647029054319</created>\r\n      <option name=\"number\" value=\"00011\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647029054319</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00012\" summary=\"Tamarka testing\">\r\n      <created>1647163191686</created>\r\n      <option name=\"number\" value=\"00012\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00012\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647163191686</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00013\" summary=\"Experimenting with 'NaN' values\">\r\n      <created>1647168883206</created>\r\n      <option name=\"number\" value=\"00013\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00013\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647168883206</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00014\" summary=\"Experimenting with 'NaN' values\">\r\n      <created>1647175373237</created>\r\n      <option name=\"number\" value=\"00014\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00014\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647175373237</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00015\" summary=\"Removing duplicated packages\">\r\n      <created>1647175629524</created>\r\n      <option name=\"number\" value=\"00015\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00015\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647175629524</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00016\" summary=\"Testing methods\">\r\n      <created>1647184013664</created>\r\n      <option name=\"number\" value=\"00016\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00016\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647184013664</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00017\" summary=\"Testing methods\">\r\n      <created>1647184756535</created>\r\n      <option name=\"number\" value=\"00017\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00017\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647184756535</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00018\" summary=\"SVD opis Tamarka\">\r\n      <created>1647698852885</created>\r\n      <option name=\"number\" value=\"00018\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00018\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647698852885</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00019\" summary=\"SVD opis Tamarka\">\r\n      <created>1647699044053</created>\r\n      <option name=\"number\" value=\"00019\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00019\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647699044053</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00020\" summary=\"SVD opis Tamarka\">\r\n      <created>1647699173625</created>\r\n      <option name=\"number\" value=\"00020\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00020\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647699173625</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00021\" summary=\"Testing SVD2\">\r\n      <created>1648327858794</created>\r\n      <option name=\"number\" value=\"00021\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00021\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1648327858794</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"22\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <option name=\"ADD_EXTERNAL_FILES_SILENTLY\" value=\"true\" />\r\n    <MESSAGE value=\"a\" />\r\n    <MESSAGE value=\"init commit\" />\r\n    <MESSAGE value=\"Adding dataset\" />\r\n    <MESSAGE value=\"Setting up LaTeX\" />\r\n    <MESSAGE value=\"Cleaning data\" />\r\n    <MESSAGE value=\"Tamarka testing\" />\r\n    <MESSAGE value=\"Experimenting with 'NaN' values\" />\r\n    <MESSAGE value=\"Removing duplicated packages\" />\r\n    <MESSAGE value=\"Testing methods\" />\r\n    <MESSAGE value=\"SVD opis Tamarka\" />\r\n    <MESSAGE value=\"Testing SVD2\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Testing SVD2\" />\r\n  </component>\r\n  <component name=\"com.intellij.coverage.CoverageDataManagerImpl\">\r\n    <SUITE FILE_PATH=\"coverage/main_py$performing_algorithms.coverage\" NAME=\"performing_algorithms Coverage Results\" MODIFIED=\"1647784050444\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/src\" />\r\n    <SUITE FILE_PATH=\"coverage/MoCaDR_proj1$splitting_data.coverage\" NAME=\"splitting_data Coverage Results\" MODIFIED=\"1647174411611\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\r\n  </component>\r\n</project>
--Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
--<+>UTF-8
--===================================================================
--diff --git a/.idea/workspace.xml b/.idea/workspace.xml
----- a/.idea/workspace.xml	(revision 442f5fa4930c44b3ed30a2cff1614564dae4b002)
--+++ b/.idea/workspace.xml	(date 1648885439014)
--@@ -4,19 +4,7 @@
--     <option name="autoReloadType" value="SELECTIVE" />
--   </component>
--   <component name="ChangeListManager">
---    <list default="true" id="62d33fe8-2ec7-4d31-9bba-7fa36bc76fcb" name="Changes" comment="Implementing SGD">
---      <change beforePath="$PROJECT_DIR$/.idea/MoCaDR_proj1.iml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/MoCaDR_proj1.iml" afterDir="false" />
---      <change beforePath="$PROJECT_DIR$/.idea/misc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/misc.xml" afterDir="false" />
---      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_29_03_2022_08_51__Changes_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_29_03_2022_08_51__Changes_.xml" afterDir="false" />
---      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
---      <change beforePath="$PROJECT_DIR$/Report/auxil/test.aux" beforeDir="false" afterPath="$PROJECT_DIR$/Report/auxil/test.aux" afterDir="false" />
---      <change beforePath="$PROJECT_DIR$/Report/auxil/test.log" beforeDir="false" afterPath="$PROJECT_DIR$/Report/auxil/test.log" afterDir="false" />
---      <change beforePath="$PROJECT_DIR$/Report/out/test.pdf" beforeDir="false" afterPath="$PROJECT_DIR$/Report/out/test.pdf" afterDir="false" />
---      <change beforePath="$PROJECT_DIR$/Report/out/test.synctex.gz" beforeDir="false" afterPath="$PROJECT_DIR$/Report/out/test.synctex.gz" afterDir="false" />
---      <change beforePath="$PROJECT_DIR$/Report/test.tex" beforeDir="false" afterPath="$PROJECT_DIR$/Report/test.tex" afterDir="false" />
---      <change beforePath="$PROJECT_DIR$/src/choosing_parameters.ipynb" beforeDir="false" afterPath="$PROJECT_DIR$/src/choosing_parameters.ipynb" afterDir="false" />
---      <change beforePath="$PROJECT_DIR$/src/syf1.ipynb" beforeDir="false" afterPath="$PROJECT_DIR$/src/syf1.ipynb" afterDir="false" />
---    </list>
--+    <list default="true" id="62d33fe8-2ec7-4d31-9bba-7fa36bc76fcb" name="Changes" comment="report" />
--     <option name="SHOW_DIALOG" value="false" />
--     <option name="HIGHLIGHT_CONFLICTS" value="true" />
--     <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
--@@ -212,7 +200,7 @@
--       <workItem from="1648326375030" duration="985000" />
--       <workItem from="1648327394372" duration="485000" />
--       <workItem from="1648481964443" duration="4660000" />
---      <workItem from="1648576643019" duration="4941000" />
--+      <workItem from="1648576643019" duration="5862000" />
--     </task>
--     <task id="LOCAL-00001" summary="a">
--       <created>1646775274557</created>
--@@ -361,7 +349,14 @@
--       <option name="project" value="LOCAL" />
--       <updated>1648327858794</updated>
--     </task>
---    <option name="localTasksCounter" value="22" />
--+    <task id="LOCAL-00022" summary="report">
--+      <created>1648583418325</created>
--+      <option name="number" value="00022" />
--+      <option name="presentableId" value="LOCAL-00022" />
--+      <option name="project" value="LOCAL" />
--+      <updated>1648583418325</updated>
--+    </task>
--+    <option name="localTasksCounter" value="23" />
--     <servers />
--   </component>
--   <component name="TypeScriptGeneratedFilesManager">
--@@ -391,7 +386,8 @@
--     <MESSAGE value="Testing methods" />
--     <MESSAGE value="SVD opis Tamarka" />
--     <MESSAGE value="Testing SVD2" />
---    <option name="LAST_COMMIT_MESSAGE" value="Testing SVD2" />
--+    <MESSAGE value="report" />
--+    <option name="LAST_COMMIT_MESSAGE" value="report" />
--   </component>
--   <component name="com.intellij.coverage.CoverageDataManagerImpl">
--     <SUITE FILE_PATH="coverage/main_py$performing_algorithms.coverage" NAME="performing_algorithms Coverage Results" MODIFIED="1647784050444" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/src" />
-Index: .idea/misc.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ProjectRootManager\" version=\"2\" project-jdk-name=\"Python 3.10 (MoCaDR_proj1)\" project-jdk-type=\"Python SDK\" />\r\n  <component name=\"RMarkdownSettings\">\r\n    <option name=\"renderProfiles\">\r\n      <map>\r\n        <entry key=\"file://$PROJECT_DIR$/Report/tescik.rmd\">\r\n          <value>\r\n            <RMarkdownRenderProfile>\r\n              <option name=\"outputDirectoryUrl\" value=\"file://$PROJECT_DIR$/Report\" />\r\n            </RMarkdownRenderProfile>\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n</project>
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/.idea/misc.xml b/.idea/misc.xml
---- a/.idea/misc.xml	(revision 7551f0ee5fbc5d43453af9d58769adbcb2bdfdb2)
-+++ b/.idea/misc.xml	(date 1649533114195)
-@@ -1,6 +1,6 @@
- <?xml version="1.0" encoding="UTF-8"?>
- <project version="4">
--  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.10 (MoCaDR_proj1)" project-jdk-type="Python SDK" />
-+  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.10" project-jdk-type="Python SDK" />
-   <component name="RMarkdownSettings">
-     <option name="renderProfiles">
-       <map>
-Index: .idea/MoCaDR_proj1.iml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<module type=\"PYTHON_MODULE\" version=\"4\">\r\n  <component name=\"NewModuleRootManager\">\r\n    <content url=\"file://$MODULE_DIR$\">\r\n      <sourceFolder url=\"file://$MODULE_DIR$/src\" isTestSource=\"false\" />\r\n    </content>\r\n    <orderEntry type=\"jdk\" jdkName=\"Python 3.10 (MoCaDR_proj1)\" jdkType=\"Python SDK\" />\r\n    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\r\n  </component>\r\n</module>
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/.idea/MoCaDR_proj1.iml b/.idea/MoCaDR_proj1.iml
---- a/.idea/MoCaDR_proj1.iml	(revision 7551f0ee5fbc5d43453af9d58769adbcb2bdfdb2)
-+++ b/.idea/MoCaDR_proj1.iml	(date 1649533114164)
-@@ -4,7 +4,7 @@
-     <content url="file://$MODULE_DIR$">
-       <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
-     </content>
--    <orderEntry type="jdk" jdkName="Python 3.10 (MoCaDR_proj1)" jdkType="Python SDK" />
-+    <orderEntry type="jdk" jdkName="Python 3.10" jdkType="Python SDK" />
-     <orderEntry type="sourceFolder" forTests="false" />
-   </component>
- </module>
-\ No newline at end of file
-Index: src/presenting_results.ipynb
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>{\r\n \"cells\": [\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 1,\r\n   \"outputs\": [\r\n    {\r\n     \"data\": {\r\n      \"text/plain\": \"<Figure size 72x72 with 0 Axes>\"\r\n     },\r\n     \"metadata\": {},\r\n     \"output_type\": \"display_data\"\r\n    }\r\n   ],\r\n   \"source\": [\r\n    \"import pandas as pd\\n\",\r\n    \"import numpy as np\\n\",\r\n    \"from plotnine import *\\n\",\r\n    \"import patchworklib as pw\\n\",\r\n    \"import os\\n\",\r\n    \"from mpl_toolkits.mplot3d import Axes3D\\n\",\r\n    \"import matplotlib.pyplot as plt\\n\",\r\n    \"from matplotlib import cm\\n\",\r\n    \"from matplotlib.ticker import LinearLocator, FormatStrFormatter\\n\",\r\n    \"os.chdir('D:\\\\Studia\\\\MoCaDR_proj1')\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%%\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"# Results for many r’s\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%% md\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 2,\r\n   \"outputs\": [],\r\n   \"source\": [\r\n    \"# SVD1\\n\",\r\n    \"res_svd1 = pd.read_csv('Results/results_svd1.csv')\\n\",\r\n    \"res_svd1_long = pd.melt(res_svd1, id_vars=['r'], value_vars=res_svd1.columns[1:])\\n\",\r\n    \"best_r = res_svd1_long.iloc[res_svd1_long['value'].idxmin()]['r']\\n\",\r\n    \"best_rmse = res_svd1_long['value'].min()\\n\",\r\n    \"# SVD2\\n\",\r\n    \"res_svd2 = pd.read_csv('Results/results_svd2.csv')\\n\",\r\n    \"res_svd2_long = pd.melt(res_svd2, id_vars=['r'], value_vars=res_svd2.columns[1:])\\n\",\r\n    \"best_r2 = res_svd2_long.iloc[res_svd2_long['value'].idxmin()]['r']\\n\",\r\n    \"best_rmse2 = res_svd2_long['value'].min()\\n\",\r\n    \"# NMF\\n\",\r\n    \"res_nmf = pd.read_csv('Results/results_nmf.csv')\\n\",\r\n    \"res_nmf_long = pd.melt(res_nmf, id_vars=['r'], value_vars=res_nmf.columns[1:])\\n\",\r\n    \"best_r3 = res_nmf_long.iloc[res_nmf_long['value'].idxmin()]['r']\\n\",\r\n    \"best_rmse3 = res_nmf_long['value'].min()\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%%\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"## SVD 1\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%% md\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 47,\r\n   \"outputs\": [],\r\n   \"source\": [\r\n    \"plot_svd1_1 = ggplot(res_svd1_long) + \\\\\\n\",\r\n    \"    theme_bw() + \\\\\\n\",\r\n    \"    geom_line(aes(x='r', y='value', color='variable')) + \\\\\\n\",\r\n    \"    labs(y=\\\"RMSE\\\", color=\\\"Imputation method\\\", title=\\\"SVD1\\\") + \\\\\\n\",\r\n    \"    scale_color_manual(values=['#9A32CD', '#FF1493', '#66CD00', '#FF4040', '#00FFFF'],\\n\",\r\n    \"                       labels=['0', 'Column means', 'Global mean', 'Weighted means', 'Row means'])\\n\",\r\n    \"plot_svd1_2 = ggplot(res_svd1_long[res_svd1_long['variable'] != 'rmse_0']) + \\\\\\n\",\r\n    \"    theme_bw() + \\\\\\n\",\r\n    \"    geom_line(aes(x='r', y='value', color='variable')) + \\\\\\n\",\r\n    \"    labs(y=\\\"RMSE\\\", color=\\\"Imputation method\\\", title=\\\"SVD1\\\") + \\\\\\n\",\r\n    \"    scale_color_manual(values=['#FF1493', '#66CD00', '#FF4040', '#00FFFF'], labels=['Column means', 'Global mean', 'Weighted means', 'Row means']) + \\\\\\n\",\r\n    \"    theme(legend_position='none')\\n\",\r\n    \"plot_svd1_1.save('Report/fig/svd1_1.png')\\n\",\r\n    \"plot_svd1_2.save('Report/fig/svd1_2.png')\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%%\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"# SVD2\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%% md\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 48,\r\n   \"outputs\": [],\r\n   \"source\": [\r\n    \"plot_svd2_1 = ggplot(res_svd2_long) + \\\\\\n\",\r\n    \"    theme_bw() + \\\\\\n\",\r\n    \"    geom_line(aes(x='r', y='value', color='variable')) + \\\\\\n\",\r\n    \"    labs(y=\\\"RMSE\\\", color=\\\"Imputation method\\\", title=\\\"SVD2\\\") + \\\\\\n\",\r\n    \"    scale_color_manual(values=['#9A32CD', '#FF1493', '#66CD00', '#FF4040', '#00FFFF'],\\n\",\r\n    \"                       labels=['0', 'Column means', 'Global mean', 'Weighted means', 'Row means'])\\n\",\r\n    \"plot_svd2_2 = ggplot(res_svd2_long[res_svd2_long['variable'] != 'rmse_0']) + \\\\\\n\",\r\n    \"    theme_bw() + \\\\\\n\",\r\n    \"    geom_line(aes(x='r', y='value', color='variable')) + \\\\\\n\",\r\n    \"    labs(y=\\\"RMSE\\\", color=\\\"Imputation method\\\", title=\\\"SVD2\\\") + \\\\\\n\",\r\n    \"    scale_color_manual(values=['#FF1493', '#66CD00', '#FF4040', '#00FFFF'],\\n\",\r\n    \"                       labels=['Column means', 'Global mean', 'Weighted means', 'Row means']) + \\\\\\n\",\r\n    \"    theme(legend_position='none')\\n\",\r\n    \"plot_svd2_1.save('Report/fig/svd2_1.png')\\n\",\r\n    \"plot_svd2_2.save('Report/fig/svd2_2.png')\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%%\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 5,\r\n   \"outputs\": [\r\n    {\r\n     \"data\": {\r\n      \"text/plain\": \"       r        variable     value\\n0      1          rmse_0  3.095144\\n1      2          rmse_0  3.006560\\n2      3          rmse_0  2.943416\\n3      4          rmse_0  2.903454\\n4      5          rmse_0  2.877835\\n..   ...             ...       ...\\n495   96  rmse_col_means  0.957780\\n496   97  rmse_col_means  0.959530\\n497   98  rmse_col_means  0.958531\\n498   99  rmse_col_means  0.958267\\n499  100  rmse_col_means  0.959624\\n\\n[500 rows x 3 columns]\",\r\n      \"text/html\": \"<div>\\n<style scoped>\\n    .dataframe tbody tr th:only-of-type {\\n        vertical-align: middle;\\n    }\\n\\n    .dataframe tbody tr th {\\n        vertical-align: top;\\n    }\\n\\n    .dataframe thead th {\\n        text-align: right;\\n    }\\n</style>\\n<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n  <thead>\\n    <tr style=\\\"text-align: right;\\\">\\n      <th></th>\\n      <th>r</th>\\n      <th>variable</th>\\n      <th>value</th>\\n    </tr>\\n  </thead>\\n  <tbody>\\n    <tr>\\n      <th>0</th>\\n      <td>1</td>\\n      <td>rmse_0</td>\\n      <td>3.095144</td>\\n    </tr>\\n    <tr>\\n      <th>1</th>\\n      <td>2</td>\\n      <td>rmse_0</td>\\n      <td>3.006560</td>\\n    </tr>\\n    <tr>\\n      <th>2</th>\\n      <td>3</td>\\n      <td>rmse_0</td>\\n      <td>2.943416</td>\\n    </tr>\\n    <tr>\\n      <th>3</th>\\n      <td>4</td>\\n      <td>rmse_0</td>\\n      <td>2.903454</td>\\n    </tr>\\n    <tr>\\n      <th>4</th>\\n      <td>5</td>\\n      <td>rmse_0</td>\\n      <td>2.877835</td>\\n    </tr>\\n    <tr>\\n      <th>...</th>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n    </tr>\\n    <tr>\\n      <th>495</th>\\n      <td>96</td>\\n      <td>rmse_col_means</td>\\n      <td>0.957780</td>\\n    </tr>\\n    <tr>\\n      <th>496</th>\\n      <td>97</td>\\n      <td>rmse_col_means</td>\\n      <td>0.959530</td>\\n    </tr>\\n    <tr>\\n      <th>497</th>\\n      <td>98</td>\\n      <td>rmse_col_means</td>\\n      <td>0.958531</td>\\n    </tr>\\n    <tr>\\n      <th>498</th>\\n      <td>99</td>\\n      <td>rmse_col_means</td>\\n      <td>0.958267</td>\\n    </tr>\\n    <tr>\\n      <th>499</th>\\n      <td>100</td>\\n      <td>rmse_col_means</td>\\n      <td>0.959624</td>\\n    </tr>\\n  </tbody>\\n</table>\\n<p>500 rows × 3 columns</p>\\n</div>\"\r\n     },\r\n     \"execution_count\": 5,\r\n     \"metadata\": {},\r\n     \"output_type\": \"execute_result\"\r\n    }\r\n   ],\r\n   \"source\": [\r\n    \"n = 10\\n\",\r\n    \"res_svd2_long\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%%\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"# NMF\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%% md\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 49,\r\n   \"outputs\": [],\r\n   \"source\": [\r\n    \"plot_nmf_1 = ggplot(res_nmf_long) + \\\\\\n\",\r\n    \"    theme_bw() + \\\\\\n\",\r\n    \"    geom_line(aes(x='r', y='value', color='variable')) + \\\\\\n\",\r\n    \"    labs(y=\\\"RMSE\\\", color=\\\"Imputation method\\\", title=\\\"NMF\\\") + \\\\\\n\",\r\n    \"    scale_color_manual(values=['#9A32CD', '#FF1493', '#66CD00', '#FF4040', '#00FFFF'],\\n\",\r\n    \"                       labels=['0', 'Column means', 'Global mean', 'Weighted means', 'Row means'])\\n\",\r\n    \"plot_nmf_2 = ggplot(res_nmf_long[res_nmf_long['variable'] != 'rmse_0']) + \\\\\\n\",\r\n    \"    theme_bw() + \\\\\\n\",\r\n    \"    geom_line(aes(x='r', y='value', color='variable')) + \\\\\\n\",\r\n    \"    labs(y=\\\"RMSE\\\", color=\\\"Imputation method\\\", title=\\\"NMF\\\") + \\\\\\n\",\r\n    \"    scale_color_manual(values=['#FF1493', '#66CD00', '#FF4040', '#00FFFF'],\\n\",\r\n    \"                       labels=['Column means', 'Global mean', 'Weighted means', 'Row means']) + \\\\\\n\",\r\n    \"    theme(legend_position='none')\\n\",\r\n    \"plot_nmf_1.save('Report/fig/nmf_1.png')\\n\",\r\n    \"plot_nmf_2.save('Report/fig/nmf_2.png')\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%%\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"# Stop condition for SVD2\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%% md\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 7,\r\n   \"outputs\": [],\r\n   \"source\": [\r\n    \"res_svd2_stop = pd.read_csv('Results/results_stop_svd2.csv')\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%%\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 8,\r\n   \"outputs\": [\r\n    {\r\n     \"data\": {\r\n      \"text/plain\": \"       stop   r      RMSE\\n378  0.0086   9  0.879578\\n356  0.0085   9  0.880032\\n400  0.0087   9  0.880051\\n421  0.0088   8  0.880321\\n232  0.0079  17  0.880356\\n399  0.0087   8  0.880363\\n210  0.0078  17  0.880485\\n299  0.0082  18  0.880578\\n275  0.0081  16  0.880597\\n384  0.0086  15  0.880600\",\r\n      \"text/html\": \"<div>\\n<style scoped>\\n    .dataframe tbody tr th:only-of-type {\\n        vertical-align: middle;\\n    }\\n\\n    .dataframe tbody tr th {\\n        vertical-align: top;\\n    }\\n\\n    .dataframe thead th {\\n        text-align: right;\\n    }\\n</style>\\n<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n  <thead>\\n    <tr style=\\\"text-align: right;\\\">\\n      <th></th>\\n      <th>stop</th>\\n      <th>r</th>\\n      <th>RMSE</th>\\n    </tr>\\n  </thead>\\n  <tbody>\\n    <tr>\\n      <th>378</th>\\n      <td>0.0086</td>\\n      <td>9</td>\\n      <td>0.879578</td>\\n    </tr>\\n    <tr>\\n      <th>356</th>\\n      <td>0.0085</td>\\n      <td>9</td>\\n      <td>0.880032</td>\\n    </tr>\\n    <tr>\\n      <th>400</th>\\n      <td>0.0087</td>\\n      <td>9</td>\\n      <td>0.880051</td>\\n    </tr>\\n    <tr>\\n      <th>421</th>\\n      <td>0.0088</td>\\n      <td>8</td>\\n      <td>0.880321</td>\\n    </tr>\\n    <tr>\\n      <th>232</th>\\n      <td>0.0079</td>\\n      <td>17</td>\\n      <td>0.880356</td>\\n    </tr>\\n    <tr>\\n      <th>399</th>\\n      <td>0.0087</td>\\n      <td>8</td>\\n      <td>0.880363</td>\\n    </tr>\\n    <tr>\\n      <th>210</th>\\n      <td>0.0078</td>\\n      <td>17</td>\\n      <td>0.880485</td>\\n    </tr>\\n    <tr>\\n      <th>299</th>\\n      <td>0.0082</td>\\n      <td>18</td>\\n      <td>0.880578</td>\\n    </tr>\\n    <tr>\\n      <th>275</th>\\n      <td>0.0081</td>\\n      <td>16</td>\\n      <td>0.880597</td>\\n    </tr>\\n    <tr>\\n      <th>384</th>\\n      <td>0.0086</td>\\n      <td>15</td>\\n      <td>0.880600</td>\\n    </tr>\\n  </tbody>\\n</table>\\n</div>\"\r\n     },\r\n     \"execution_count\": 8,\r\n     \"metadata\": {},\r\n     \"output_type\": \"execute_result\"\r\n    }\r\n   ],\r\n   \"source\": [\r\n    \"n = 10\\n\",\r\n    \"res_svd2_stop.loc[res_svd2_stop.apply(lambda x: pd.Series(x.nsmallest(n).index))['RMSE']]\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%%\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 9,\r\n   \"outputs\": [\r\n    {\r\n     \"data\": {\r\n      \"text/plain\": \"<matplotlib.colorbar.Colorbar at 0x230fac76c50>\"\r\n     },\r\n     \"execution_count\": 9,\r\n     \"metadata\": {},\r\n     \"output_type\": \"execute_result\"\r\n    },\r\n    {\r\n     \"data\": {\r\n      \"text/plain\": \"<Figure size 1080x720 with 2 Axes>\",\r\n      \"image/png\": \"\\n\"\r\n     },\r\n     \"metadata\": {\r\n      \"needs_background\": \"light\"\r\n     },\r\n     \"output_type\": \"display_data\"\r\n    }\r\n   ],\r\n   \"source\": [\r\n    \"X, Y, Z = res_svd2_stop.T.values\\n\",\r\n    \"fig = plt.figure(figsize=(15,10))\\n\",\r\n    \"ax = fig.gca(projection='3d')\\n\",\r\n    \"surf = ax.plot_trisurf(X, Y, Z, cmap=cm.coolwarm, edgecolor ='black', linewidth=0.005, antialiased=False)\\n\",\r\n    \"# Add a color bar which maps values to colors.\\n\",\r\n    \"fig.colorbar(surf, shrink=0.5, aspect=20)\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%%\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"# Two-dimensional minimization: r, col_weight\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%% md\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 10,\r\n   \"outputs\": [],\r\n   \"source\": [\r\n    \"res_svd1_3d = pd.read_csv('Results/results_r_w_svd1.csv')\\n\",\r\n    \"res_svd2_3d = pd.read_csv('Results/results_r_w_svd2.csv')\\n\",\r\n    \"res_nmf_3d = pd.read_csv('Results/results_r_w_nmf.csv')\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%%\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"## SVD1\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%% md\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 18,\r\n   \"outputs\": [\r\n    {\r\n     \"data\": {\r\n      \"text/plain\": \"     col_weight   r      RMSE\\n423        0.39  10  0.873987\\n401        0.38  10  0.874244\\n489        0.42  10  0.874274\\n357        0.36  10  0.874449\\n424        0.39  11  0.874469\\n379        0.37  10  0.874475\\n467        0.41  10  0.874490\\n445        0.40  10  0.874498\\n466        0.41   9  0.874507\\n470        0.41  13  0.874532\",\r\n      \"text/html\": \"<div>\\n<style scoped>\\n    .dataframe tbody tr th:only-of-type {\\n        vertical-align: middle;\\n    }\\n\\n    .dataframe tbody tr th {\\n        vertical-align: top;\\n    }\\n\\n    .dataframe thead th {\\n        text-align: right;\\n    }\\n</style>\\n<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n  <thead>\\n    <tr style=\\\"text-align: right;\\\">\\n      <th></th>\\n      <th>col_weight</th>\\n      <th>r</th>\\n      <th>RMSE</th>\\n    </tr>\\n  </thead>\\n  <tbody>\\n    <tr>\\n      <th>423</th>\\n      <td>0.39</td>\\n      <td>10</td>\\n      <td>0.873987</td>\\n    </tr>\\n    <tr>\\n      <th>401</th>\\n      <td>0.38</td>\\n      <td>10</td>\\n      <td>0.874244</td>\\n    </tr>\\n    <tr>\\n      <th>489</th>\\n      <td>0.42</td>\\n      <td>10</td>\\n      <td>0.874274</td>\\n    </tr>\\n    <tr>\\n      <th>357</th>\\n      <td>0.36</td>\\n      <td>10</td>\\n      <td>0.874449</td>\\n    </tr>\\n    <tr>\\n      <th>424</th>\\n      <td>0.39</td>\\n      <td>11</td>\\n      <td>0.874469</td>\\n    </tr>\\n    <tr>\\n      <th>379</th>\\n      <td>0.37</td>\\n      <td>10</td>\\n      <td>0.874475</td>\\n    </tr>\\n    <tr>\\n      <th>467</th>\\n      <td>0.41</td>\\n      <td>10</td>\\n      <td>0.874490</td>\\n    </tr>\\n    <tr>\\n      <th>445</th>\\n      <td>0.40</td>\\n      <td>10</td>\\n      <td>0.874498</td>\\n    </tr>\\n    <tr>\\n      <th>466</th>\\n      <td>0.41</td>\\n      <td>9</td>\\n      <td>0.874507</td>\\n    </tr>\\n    <tr>\\n      <th>470</th>\\n      <td>0.41</td>\\n      <td>13</td>\\n      <td>0.874532</td>\\n    </tr>\\n  </tbody>\\n</table>\\n</div>\"\r\n     },\r\n     \"execution_count\": 18,\r\n     \"metadata\": {},\r\n     \"output_type\": \"execute_result\"\r\n    }\r\n   ],\r\n   \"source\": [\r\n    \"n = 10\\n\",\r\n    \"res_svd1_3d.loc[res_svd1_3d.apply(lambda x: pd.Series(x.nsmallest(n).index))['RMSE']]\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%%\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 12,\r\n   \"outputs\": [\r\n    {\r\n     \"data\": {\r\n      \"text/plain\": \"<Figure size 1080x720 with 2 Axes>\",\r\n      \"image/png\": \"\\n\"\r\n     },\r\n     \"metadata\": {\r\n      \"needs_background\": \"light\"\r\n     },\r\n     \"output_type\": \"display_data\"\r\n    }\r\n   ],\r\n   \"source\": [\r\n    \"X, Y, Z = res_svd1_3d.T.values\\n\",\r\n    \"fig = plt.figure(figsize=(15,10))\\n\",\r\n    \"ax = fig.gca(projection='3d')\\n\",\r\n    \"surf = ax.plot_trisurf(X, Y, Z, cmap=cm.coolwarm, edgecolor ='black', linewidth=0, antialiased=False)\\n\",\r\n    \"# Add a color bar which maps values to colors.\\n\",\r\n    \"fig.colorbar(surf, shrink=0.5, aspect=20)\\n\",\r\n    \"ax.set_xlabel('Column weight', fontsize=17, color='red', labelpad=10)\\n\",\r\n    \"ax.set_ylabel('$r$', fontsize=17, color='red', labelpad=10)\\n\",\r\n    \"ax.set_zlabel('RMSE', rotation=-90, fontsize=17, color='red', labelpad=10)\\n\",\r\n    \"plt.savefig('Report/fig/svd1_r_w.png')\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%%\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"## SVD2\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%% md\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 13,\r\n   \"outputs\": [\r\n    {\r\n     \"data\": {\r\n      \"text/plain\": \"     col_weight  r      RMSE\\n73         0.25  8  0.867393\\n87         0.26  8  0.867397\\n59         0.24  8  0.867402\\n101        0.27  8  0.867410\\n115        0.28  8  0.867494\\n45         0.23  8  0.867501\\n31         0.22  8  0.867509\\n129        0.29  8  0.867578\\n17         0.21  8  0.867675\\n143        0.30  8  0.867697\",\r\n      \"text/html\": \"<div>\\n<style scoped>\\n    .dataframe tbody tr th:only-of-type {\\n        vertical-align: middle;\\n    }\\n\\n    .dataframe tbody tr th {\\n        vertical-align: top;\\n    }\\n\\n    .dataframe thead th {\\n        text-align: right;\\n    }\\n</style>\\n<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n  <thead>\\n    <tr style=\\\"text-align: right;\\\">\\n      <th></th>\\n      <th>col_weight</th>\\n      <th>r</th>\\n      <th>RMSE</th>\\n    </tr>\\n  </thead>\\n  <tbody>\\n    <tr>\\n      <th>73</th>\\n      <td>0.25</td>\\n      <td>8</td>\\n      <td>0.867393</td>\\n    </tr>\\n    <tr>\\n      <th>87</th>\\n      <td>0.26</td>\\n      <td>8</td>\\n      <td>0.867397</td>\\n    </tr>\\n    <tr>\\n      <th>59</th>\\n      <td>0.24</td>\\n      <td>8</td>\\n      <td>0.867402</td>\\n    </tr>\\n    <tr>\\n      <th>101</th>\\n      <td>0.27</td>\\n      <td>8</td>\\n      <td>0.867410</td>\\n    </tr>\\n    <tr>\\n      <th>115</th>\\n      <td>0.28</td>\\n      <td>8</td>\\n      <td>0.867494</td>\\n    </tr>\\n    <tr>\\n      <th>45</th>\\n      <td>0.23</td>\\n      <td>8</td>\\n      <td>0.867501</td>\\n    </tr>\\n    <tr>\\n      <th>31</th>\\n      <td>0.22</td>\\n      <td>8</td>\\n      <td>0.867509</td>\\n    </tr>\\n    <tr>\\n      <th>129</th>\\n      <td>0.29</td>\\n      <td>8</td>\\n      <td>0.867578</td>\\n    </tr>\\n    <tr>\\n      <th>17</th>\\n      <td>0.21</td>\\n      <td>8</td>\\n      <td>0.867675</td>\\n    </tr>\\n    <tr>\\n      <th>143</th>\\n      <td>0.30</td>\\n      <td>8</td>\\n      <td>0.867697</td>\\n    </tr>\\n  </tbody>\\n</table>\\n</div>\"\r\n     },\r\n     \"execution_count\": 13,\r\n     \"metadata\": {},\r\n     \"output_type\": \"execute_result\"\r\n    }\r\n   ],\r\n   \"source\": [\r\n    \"n = 10\\n\",\r\n    \"res_svd2_3d.loc[res_svd2_3d.apply(lambda x: pd.Series(x.nsmallest(n).index))['RMSE']]\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%%\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 14,\r\n   \"outputs\": [\r\n    {\r\n     \"data\": {\r\n      \"text/plain\": \"<Figure size 1080x720 with 2 Axes>\",\r\n      \"image/png\": \"\\n\"\r\n     },\r\n     \"metadata\": {\r\n      \"needs_background\": \"light\"\r\n     },\r\n     \"output_type\": \"display_data\"\r\n    }\r\n   ],\r\n   \"source\": [\r\n    \"X2, Y2, Z2 = res_svd2_3d.T.values\\n\",\r\n    \"fig = plt.figure(figsize=(15,10))\\n\",\r\n    \"ax = fig.gca(projection='3d')\\n\",\r\n    \"surf = ax.plot_trisurf(X2, Y2, Z2, cmap=cm.coolwarm, edgecolor ='black', linewidth=0, antialiased=False)\\n\",\r\n    \"# Add a color bar which maps values to colors.\\n\",\r\n    \"fig.colorbar(surf, shrink=0.5, aspect=20)\\n\",\r\n    \"ax.set_xlabel('Column weight', fontsize=17, color='red', labelpad=10)\\n\",\r\n    \"ax.set_ylabel('$r$', fontsize=17, color='red', labelpad=10)\\n\",\r\n    \"ax.set_zlabel('RMSE', rotation=-90, fontsize=17, color='red', labelpad=10)\\n\",\r\n    \"plt.savefig('Report/fig/svd2_r_w.png')\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%%\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"## NMF\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%% md\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 19,\r\n   \"outputs\": [\r\n    {\r\n     \"data\": {\r\n      \"text/plain\": \"     col_weight   r      RMSE\\n884        0.40  37  0.874794\\n927        0.41  37  0.874817\\n822        0.39  18  0.874841\\n841        0.39  37  0.874848\\n865        0.40  18  0.874849\\n779        0.38  18  0.874881\\n970        0.42  37  0.874892\\n908        0.41  18  0.874909\\n736        0.37  18  0.874958\\n798        0.38  37  0.874959\",\r\n      \"text/html\": \"<div>\\n<style scoped>\\n    .dataframe tbody tr th:only-of-type {\\n        vertical-align: middle;\\n    }\\n\\n    .dataframe tbody tr th {\\n        vertical-align: top;\\n    }\\n\\n    .dataframe thead th {\\n        text-align: right;\\n    }\\n</style>\\n<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n  <thead>\\n    <tr style=\\\"text-align: right;\\\">\\n      <th></th>\\n      <th>col_weight</th>\\n      <th>r</th>\\n      <th>RMSE</th>\\n    </tr>\\n  </thead>\\n  <tbody>\\n    <tr>\\n      <th>884</th>\\n      <td>0.40</td>\\n      <td>37</td>\\n      <td>0.874794</td>\\n    </tr>\\n    <tr>\\n      <th>927</th>\\n      <td>0.41</td>\\n      <td>37</td>\\n      <td>0.874817</td>\\n    </tr>\\n    <tr>\\n      <th>822</th>\\n      <td>0.39</td>\\n      <td>18</td>\\n      <td>0.874841</td>\\n    </tr>\\n    <tr>\\n      <th>841</th>\\n      <td>0.39</td>\\n      <td>37</td>\\n      <td>0.874848</td>\\n    </tr>\\n    <tr>\\n      <th>865</th>\\n      <td>0.40</td>\\n      <td>18</td>\\n      <td>0.874849</td>\\n    </tr>\\n    <tr>\\n      <th>779</th>\\n      <td>0.38</td>\\n      <td>18</td>\\n      <td>0.874881</td>\\n    </tr>\\n    <tr>\\n      <th>970</th>\\n      <td>0.42</td>\\n      <td>37</td>\\n      <td>0.874892</td>\\n    </tr>\\n    <tr>\\n      <th>908</th>\\n      <td>0.41</td>\\n      <td>18</td>\\n      <td>0.874909</td>\\n    </tr>\\n    <tr>\\n      <th>736</th>\\n      <td>0.37</td>\\n      <td>18</td>\\n      <td>0.874958</td>\\n    </tr>\\n    <tr>\\n      <th>798</th>\\n      <td>0.38</td>\\n      <td>37</td>\\n      <td>0.874959</td>\\n    </tr>\\n  </tbody>\\n</table>\\n</div>\"\r\n     },\r\n     \"execution_count\": 19,\r\n     \"metadata\": {},\r\n     \"output_type\": \"execute_result\"\r\n    }\r\n   ],\r\n   \"source\": [\r\n    \"n = 10\\n\",\r\n    \"res_nmf_3d.loc[res_nmf_3d.apply(lambda x: pd.Series(x.nsmallest(n).index))['RMSE']]\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%%\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 50,\r\n   \"outputs\": [\r\n    {\r\n     \"data\": {\r\n      \"text/plain\": \"<Figure size 1080x720 with 2 Axes>\",\r\n      \"image/png\": \"\\n\"\r\n     },\r\n     \"metadata\": {\r\n      \"needs_background\": \"light\"\r\n     },\r\n     \"output_type\": \"display_data\"\r\n    }\r\n   ],\r\n   \"source\": [\r\n    \"X3, Y3, Z3 = res_nmf_3d.T.values\\n\",\r\n    \"fig = plt.figure(figsize=(15, 10))\\n\",\r\n    \"ax = fig.gca(projection='3d')\\n\",\r\n    \"surf = ax.plot_trisurf(X3, Y3, Z3, cmap=cm.coolwarm, edgecolor='black', linewidth=0, antialiased=False)\\n\",\r\n    \"# Add a color bar which maps values to colors.\\n\",\r\n    \"fig.colorbar(surf, shrink=0.5, aspect=20)\\n\",\r\n    \"ax.set_xlabel('Column weight', fontsize=17, color='red', labelpad=10)\\n\",\r\n    \"ax.set_ylabel('$r$', fontsize=17, color='red', labelpad=10)\\n\",\r\n    \"ax.set_zlabel('RMSE', rotation=-90, fontsize=17, color='red', labelpad=10)\\n\",\r\n    \"plt.savefig('Report/fig/nmf_r_w.png')\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%%\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"# Repeating for different splits\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%% md\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 51,\r\n   \"outputs\": [],\r\n   \"source\": [\r\n    \"res_svd1_reps = pd.read_csv('Results/results_reps_svd1.csv')\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%%\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 56,\r\n   \"outputs\": [\r\n    {\r\n     \"data\": {\r\n      \"text/plain\": \"     rep  weight     r      RMSE\\n5      1    0.37  10.0  0.878849\\n19     2    0.41  13.0  0.871667\\n21     3    0.38  10.0  0.883794\\n39     4    0.41  13.0  0.865293\\n49     5    0.41  13.0  0.885750\\n59     6    0.41  13.0  0.868848\\n69     7    0.41  13.0  0.878588\\n79     8    0.41  13.0  0.887374\\n88     9    0.41   9.0  0.879621\\n99    10    0.41  13.0  0.867972\\n109   11    0.41  13.0  0.877385\\n119   12    0.41  13.0  0.872681\\n124   13    0.39  11.0  0.879833\\n139   14    0.41  13.0  0.872548\\n149   15    0.41  13.0  0.888480\\n159   16    0.41  13.0  0.867906\\n168   17    0.41   9.0  0.868453\\n179   18    0.41  13.0  0.867510\\n189   19    0.41  13.0  0.873485\\n199   20    0.41  13.0  0.879318\",\r\n      \"text/html\": \"<div>\\n<style scoped>\\n    .dataframe tbody tr th:only-of-type {\\n        vertical-align: middle;\\n    }\\n\\n    .dataframe tbody tr th {\\n        vertical-align: top;\\n    }\\n\\n    .dataframe thead th {\\n        text-align: right;\\n    }\\n</style>\\n<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n  <thead>\\n    <tr style=\\\"text-align: right;\\\">\\n      <th></th>\\n      <th>rep</th>\\n      <th>weight</th>\\n      <th>r</th>\\n      <th>RMSE</th>\\n    </tr>\\n  </thead>\\n  <tbody>\\n    <tr>\\n      <th>5</th>\\n      <td>1</td>\\n      <td>0.37</td>\\n      <td>10.0</td>\\n      <td>0.878849</td>\\n    </tr>\\n    <tr>\\n      <th>19</th>\\n      <td>2</td>\\n      <td>0.41</td>\\n      <td>13.0</td>\\n      <td>0.871667</td>\\n    </tr>\\n    <tr>\\n      <th>21</th>\\n      <td>3</td>\\n      <td>0.38</td>\\n      <td>10.0</td>\\n      <td>0.883794</td>\\n    </tr>\\n    <tr>\\n      <th>39</th>\\n      <td>4</td>\\n      <td>0.41</td>\\n      <td>13.0</td>\\n      <td>0.865293</td>\\n    </tr>\\n    <tr>\\n      <th>49</th>\\n      <td>5</td>\\n      <td>0.41</td>\\n      <td>13.0</td>\\n      <td>0.885750</td>\\n    </tr>\\n    <tr>\\n      <th>59</th>\\n      <td>6</td>\\n      <td>0.41</td>\\n      <td>13.0</td>\\n      <td>0.868848</td>\\n    </tr>\\n    <tr>\\n      <th>69</th>\\n      <td>7</td>\\n      <td>0.41</td>\\n      <td>13.0</td>\\n      <td>0.878588</td>\\n    </tr>\\n    <tr>\\n      <th>79</th>\\n      <td>8</td>\\n      <td>0.41</td>\\n      <td>13.0</td>\\n      <td>0.887374</td>\\n    </tr>\\n    <tr>\\n      <th>88</th>\\n      <td>9</td>\\n      <td>0.41</td>\\n      <td>9.0</td>\\n      <td>0.879621</td>\\n    </tr>\\n    <tr>\\n      <th>99</th>\\n      <td>10</td>\\n      <td>0.41</td>\\n      <td>13.0</td>\\n      <td>0.867972</td>\\n    </tr>\\n    <tr>\\n      <th>109</th>\\n      <td>11</td>\\n      <td>0.41</td>\\n      <td>13.0</td>\\n      <td>0.877385</td>\\n    </tr>\\n    <tr>\\n      <th>119</th>\\n      <td>12</td>\\n      <td>0.41</td>\\n      <td>13.0</td>\\n      <td>0.872681</td>\\n    </tr>\\n    <tr>\\n      <th>124</th>\\n      <td>13</td>\\n      <td>0.39</td>\\n      <td>11.0</td>\\n      <td>0.879833</td>\\n    </tr>\\n    <tr>\\n      <th>139</th>\\n      <td>14</td>\\n      <td>0.41</td>\\n      <td>13.0</td>\\n      <td>0.872548</td>\\n    </tr>\\n    <tr>\\n      <th>149</th>\\n      <td>15</td>\\n      <td>0.41</td>\\n      <td>13.0</td>\\n      <td>0.888480</td>\\n    </tr>\\n    <tr>\\n      <th>159</th>\\n      <td>16</td>\\n      <td>0.41</td>\\n      <td>13.0</td>\\n      <td>0.867906</td>\\n    </tr>\\n    <tr>\\n      <th>168</th>\\n      <td>17</td>\\n      <td>0.41</td>\\n      <td>9.0</td>\\n      <td>0.868453</td>\\n    </tr>\\n    <tr>\\n      <th>179</th>\\n      <td>18</td>\\n      <td>0.41</td>\\n      <td>13.0</td>\\n      <td>0.867510</td>\\n    </tr>\\n    <tr>\\n      <th>189</th>\\n      <td>19</td>\\n      <td>0.41</td>\\n      <td>13.0</td>\\n      <td>0.873485</td>\\n    </tr>\\n    <tr>\\n      <th>199</th>\\n      <td>20</td>\\n      <td>0.41</td>\\n      <td>13.0</td>\\n      <td>0.879318</td>\\n    </tr>\\n  </tbody>\\n</table>\\n</div>\"\r\n     },\r\n     \"execution_count\": 56,\r\n     \"metadata\": {},\r\n     \"output_type\": \"execute_result\"\r\n    }\r\n   ],\r\n   \"source\": [\r\n    \"res_svd1_reps.loc[res_svd1_reps.groupby('rep').idxmin()['RMSE']]\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%%\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 52,\r\n   \"outputs\": [\r\n    {\r\n     \"data\": {\r\n      \"text/plain\": \"     rep  weight     r      RMSE\\n39     4    0.41  13.0  0.865293\\n30     4    0.39  10.0  0.865373\\n33     4    0.36  10.0  0.865408\\n31     4    0.38  10.0  0.865569\\n34     4    0.39  11.0  0.865717\\n35     4    0.37  10.0  0.866763\\n37     4    0.40  10.0  0.867131\\n179   18    0.41  13.0  0.867510\\n32     4    0.42  10.0  0.867536\\n36     4    0.41  10.0  0.867569\",\r\n      \"text/html\": \"<div>\\n<style scoped>\\n    .dataframe tbody tr th:only-of-type {\\n        vertical-align: middle;\\n    }\\n\\n    .dataframe tbody tr th {\\n        vertical-align: top;\\n    }\\n\\n    .dataframe thead th {\\n        text-align: right;\\n    }\\n</style>\\n<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n  <thead>\\n    <tr style=\\\"text-align: right;\\\">\\n      <th></th>\\n      <th>rep</th>\\n      <th>weight</th>\\n      <th>r</th>\\n      <th>RMSE</th>\\n    </tr>\\n  </thead>\\n  <tbody>\\n    <tr>\\n      <th>39</th>\\n      <td>4</td>\\n      <td>0.41</td>\\n      <td>13.0</td>\\n      <td>0.865293</td>\\n    </tr>\\n    <tr>\\n      <th>30</th>\\n      <td>4</td>\\n      <td>0.39</td>\\n      <td>10.0</td>\\n      <td>0.865373</td>\\n    </tr>\\n    <tr>\\n      <th>33</th>\\n      <td>4</td>\\n      <td>0.36</td>\\n      <td>10.0</td>\\n      <td>0.865408</td>\\n    </tr>\\n    <tr>\\n      <th>31</th>\\n      <td>4</td>\\n      <td>0.38</td>\\n      <td>10.0</td>\\n      <td>0.865569</td>\\n    </tr>\\n    <tr>\\n      <th>34</th>\\n      <td>4</td>\\n      <td>0.39</td>\\n      <td>11.0</td>\\n      <td>0.865717</td>\\n    </tr>\\n    <tr>\\n      <th>35</th>\\n      <td>4</td>\\n      <td>0.37</td>\\n      <td>10.0</td>\\n      <td>0.866763</td>\\n    </tr>\\n    <tr>\\n      <th>37</th>\\n      <td>4</td>\\n      <td>0.40</td>\\n      <td>10.0</td>\\n      <td>0.867131</td>\\n    </tr>\\n    <tr>\\n      <th>179</th>\\n      <td>18</td>\\n      <td>0.41</td>\\n      <td>13.0</td>\\n      <td>0.867510</td>\\n    </tr>\\n    <tr>\\n      <th>32</th>\\n      <td>4</td>\\n      <td>0.42</td>\\n      <td>10.0</td>\\n      <td>0.867536</td>\\n    </tr>\\n    <tr>\\n      <th>36</th>\\n      <td>4</td>\\n      <td>0.41</td>\\n      <td>10.0</td>\\n      <td>0.867569</td>\\n    </tr>\\n  </tbody>\\n</table>\\n</div>\"\r\n     },\r\n     \"execution_count\": 52,\r\n     \"metadata\": {},\r\n     \"output_type\": \"execute_result\"\r\n    }\r\n   ],\r\n   \"source\": [\r\n    \"n = 10\\n\",\r\n    \"res_svd1_reps.loc[res_svd1_reps.apply(lambda x: pd.Series(x.nsmallest(n).index))['RMSE']]\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%%\\n\"\r\n    }\r\n   }\r\n  }\r\n ],\r\n \"metadata\": {\r\n  \"kernelspec\": {\r\n   \"display_name\": \"Python 3\",\r\n   \"language\": \"python\",\r\n   \"name\": \"python3\"\r\n  },\r\n  \"language_info\": {\r\n   \"codemirror_mode\": {\r\n    \"name\": \"ipython\",\r\n    \"version\": 2\r\n   },\r\n   \"file_extension\": \".py\",\r\n   \"mimetype\": \"text/x-python\",\r\n   \"name\": \"python\",\r\n   \"nbconvert_exporter\": \"python\",\r\n   \"pygments_lexer\": \"ipython2\",\r\n   \"version\": \"2.7.6\"\r\n  }\r\n },\r\n \"nbformat\": 4,\r\n \"nbformat_minor\": 0\r\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/src/presenting_results.ipynb b/src/presenting_results.ipynb
---- a/src/presenting_results.ipynb	(revision 7551f0ee5fbc5d43453af9d58769adbcb2bdfdb2)
-+++ b/src/presenting_results.ipynb	(date 1649535719721)
-@@ -2,16 +2,8 @@
-  "cells": [
-   {
-    "cell_type": "code",
--   "execution_count": 1,
--   "outputs": [
--    {
--     "data": {
--      "text/plain": "<Figure size 72x72 with 0 Axes>"
--     },
--     "metadata": {},
--     "output_type": "display_data"
--    }
--   ],
-+   "execution_count": 7,
-+   "outputs": [],
-    "source": [
-     "import pandas as pd\n",
-     "import numpy as np\n",
-@@ -22,7 +14,8 @@
-     "import matplotlib.pyplot as plt\n",
-     "from matplotlib import cm\n",
-     "from matplotlib.ticker import LinearLocator, FormatStrFormatter\n",
--    "os.chdir('D:\\Studia\\MoCaDR_proj1')"
-+    "\n",
-+    "os.chdir('../')"
-    ],
-    "metadata": {
-     "collapsed": false,
-@@ -45,7 +38,7 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 2,
-+   "execution_count": 8,
-    "outputs": [],
-    "source": [
-     "# SVD1\n",
-@@ -85,7 +78,7 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 47,
-+   "execution_count": null,
-    "outputs": [],
-    "source": [
-     "plot_svd1_1 = ggplot(res_svd1_long) + \\\n",
-@@ -103,6 +96,30 @@
-     "plot_svd1_1.save('Report/fig/svd1_1.png')\n",
-     "plot_svd1_2.save('Report/fig/svd1_2.png')"
-    ],
-+   "metadata": {
-+    "collapsed": false,
-+    "pycharm": {
-+     "name": "#%%\n"
-+    }
-+   }
-+  },
-+  {
-+   "cell_type": "code",
-+   "execution_count": 10,
-+   "outputs": [
-+    {
-+     "data": {
-+      "text/plain": "      r             variable     value\n6     7               rmse_0  2.866008\n312  13        rmse_colmeans  0.945753\n114  15     rmse_global_mean  0.987012\n408   9  rmse_means_weighted  0.876659\n205   6       rmse_row_means  0.904344",
-+      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>r</th>\n      <th>variable</th>\n      <th>value</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>6</th>\n      <td>7</td>\n      <td>rmse_0</td>\n      <td>2.866008</td>\n    </tr>\n    <tr>\n      <th>312</th>\n      <td>13</td>\n      <td>rmse_colmeans</td>\n      <td>0.945753</td>\n    </tr>\n    <tr>\n      <th>114</th>\n      <td>15</td>\n      <td>rmse_global_mean</td>\n      <td>0.987012</td>\n    </tr>\n    <tr>\n      <th>408</th>\n      <td>9</td>\n      <td>rmse_means_weighted</td>\n      <td>0.876659</td>\n    </tr>\n    <tr>\n      <th>205</th>\n      <td>6</td>\n      <td>rmse_row_means</td>\n      <td>0.904344</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
-+     },
-+     "execution_count": 10,
-+     "metadata": {},
-+     "output_type": "execute_result"
-+    }
-+   ],
-+   "source": [
-+    "res_svd1_long.loc[res_svd1_long.groupby('variable').idxmin()['value']]"
-+   ],
-    "metadata": {
-     "collapsed": false,
-     "pycharm": {
-@@ -124,7 +141,7 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 48,
-+   "execution_count": null,
-    "outputs": [],
-    "source": [
-     "plot_svd2_1 = ggplot(res_svd2_long) + \\\n",
-@@ -152,21 +169,35 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 5,
-+   "execution_count": null,
-+   "outputs": [],
-+   "source": [
-+    "n = 10\n",
-+    "res_svd2_long"
-+   ],
-+   "metadata": {
-+    "collapsed": false,
-+    "pycharm": {
-+     "name": "#%%\n"
-+    }
-+   }
-+  },
-+  {
-+   "cell_type": "code",
-+   "execution_count": 11,
-    "outputs": [
-     {
-      "data": {
--      "text/plain": "       r        variable     value\n0      1          rmse_0  3.095144\n1      2          rmse_0  3.006560\n2      3          rmse_0  2.943416\n3      4          rmse_0  2.903454\n4      5          rmse_0  2.877835\n..   ...             ...       ...\n495   96  rmse_col_means  0.957780\n496   97  rmse_col_means  0.959530\n497   98  rmse_col_means  0.958531\n498   99  rmse_col_means  0.958267\n499  100  rmse_col_means  0.959624\n\n[500 rows x 3 columns]",
--      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>r</th>\n      <th>variable</th>\n      <th>value</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>rmse_0</td>\n      <td>3.095144</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>rmse_0</td>\n      <td>3.006560</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>rmse_0</td>\n      <td>2.943416</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>rmse_0</td>\n      <td>2.903454</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>rmse_0</td>\n      <td>2.877835</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>495</th>\n      <td>96</td>\n      <td>rmse_col_means</td>\n      <td>0.957780</td>\n    </tr>\n    <tr>\n      <th>496</th>\n      <td>97</td>\n      <td>rmse_col_means</td>\n      <td>0.959530</td>\n    </tr>\n    <tr>\n      <th>497</th>\n      <td>98</td>\n      <td>rmse_col_means</td>\n      <td>0.958531</td>\n    </tr>\n    <tr>\n      <th>498</th>\n      <td>99</td>\n      <td>rmse_col_means</td>\n      <td>0.958267</td>\n    </tr>\n    <tr>\n      <th>499</th>\n      <td>100</td>\n      <td>rmse_col_means</td>\n      <td>0.959624</td>\n    </tr>\n  </tbody>\n</table>\n<p>500 rows × 3 columns</p>\n</div>"
-+      "text/plain": "      r             variable     value\n18   19               rmse_0  2.778912\n409  10       rmse_col_means  0.942021\n105   6     rmse_global_mean  0.942468\n312  13  rmse_means_weighted  0.874922\n206   7       rmse_row_means  0.877799",
-+      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>r</th>\n      <th>variable</th>\n      <th>value</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>18</th>\n      <td>19</td>\n      <td>rmse_0</td>\n      <td>2.778912</td>\n    </tr>\n    <tr>\n      <th>409</th>\n      <td>10</td>\n      <td>rmse_col_means</td>\n      <td>0.942021</td>\n    </tr>\n    <tr>\n      <th>105</th>\n      <td>6</td>\n      <td>rmse_global_mean</td>\n      <td>0.942468</td>\n    </tr>\n    <tr>\n      <th>312</th>\n      <td>13</td>\n      <td>rmse_means_weighted</td>\n      <td>0.874922</td>\n    </tr>\n    <tr>\n      <th>206</th>\n      <td>7</td>\n      <td>rmse_row_means</td>\n      <td>0.877799</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
-      },
--     "execution_count": 5,
-+     "execution_count": 11,
-      "metadata": {},
-      "output_type": "execute_result"
-     }
-    ],
-    "source": [
--    "n = 10\n",
--    "res_svd2_long"
-+    "res_svd2_long.loc[res_svd2_long.groupby('variable').idxmin()['value']]"
-    ],
-    "metadata": {
-     "collapsed": false,
-@@ -189,7 +220,7 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 49,
-+   "execution_count": null,
-    "outputs": [],
-    "source": [
-     "plot_nmf_1 = ggplot(res_nmf_long) + \\\n",
-@@ -216,6 +247,30 @@
-    }
-   },
-   {
-+   "cell_type": "code",
-+   "execution_count": 12,
-+   "outputs": [
-+    {
-+     "data": {
-+      "text/plain": "      r             variable     value\n5     6               rmse_0  2.899729\n346  47        rmse_colmeans  0.946226\n129  30     rmse_global_mean  0.986986\n436  37  rmse_means_weighted  0.876648\n214  15       rmse_row_means  0.905252",
-+      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>r</th>\n      <th>variable</th>\n      <th>value</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>5</th>\n      <td>6</td>\n      <td>rmse_0</td>\n      <td>2.899729</td>\n    </tr>\n    <tr>\n      <th>346</th>\n      <td>47</td>\n      <td>rmse_colmeans</td>\n      <td>0.946226</td>\n    </tr>\n    <tr>\n      <th>129</th>\n      <td>30</td>\n      <td>rmse_global_mean</td>\n      <td>0.986986</td>\n    </tr>\n    <tr>\n      <th>436</th>\n      <td>37</td>\n      <td>rmse_means_weighted</td>\n      <td>0.876648</td>\n    </tr>\n    <tr>\n      <th>214</th>\n      <td>15</td>\n      <td>rmse_row_means</td>\n      <td>0.905252</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
-+     },
-+     "execution_count": 12,
-+     "metadata": {},
-+     "output_type": "execute_result"
-+    }
-+   ],
-+   "source": [
-+    "res_nmf_long.loc[res_nmf_long.groupby('variable').idxmin()['value']]"
-+   ],
-+   "metadata": {
-+    "collapsed": false,
-+    "pycharm": {
-+     "name": "#%%\n"
-+    }
-+   }
-+  },
-+  {
-    "cell_type": "markdown",
-    "source": [
-     "# Stop condition for SVD2"
-@@ -229,7 +284,7 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 7,
-+   "execution_count": null,
-    "outputs": [],
-    "source": [
-     "res_svd2_stop = pd.read_csv('Results/results_stop_svd2.csv')"
-@@ -243,18 +298,8 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 8,
--   "outputs": [
--    {
--     "data": {
--      "text/plain": "       stop   r      RMSE\n378  0.0086   9  0.879578\n356  0.0085   9  0.880032\n400  0.0087   9  0.880051\n421  0.0088   8  0.880321\n232  0.0079  17  0.880356\n399  0.0087   8  0.880363\n210  0.0078  17  0.880485\n299  0.0082  18  0.880578\n275  0.0081  16  0.880597\n384  0.0086  15  0.880600",
--      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>stop</th>\n      <th>r</th>\n      <th>RMSE</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>378</th>\n      <td>0.0086</td>\n      <td>9</td>\n      <td>0.879578</td>\n    </tr>\n    <tr>\n      <th>356</th>\n      <td>0.0085</td>\n      <td>9</td>\n      <td>0.880032</td>\n    </tr>\n    <tr>\n      <th>400</th>\n      <td>0.0087</td>\n      <td>9</td>\n      <td>0.880051</td>\n    </tr>\n    <tr>\n      <th>421</th>\n      <td>0.0088</td>\n      <td>8</td>\n      <td>0.880321</td>\n    </tr>\n    <tr>\n      <th>232</th>\n      <td>0.0079</td>\n      <td>17</td>\n      <td>0.880356</td>\n    </tr>\n    <tr>\n      <th>399</th>\n      <td>0.0087</td>\n      <td>8</td>\n      <td>0.880363</td>\n    </tr>\n    <tr>\n      <th>210</th>\n      <td>0.0078</td>\n      <td>17</td>\n      <td>0.880485</td>\n    </tr>\n    <tr>\n      <th>299</th>\n      <td>0.0082</td>\n      <td>18</td>\n      <td>0.880578</td>\n    </tr>\n    <tr>\n      <th>275</th>\n      <td>0.0081</td>\n      <td>16</td>\n      <td>0.880597</td>\n    </tr>\n    <tr>\n      <th>384</th>\n      <td>0.0086</td>\n      <td>15</td>\n      <td>0.880600</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
--     },
--     "execution_count": 8,
--     "metadata": {},
--     "output_type": "execute_result"
--    }
--   ],
-+   "execution_count": null,
-+   "outputs": [],
-    "source": [
-     "n = 10\n",
-     "res_svd2_stop.loc[res_svd2_stop.apply(lambda x: pd.Series(x.nsmallest(n).index))['RMSE']]"
-@@ -268,32 +313,13 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 9,
--   "outputs": [
--    {
--     "data": {
--      "text/plain": "<matplotlib.colorbar.Colorbar at 0x230fac76c50>"
--     },
--     "execution_count": 9,
--     "metadata": {},
--     "output_type": "execute_result"
--    },
--    {
--     "data": {
--      "text/plain": "<Figure size 1080x720 with 2 Axes>",
--      "image/png": "\n"
--     },
--     "metadata": {
--      "needs_background": "light"
--     },
--     "output_type": "display_data"
--    }
--   ],
-+   "execution_count": null,
-+   "outputs": [],
-    "source": [
-     "X, Y, Z = res_svd2_stop.T.values\n",
-     "fig = plt.figure(figsize=(15,10))\n",
-     "ax = fig.gca(projection='3d')\n",
--    "surf = ax.plot_trisurf(X, Y, Z, cmap=cm.coolwarm, edgecolor ='black', linewidth=0.005, antialiased=False)\n",
-+    "surf = ax.plot_trisurf(X, Y, Z, cmap=cm.coolwarm, edgecolor ='black', antialiased=False)\n",
-     "# Add a color bar which maps values to colors.\n",
-     "fig.colorbar(surf, shrink=0.5, aspect=20)"
-    ],
-@@ -318,7 +344,7 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 10,
-+   "execution_count": 14,
-    "outputs": [],
-    "source": [
-     "res_svd1_3d = pd.read_csv('Results/results_r_w_svd1.csv')\n",
-@@ -346,21 +372,31 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 18,
-+   "execution_count": 22,
-    "outputs": [
-     {
--     "data": {
--      "text/plain": "     col_weight   r      RMSE\n423        0.39  10  0.873987\n401        0.38  10  0.874244\n489        0.42  10  0.874274\n357        0.36  10  0.874449\n424        0.39  11  0.874469\n379        0.37  10  0.874475\n467        0.41  10  0.874490\n445        0.40  10  0.874498\n466        0.41   9  0.874507\n470        0.41  13  0.874532",
--      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>col_weight</th>\n      <th>r</th>\n      <th>RMSE</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>423</th>\n      <td>0.39</td>\n      <td>10</td>\n      <td>0.873987</td>\n    </tr>\n    <tr>\n      <th>401</th>\n      <td>0.38</td>\n      <td>10</td>\n      <td>0.874244</td>\n    </tr>\n    <tr>\n      <th>489</th>\n      <td>0.42</td>\n      <td>10</td>\n      <td>0.874274</td>\n    </tr>\n    <tr>\n      <th>357</th>\n      <td>0.36</td>\n      <td>10</td>\n      <td>0.874449</td>\n    </tr>\n    <tr>\n      <th>424</th>\n      <td>0.39</td>\n      <td>11</td>\n      <td>0.874469</td>\n    </tr>\n    <tr>\n      <th>379</th>\n      <td>0.37</td>\n      <td>10</td>\n      <td>0.874475</td>\n    </tr>\n    <tr>\n      <th>467</th>\n      <td>0.41</td>\n      <td>10</td>\n      <td>0.874490</td>\n    </tr>\n    <tr>\n      <th>445</th>\n      <td>0.40</td>\n      <td>10</td>\n      <td>0.874498</td>\n    </tr>\n    <tr>\n      <th>466</th>\n      <td>0.41</td>\n      <td>9</td>\n      <td>0.874507</td>\n    </tr>\n    <tr>\n      <th>470</th>\n      <td>0.41</td>\n      <td>13</td>\n      <td>0.874532</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
--     },
--     "execution_count": 18,
--     "metadata": {},
--     "output_type": "execute_result"
-+     "name": "stdout",
-+     "output_type": "stream",
-+     "text": [
-+      "\\begin{tabular}{rrr}\n",
-+      "\\toprule\n",
-+      " col\\_weight &  r &     RMSE \\\\\n",
-+      "\\midrule\n",
-+      "       0.39 & 10 & 0.873987 \\\\\n",
-+      "       0.38 & 10 & 0.874244 \\\\\n",
-+      "       0.42 & 10 & 0.874274 \\\\\n",
-+      "       0.36 & 10 & 0.874449 \\\\\n",
-+      "       0.39 & 11 & 0.874469 \\\\\n",
-+      "\\bottomrule\n",
-+      "\\end{tabular}\n",
-+      "\n"
-+     ]
-     }
-    ],
-    "source": [
--    "n = 10\n",
--    "res_svd1_3d.loc[res_svd1_3d.apply(lambda x: pd.Series(x.nsmallest(n).index))['RMSE']]"
-+    "n = 5\n",
-+    "table = pd.DataFrame(res_svd1_3d.loc[res_svd1_3d.apply(lambda x: pd.Series(x.nsmallest(n).index))['RMSE']])\n",
-+    "print(table.to_latex(index=False))"
-    ],
-    "metadata": {
-     "collapsed": false,
-@@ -371,19 +407,8 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 12,
--   "outputs": [
--    {
--     "data": {
--      "text/plain": "<Figure size 1080x720 with 2 Axes>",
--      "image/png": "\n"
--     },
--     "metadata": {
--      "needs_background": "light"
--     },
--     "output_type": "display_data"
--    }
--   ],
-+   "execution_count": null,
-+   "outputs": [],
-    "source": [
-     "X, Y, Z = res_svd1_3d.T.values\n",
-     "fig = plt.figure(figsize=(15,10))\n",
-@@ -417,20 +442,20 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 13,
-+   "execution_count": 26,
-    "outputs": [
-     {
-      "data": {
--      "text/plain": "     col_weight  r      RMSE\n73         0.25  8  0.867393\n87         0.26  8  0.867397\n59         0.24  8  0.867402\n101        0.27  8  0.867410\n115        0.28  8  0.867494\n45         0.23  8  0.867501\n31         0.22  8  0.867509\n129        0.29  8  0.867578\n17         0.21  8  0.867675\n143        0.30  8  0.867697",
--      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>col_weight</th>\n      <th>r</th>\n      <th>RMSE</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>73</th>\n      <td>0.25</td>\n      <td>8</td>\n      <td>0.867393</td>\n    </tr>\n    <tr>\n      <th>87</th>\n      <td>0.26</td>\n      <td>8</td>\n      <td>0.867397</td>\n    </tr>\n    <tr>\n      <th>59</th>\n      <td>0.24</td>\n      <td>8</td>\n      <td>0.867402</td>\n    </tr>\n    <tr>\n      <th>101</th>\n      <td>0.27</td>\n      <td>8</td>\n      <td>0.867410</td>\n    </tr>\n    <tr>\n      <th>115</th>\n      <td>0.28</td>\n      <td>8</td>\n      <td>0.867494</td>\n    </tr>\n    <tr>\n      <th>45</th>\n      <td>0.23</td>\n      <td>8</td>\n      <td>0.867501</td>\n    </tr>\n    <tr>\n      <th>31</th>\n      <td>0.22</td>\n      <td>8</td>\n      <td>0.867509</td>\n    </tr>\n    <tr>\n      <th>129</th>\n      <td>0.29</td>\n      <td>8</td>\n      <td>0.867578</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>0.21</td>\n      <td>8</td>\n      <td>0.867675</td>\n    </tr>\n    <tr>\n      <th>143</th>\n      <td>0.30</td>\n      <td>8</td>\n      <td>0.867697</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
-+      "text/plain": "     col_weight  r      RMSE\n73         0.25  8  0.867393\n87         0.26  8  0.867397\n59         0.24  8  0.867402\n101        0.27  8  0.867410\n115        0.28  8  0.867494\n45         0.23  8  0.867501\n31         0.22  8  0.867509\n129        0.29  8  0.867578\n17         0.21  8  0.867675\n143        0.30  8  0.867697\n3          0.20  8  0.867782\n88         0.26  9  0.867801\n74         0.25  9  0.867838\n157        0.31  8  0.867841\n102        0.27  9  0.867895\n16         0.21  7  0.867974\n2          0.20  7  0.867982\n130        0.29  9  0.867982\n171        0.32  8  0.868015\n158        0.31  9  0.868065",
-+      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>col_weight</th>\n      <th>r</th>\n      <th>RMSE</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>73</th>\n      <td>0.25</td>\n      <td>8</td>\n      <td>0.867393</td>\n    </tr>\n    <tr>\n      <th>87</th>\n      <td>0.26</td>\n      <td>8</td>\n      <td>0.867397</td>\n    </tr>\n    <tr>\n      <th>59</th>\n      <td>0.24</td>\n      <td>8</td>\n      <td>0.867402</td>\n    </tr>\n    <tr>\n      <th>101</th>\n      <td>0.27</td>\n      <td>8</td>\n      <td>0.867410</td>\n    </tr>\n    <tr>\n      <th>115</th>\n      <td>0.28</td>\n      <td>8</td>\n      <td>0.867494</td>\n    </tr>\n    <tr>\n      <th>45</th>\n      <td>0.23</td>\n      <td>8</td>\n      <td>0.867501</td>\n    </tr>\n    <tr>\n      <th>31</th>\n      <td>0.22</td>\n      <td>8</td>\n      <td>0.867509</td>\n    </tr>\n    <tr>\n      <th>129</th>\n      <td>0.29</td>\n      <td>8</td>\n      <td>0.867578</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>0.21</td>\n      <td>8</td>\n      <td>0.867675</td>\n    </tr>\n    <tr>\n      <th>143</th>\n      <td>0.30</td>\n      <td>8</td>\n      <td>0.867697</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>0.20</td>\n      <td>8</td>\n      <td>0.867782</td>\n    </tr>\n    <tr>\n      <th>88</th>\n      <td>0.26</td>\n      <td>9</td>\n      <td>0.867801</td>\n    </tr>\n    <tr>\n      <th>74</th>\n      <td>0.25</td>\n      <td>9</td>\n      <td>0.867838</td>\n    </tr>\n    <tr>\n      <th>157</th>\n      <td>0.31</td>\n      <td>8</td>\n      <td>0.867841</td>\n    </tr>\n    <tr>\n      <th>102</th>\n      <td>0.27</td>\n      <td>9</td>\n      <td>0.867895</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>0.21</td>\n      <td>7</td>\n      <td>0.867974</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0.20</td>\n      <td>7</td>\n      <td>0.867982</td>\n    </tr>\n    <tr>\n      <th>130</th>\n      <td>0.29</td>\n      <td>9</td>\n      <td>0.867982</td>\n    </tr>\n    <tr>\n      <th>171</th>\n      <td>0.32</td>\n      <td>8</td>\n      <td>0.868015</td>\n    </tr>\n    <tr>\n      <th>158</th>\n      <td>0.31</td>\n      <td>9</td>\n      <td>0.868065</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
-      },
--     "execution_count": 13,
-+     "execution_count": 26,
-      "metadata": {},
-      "output_type": "execute_result"
-     }
-    ],
-    "source": [
--    "n = 10\n",
-+    "n = 20\n",
-     "res_svd2_3d.loc[res_svd2_3d.apply(lambda x: pd.Series(x.nsmallest(n).index))['RMSE']]"
-    ],
-    "metadata": {
-@@ -442,19 +467,43 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 14,
-+   "execution_count": 23,
-    "outputs": [
-     {
--     "data": {
--      "text/plain": "<Figure size 1080x720 with 2 Axes>",
--      "image/png": "\n"
--     },
--     "metadata": {
--      "needs_background": "light"
--     },
--     "output_type": "display_data"
--    }
--   ],
-+     "name": "stdout",
-+     "output_type": "stream",
-+     "text": [
-+      "\\begin{tabular}{rrr}\n",
-+      "\\toprule\n",
-+      " col\\_weight &  r &     RMSE \\\\\n",
-+      "\\midrule\n",
-+      "       0.25 &  8 & 0.867393 \\\\\n",
-+      "       0.26 &  8 & 0.867397 \\\\\n",
-+      "       0.24 &  8 & 0.867402 \\\\\n",
-+      "       0.27 &  8 & 0.867410 \\\\\n",
-+      "       0.28 &  8 & 0.867494 \\\\\n",
-+      "\\bottomrule\n",
-+      "\\end{tabular}\n",
-+      "\n"
-+     ]
-+    }
-+   ],
-+   "source": [
-+    "n = 5\n",
-+    "table = pd.DataFrame(res_svd2_3d.loc[res_svd2_3d.apply(lambda x: pd.Series(x.nsmallest(n).index))['RMSE']])\n",
-+    "print(table.to_latex(index=False))"
-+   ],
-+   "metadata": {
-+    "collapsed": false,
-+    "pycharm": {
-+     "name": "#%%\n"
-+    }
-+   }
-+  },
-+  {
-+   "cell_type": "code",
-+   "execution_count": null,
-+   "outputs": [],
-    "source": [
-     "X2, Y2, Z2 = res_svd2_3d.T.values\n",
-     "fig = plt.figure(figsize=(15,10))\n",
-@@ -488,14 +537,14 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 19,
-+   "execution_count": 27,
-    "outputs": [
-     {
-      "data": {
-       "text/plain": "     col_weight   r      RMSE\n884        0.40  37  0.874794\n927        0.41  37  0.874817\n822        0.39  18  0.874841\n841        0.39  37  0.874848\n865        0.40  18  0.874849\n779        0.38  18  0.874881\n970        0.42  37  0.874892\n908        0.41  18  0.874909\n736        0.37  18  0.874958\n798        0.38  37  0.874959",
-       "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>col_weight</th>\n      <th>r</th>\n      <th>RMSE</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>884</th>\n      <td>0.40</td>\n      <td>37</td>\n      <td>0.874794</td>\n    </tr>\n    <tr>\n      <th>927</th>\n      <td>0.41</td>\n      <td>37</td>\n      <td>0.874817</td>\n    </tr>\n    <tr>\n      <th>822</th>\n      <td>0.39</td>\n      <td>18</td>\n      <td>0.874841</td>\n    </tr>\n    <tr>\n      <th>841</th>\n      <td>0.39</td>\n      <td>37</td>\n      <td>0.874848</td>\n    </tr>\n    <tr>\n      <th>865</th>\n      <td>0.40</td>\n      <td>18</td>\n      <td>0.874849</td>\n    </tr>\n    <tr>\n      <th>779</th>\n      <td>0.38</td>\n      <td>18</td>\n      <td>0.874881</td>\n    </tr>\n    <tr>\n      <th>970</th>\n      <td>0.42</td>\n      <td>37</td>\n      <td>0.874892</td>\n    </tr>\n    <tr>\n      <th>908</th>\n      <td>0.41</td>\n      <td>18</td>\n      <td>0.874909</td>\n    </tr>\n    <tr>\n      <th>736</th>\n      <td>0.37</td>\n      <td>18</td>\n      <td>0.874958</td>\n    </tr>\n    <tr>\n      <th>798</th>\n      <td>0.38</td>\n      <td>37</td>\n      <td>0.874959</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
-      },
--     "execution_count": 19,
-+     "execution_count": 27,
-      "metadata": {},
-      "output_type": "execute_result"
-     }
-@@ -513,19 +562,43 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 50,
-+   "execution_count": 25,
-    "outputs": [
-     {
--     "data": {
--      "text/plain": "<Figure size 1080x720 with 2 Axes>",
--      "image/png": "\n"
--     },
--     "metadata": {
--      "needs_background": "light"
--     },
--     "output_type": "display_data"
--    }
--   ],
-+     "name": "stdout",
-+     "output_type": "stream",
-+     "text": [
-+      "\\begin{tabular}{rrr}\n",
-+      "\\toprule\n",
-+      " col\\_weight &  r &     RMSE \\\\\n",
-+      "\\midrule\n",
-+      "       0.40 & 37 & 0.874794 \\\\\n",
-+      "       0.41 & 37 & 0.874817 \\\\\n",
-+      "       0.39 & 18 & 0.874841 \\\\\n",
-+      "       0.39 & 37 & 0.874848 \\\\\n",
-+      "       0.40 & 18 & 0.874849 \\\\\n",
-+      "\\bottomrule\n",
-+      "\\end{tabular}\n",
-+      "\n"
-+     ]
-+    }
-+   ],
-+   "source": [
-+    "n = 5\n",
-+    "table = pd.DataFrame(res_nmf_3d.loc[res_nmf_3d.apply(lambda x: pd.Series(x.nsmallest(n).index))['RMSE']])\n",
-+    "print(table.to_latex(index=False))"
-+   ],
-+   "metadata": {
-+    "collapsed": false,
-+    "pycharm": {
-+     "name": "#%%\n"
-+    }
-+   }
-+  },
-+  {
-+   "cell_type": "code",
-+   "execution_count": null,
-+   "outputs": [],
-    "source": [
-     "X3, Y3, Z3 = res_nmf_3d.T.values\n",
-     "fig = plt.figure(figsize=(15, 10))\n",
-@@ -559,7 +632,7 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 51,
-+   "execution_count": null,
-    "outputs": [],
-    "source": [
-     "res_svd1_reps = pd.read_csv('Results/results_reps_svd1.csv')"
-@@ -573,18 +646,8 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 56,
--   "outputs": [
--    {
--     "data": {
--      "text/plain": "     rep  weight     r      RMSE\n5      1    0.37  10.0  0.878849\n19     2    0.41  13.0  0.871667\n21     3    0.38  10.0  0.883794\n39     4    0.41  13.0  0.865293\n49     5    0.41  13.0  0.885750\n59     6    0.41  13.0  0.868848\n69     7    0.41  13.0  0.878588\n79     8    0.41  13.0  0.887374\n88     9    0.41   9.0  0.879621\n99    10    0.41  13.0  0.867972\n109   11    0.41  13.0  0.877385\n119   12    0.41  13.0  0.872681\n124   13    0.39  11.0  0.879833\n139   14    0.41  13.0  0.872548\n149   15    0.41  13.0  0.888480\n159   16    0.41  13.0  0.867906\n168   17    0.41   9.0  0.868453\n179   18    0.41  13.0  0.867510\n189   19    0.41  13.0  0.873485\n199   20    0.41  13.0  0.879318",
--      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>rep</th>\n      <th>weight</th>\n      <th>r</th>\n      <th>RMSE</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>5</th>\n      <td>1</td>\n      <td>0.37</td>\n      <td>10.0</td>\n      <td>0.878849</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>2</td>\n      <td>0.41</td>\n      <td>13.0</td>\n      <td>0.871667</td>\n    </tr>\n    <tr>\n      <th>21</th>\n      <td>3</td>\n      <td>0.38</td>\n      <td>10.0</td>\n      <td>0.883794</td>\n    </tr>\n    <tr>\n      <th>39</th>\n      <td>4</td>\n      <td>0.41</td>\n      <td>13.0</td>\n      <td>0.865293</td>\n    </tr>\n    <tr>\n      <th>49</th>\n      <td>5</td>\n      <td>0.41</td>\n      <td>13.0</td>\n      <td>0.885750</td>\n    </tr>\n    <tr>\n      <th>59</th>\n      <td>6</td>\n      <td>0.41</td>\n      <td>13.0</td>\n      <td>0.868848</td>\n    </tr>\n    <tr>\n      <th>69</th>\n      <td>7</td>\n      <td>0.41</td>\n      <td>13.0</td>\n      <td>0.878588</td>\n    </tr>\n    <tr>\n      <th>79</th>\n      <td>8</td>\n      <td>0.41</td>\n      <td>13.0</td>\n      <td>0.887374</td>\n    </tr>\n    <tr>\n      <th>88</th>\n      <td>9</td>\n      <td>0.41</td>\n      <td>9.0</td>\n      <td>0.879621</td>\n    </tr>\n    <tr>\n      <th>99</th>\n      <td>10</td>\n      <td>0.41</td>\n      <td>13.0</td>\n      <td>0.867972</td>\n    </tr>\n    <tr>\n      <th>109</th>\n      <td>11</td>\n      <td>0.41</td>\n      <td>13.0</td>\n      <td>0.877385</td>\n    </tr>\n    <tr>\n      <th>119</th>\n      <td>12</td>\n      <td>0.41</td>\n      <td>13.0</td>\n      <td>0.872681</td>\n    </tr>\n    <tr>\n      <th>124</th>\n      <td>13</td>\n      <td>0.39</td>\n      <td>11.0</td>\n      <td>0.879833</td>\n    </tr>\n    <tr>\n      <th>139</th>\n      <td>14</td>\n      <td>0.41</td>\n      <td>13.0</td>\n      <td>0.872548</td>\n    </tr>\n    <tr>\n      <th>149</th>\n      <td>15</td>\n      <td>0.41</td>\n      <td>13.0</td>\n      <td>0.888480</td>\n    </tr>\n    <tr>\n      <th>159</th>\n      <td>16</td>\n      <td>0.41</td>\n      <td>13.0</td>\n      <td>0.867906</td>\n    </tr>\n    <tr>\n      <th>168</th>\n      <td>17</td>\n      <td>0.41</td>\n      <td>9.0</td>\n      <td>0.868453</td>\n    </tr>\n    <tr>\n      <th>179</th>\n      <td>18</td>\n      <td>0.41</td>\n      <td>13.0</td>\n      <td>0.867510</td>\n    </tr>\n    <tr>\n      <th>189</th>\n      <td>19</td>\n      <td>0.41</td>\n      <td>13.0</td>\n      <td>0.873485</td>\n    </tr>\n    <tr>\n      <th>199</th>\n      <td>20</td>\n      <td>0.41</td>\n      <td>13.0</td>\n      <td>0.879318</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
--     },
--     "execution_count": 56,
--     "metadata": {},
--     "output_type": "execute_result"
--    }
--   ],
-+   "execution_count": null,
-+   "outputs": [],
-    "source": [
-     "res_svd1_reps.loc[res_svd1_reps.groupby('rep').idxmin()['RMSE']]"
-    ],
-@@ -597,18 +660,8 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 52,
--   "outputs": [
--    {
--     "data": {
--      "text/plain": "     rep  weight     r      RMSE\n39     4    0.41  13.0  0.865293\n30     4    0.39  10.0  0.865373\n33     4    0.36  10.0  0.865408\n31     4    0.38  10.0  0.865569\n34     4    0.39  11.0  0.865717\n35     4    0.37  10.0  0.866763\n37     4    0.40  10.0  0.867131\n179   18    0.41  13.0  0.867510\n32     4    0.42  10.0  0.867536\n36     4    0.41  10.0  0.867569",
--      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>rep</th>\n      <th>weight</th>\n      <th>r</th>\n      <th>RMSE</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>39</th>\n      <td>4</td>\n      <td>0.41</td>\n      <td>13.0</td>\n      <td>0.865293</td>\n    </tr>\n    <tr>\n      <th>30</th>\n      <td>4</td>\n      <td>0.39</td>\n      <td>10.0</td>\n      <td>0.865373</td>\n    </tr>\n    <tr>\n      <th>33</th>\n      <td>4</td>\n      <td>0.36</td>\n      <td>10.0</td>\n      <td>0.865408</td>\n    </tr>\n    <tr>\n      <th>31</th>\n      <td>4</td>\n      <td>0.38</td>\n      <td>10.0</td>\n      <td>0.865569</td>\n    </tr>\n    <tr>\n      <th>34</th>\n      <td>4</td>\n      <td>0.39</td>\n      <td>11.0</td>\n      <td>0.865717</td>\n    </tr>\n    <tr>\n      <th>35</th>\n      <td>4</td>\n      <td>0.37</td>\n      <td>10.0</td>\n      <td>0.866763</td>\n    </tr>\n    <tr>\n      <th>37</th>\n      <td>4</td>\n      <td>0.40</td>\n      <td>10.0</td>\n      <td>0.867131</td>\n    </tr>\n    <tr>\n      <th>179</th>\n      <td>18</td>\n      <td>0.41</td>\n      <td>13.0</td>\n      <td>0.867510</td>\n    </tr>\n    <tr>\n      <th>32</th>\n      <td>4</td>\n      <td>0.42</td>\n      <td>10.0</td>\n      <td>0.867536</td>\n    </tr>\n    <tr>\n      <th>36</th>\n      <td>4</td>\n      <td>0.41</td>\n      <td>10.0</td>\n      <td>0.867569</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
--     },
--     "execution_count": 52,
--     "metadata": {},
--     "output_type": "execute_result"
--    }
--   ],
-+   "execution_count": null,
-+   "outputs": [],
-    "source": [
-     "n = 10\n",
-     "res_svd1_reps.loc[res_svd1_reps.apply(lambda x: pd.Series(x.nsmallest(n).index))['RMSE']]"
-Index: auxil/report.log
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/auxil/report.log b/auxil/report.log
-new file mode 100644
---- /dev/null	(date 1649535630780)
-+++ b/auxil/report.log	(date 1649535630780)
-@@ -0,0 +1,620 @@
-+This is pdfTeX, Version 3.14159265-2.6-1.40.21 (MiKTeX 2.9.7300 64-bit) (preloaded format=pdflatex 2020.3.10)  9 APR 2022 22:20
-+entering extended mode
-+**./report.tex
-+(report.tex
-+LaTeX2e <2020-02-02> patch level 2
-+L3 programming layer <2020-02-14>
-+("C:\Users\admin\AppData\Local\Programs\MiKTeX 2.9\tex/latex/amscls\amsart.cls"
-+Document Class: amsart 2017/10/31 v2.20.4
-+\linespacing=\dimen134
-+\normalparindent=\dimen135
-+\normaltopskip=\skip47
-+
-+("C:\Users\admin\AppData\Local\Programs\MiKTeX 2.9\tex/latex/amsmath\amsmath.st
-+y"
-+Package: amsmath 2020/01/20 v2.17e AMS math features
-+\@mathmargin=\skip48
-+
-+For additional information on amsmath, use the `?' option.
-+
-+("C:\Users\admin\AppData\Local\Programs\MiKTeX 2.9\tex/latex/amsmath\amstext.st
-+y"
-+Package: amstext 2000/06/29 v2.01 AMS text
-+
-+("C:\Users\admin\AppData\Local\Programs\MiKTeX 2.9\tex/latex/amsmath\amsgen.sty
-+"
-+File: amsgen.sty 1999/11/30 v2.0 generic functions
-+\@emptytoks=\toks14
-+\ex@=\dimen136
-+))
-+("C:\Users\admin\AppData\Local\Programs\MiKTeX 2.9\tex/latex/amsmath\amsbsy.sty
-+"
-+Package: amsbsy 1999/11/29 v1.2d Bold Symbols
-+\pmbraise@=\dimen137
-+)
-+("C:\Users\admin\AppData\Local\Programs\MiKTeX 2.9\tex/latex/amsmath\amsopn.sty
-+"
-+Package: amsopn 2016/03/08 v2.02 operator names
-+)
-+\inf@bad=\count167
-+LaTeX Info: Redefining \frac on input line 227.
-+\uproot@=\count168
-+\leftroot@=\count169
-+LaTeX Info: Redefining \overline on input line 389.
-+\classnum@=\count170
-+\DOTSCASE@=\count171
-+LaTeX Info: Redefining \ldots on input line 486.
-+LaTeX Info: Redefining \dots on input line 489.
-+LaTeX Info: Redefining \cdots on input line 610.
-+\Mathstrutbox@=\box45
-+\strutbox@=\box46
-+\big@size=\dimen138
-+LaTeX Font Info:    Redeclaring font encoding OML on input line 733.
-+LaTeX Font Info:    Redeclaring font encoding OMS on input line 734.
-+\macc@depth=\count172
-+\c@MaxMatrixCols=\count173
-+\dotsspace@=\muskip16
-+\c@parentequation=\count174
-+\dspbrk@lvl=\count175
-+\tag@help=\toks15
-+\row@=\count176
-+\column@=\count177
-+\maxfields@=\count178
-+\andhelp@=\toks16
-+\eqnshift@=\dimen139
-+\alignsep@=\dimen140
-+\tagshift@=\dimen141
-+\tagwidth@=\dimen142
-+\totwidth@=\dimen143
-+\lineht@=\dimen144
-+\@envbody=\toks17
-+\multlinegap=\skip49
-+\multlinetaggap=\skip50
-+\mathdisplay@stack=\toks18
-+LaTeX Info: Redefining \[ on input line 2859.
-+LaTeX Info: Redefining \] on input line 2860.
-+)
-+LaTeX Font Info:    Trying to load font information for U+msa on input line 398
-+.
-+
-+("C:\Users\admin\AppData\Local\Programs\MiKTeX 2.9\tex/latex/amsfonts\umsa.fd"
-+File: umsa.fd 2013/01/14 v3.01 AMS symbols A
-+)
-+("C:\Users\admin\AppData\Local\Programs\MiKTeX 2.9\tex/latex/amsfonts\amsfonts.
-+sty"
-+Package: amsfonts 2013/01/14 v3.01 Basic AMSFonts support
-+\symAMSa=\mathgroup4
-+\symAMSb=\mathgroup5
-+LaTeX Font Info:    Redeclaring math symbol \hbar on input line 98.
-+LaTeX Font Info:    Overwriting math alphabet `\mathfrak' in version `bold'
-+(Font)                  U/euf/m/n --> U/euf/b/n on input line 106.
-+)
-+\copyins=\insert199
-+\abstractbox=\box47
-+\listisep=\skip51
-+\c@part=\count179
-+\c@section=\count180
-+\c@subsection=\count181
-+\c@subsubsection=\count182
-+\c@paragraph=\count183
-+\c@subparagraph=\count184
-+\c@figure=\count185
-+\c@table=\count186
-+\abovecaptionskip=\skip52
-+\belowcaptionskip=\skip53
-+\captionindent=\dimen145
-+\thm@style=\toks19
-+\thm@bodyfont=\toks20
-+\thm@headfont=\toks21
-+\thm@notefont=\toks22
-+\thm@headpunct=\toks23
-+\thm@preskip=\skip54
-+\thm@postskip=\skip55
-+\thm@headsep=\skip56
-+\dth@everypar=\toks24
-+)
-+("C:\Users\admin\AppData\Local\Programs\MiKTeX 2.9\tex/latex/float\float.sty"
-+Package: float 2001/11/08 v1.3d Float enhancements (AL)
-+\c@float@type=\count187
-+\float@exts=\toks25
-+\float@box=\box48
-+\@float@everytoks=\toks26
-+\@floatcapt=\box49
-+)
-+("C:\Users\admin\AppData\Local\Programs\MiKTeX 2.9\tex/latex/base\fontenc.sty"
-+Package: fontenc 2020/02/11 v2.0o Standard LaTeX package
-+)
-+("C:\Users\admin\AppData\Local\Programs\MiKTeX 2.9\tex/latex/geometry\geometry.
-+sty"
-+Package: geometry 2020/01/02 v5.9 Page Geometry
-+
-+("C:\Users\admin\AppData\Local\Programs\MiKTeX 2.9\tex/latex/graphics\keyval.st
-+y"
-+Package: keyval 2014/10/28 v1.15 key=value parser (DPC)
-+\KV@toks@=\toks27
-+)
-+("C:\Users\admin\AppData\Local\Programs\MiKTeX 2.9\tex/generic/iftex\ifvtex.sty
-+"
-+Package: ifvtex 2019/10/25 v1.7 ifvtex legacy package. Use iftex instead.
-+ ("C:\Users\admin\AppData\Local\Programs\MiKTeX 2.9\tex/generic/iftex\iftex.sty
-+"
-+Package: iftex 2019/11/07 v1.0c TeX engine tests
-+))
-+\Gm@cnth=\count188
-+\Gm@cntv=\count189
-+\c@Gm@tempcnt=\count190
-+\Gm@bindingoffset=\dimen146
-+\Gm@wd@mp=\dimen147
-+\Gm@odd@mp=\dimen148
-+\Gm@even@mp=\dimen149
-+\Gm@layoutwidth=\dimen150
-+\Gm@layoutheight=\dimen151
-+\Gm@layouthoffset=\dimen152
-+\Gm@layoutvoffset=\dimen153
-+\Gm@dimlist=\toks28
-+
-+("C:\Users\admin\AppData\Local\Programs\MiKTeX 2.9\tex/latex/geometry\geometry.
-+cfg"))
-+("C:\Users\admin\AppData\Local\Programs\MiKTeX 2.9\tex/latex/parskip\parskip.st
-+y"
-+Package: parskip 2020-01-22 v2.0d non-zero parskip adjustments
-+
-+("C:\Users\admin\AppData\Local\Programs\MiKTeX 2.9\tex/latex/kvoptions\kvoption
-+s.sty"
-+Package: kvoptions 2019/11/29 v3.13 Key value format for package options (HO)
-+
-+("C:\Users\admin\AppData\Local\Programs\MiKTeX 2.9\tex/generic/ltxcmds\ltxcmds.
-+sty"
-+Package: ltxcmds 2019/12/15 v1.24 LaTeX kernel commands for general use (HO)
-+)
-+("C:\Users\admin\AppData\Local\Programs\MiKTeX 2.9\tex/generic/kvsetkeys\kvsetk
-+eys.sty"
-+Package: kvsetkeys 2019/12/15 v1.18 Key value parser (HO)
-+))
-+("C:\Users\admin\AppData\Local\Programs\MiKTeX 2.9\tex/latex/etoolbox\etoolbox.
-+sty"
-+Package: etoolbox 2019/09/21 v2.5h e-TeX tools for LaTeX (JAW)
-+\etb@tempcnta=\count191
-+)
-+Couldn't patch \@starttoc
-+)
-+("C:\Users\admin\AppData\Local\Programs\MiKTeX 2.9\tex/latex/amsfonts\amssymb.s
-+ty"
-+Package: amssymb 2013/01/14 v3.01 AMS font symbols
-+)
-+("C:\Users\admin\AppData\Local\Programs\MiKTeX 2.9\tex/latex/titling\titling.st
-+y"
-+Package: titling 2009/09/04 v2.1d maketitle typesetting
-+\thanksmarkwidth=\skip57
-+\thanksmargin=\skip58
-+\droptitle=\skip59
-+)
-+("C:\Users\admin\AppData\Local\Programs\MiKTeX 2.9\tex/latex/tools\enumerate.st
-+y"
-+Package: enumerate 2015/07/23 v3.00 enumerate extensions (DPC)
-+\@enLab=\toks29
-+)
-+("C:\Users\admin\AppData\Local\Programs\MiKTeX 2.9\tex/latex/multirow\multirow.
-+sty"
-+Package: multirow 2019/05/31 v2.5 Span multiple rows of a table
-+\multirow@colwidth=\skip60
-+\multirow@cntb=\count192
-+\multirow@dima=\skip61
-+\bigstrutjot=\dimen154
-+)
-+("C:\Users\admin\AppData\Local\Programs\MiKTeX 2.9\tex/latex/graphics\graphics.
-+sty"
-+Package: graphics 2019/11/30 v1.4a Standard LaTeX Graphics (DPC,SPQR)
-+
-+("C:\Users\admin\AppData\Local\Programs\MiKTeX 2.9\tex/latex/graphics\trig.sty"
-+Package: trig 2016/01/03 v1.10 sin cos tan (DPC)
-+)
-+("C:\Users\admin\AppData\Local\Programs\MiKTeX 2.9\tex/latex/graphics-cfg\graph
-+ics.cfg"
-+File: graphics.cfg 2016/06/04 v1.11 sample graphics configuration
-+)
-+Package graphics Info: Driver file: pdftex.def on input line 105.
-+
-+("C:\Users\admin\AppData\Local\Programs\MiKTeX 2.9\tex/latex/graphics-def\pdfte
-+x.def"
-+File: pdftex.def 2018/01/08 v1.0l Graphics/color driver for pdftex
-+))
-+("C:\Users\admin\AppData\Local\Programs\MiKTeX 2.9\tex/latex/graphics\graphicx.
-+sty"
-+Package: graphicx 2019/11/30 v1.2a Enhanced LaTeX Graphics (DPC,SPQR)
-+\Gin@req@height=\dimen155
-+\Gin@req@width=\dimen156
-+)
-+("C:\Users\admin\AppData\Local\Programs\MiKTeX 2.9\tex/latex/caption\caption.st
-+y"
-+Package: caption 2020/10/26 v3.5g Customizing captions (AR)
-+
-+("C:\Users\admin\AppData\Local\Programs\MiKTeX 2.9\tex/latex/caption\caption3.s
-+ty"
-+Package: caption3 2020/10/21 v2.2e caption3 kernel (AR)
-+\captionmargin=\dimen157
-+\captionmargin@=\dimen158
-+\captionwidth=\dimen159
-+\caption@tempdima=\dimen160
-+\caption@indent=\dimen161
-+\caption@parindent=\dimen162
-+\caption@hangindent=\dimen163
-+Package caption Info: AMS or SMF document class detected.
-+
-+("C:\Users\admin\AppData\Local\Programs\MiKTeX 2.9\tex/latex/caption\caption-am
-+s-smf.sto"
-+File: caption-ams-smf.sto 2020/08/22 v2.0 Adaption of the caption package to th
-+e AMS and SMF document classes (AR)
-+))
-+\c@caption@flags=\count193
-+\c@continuedfloat=\count194
-+Package caption Info: float package is loaded.
-+)
-+("C:\Users\admin\AppData\Local\Programs\MiKTeX 2.9\tex/latex/tools\array.sty"
-+Package: array 2019/08/31 v2.4l Tabular extension package (FMi)
-+\col@sep=\dimen164
-+\ar@mcellbox=\box50
-+\extrarowheight=\dimen165
-+\NC@list=\toks30
-+\extratabsurround=\skip62
-+\backup@length=\skip63
-+\ar@cellbox=\box51
-+)
-+("C:\Users\admin\AppData\Local\Programs\MiKTeX 2.9\tex/latex/xcolor\xcolor.sty"
-+Package: xcolor 2016/05/11 v2.12 LaTeX color extensions (UK)
-+
-+("C:\Users\admin\AppData\Local\Programs\MiKTeX 2.9\tex/latex/graphics-cfg\color
-+.cfg"
-+File: color.cfg 2016/01/02 v1.6 sample color configuration
-+)
-+Package xcolor Info: Driver file: pdftex.def on input line 225.
-+Package xcolor Info: Model `cmy' substituted by `cmy0' on input line 1348.
-+Package xcolor Info: Model `hsb' substituted by `rgb' on input line 1352.
-+Package xcolor Info: Model `RGB' extended on input line 1364.
-+Package xcolor Info: Model `HTML' substituted by `rgb' on input line 1366.
-+Package xcolor Info: Model `Hsb' substituted by `hsb' on input line 1367.
-+Package xcolor Info: Model `tHsb' substituted by `hsb' on input line 1368.
-+Package xcolor Info: Model `HSB' substituted by `hsb' on input line 1369.
-+Package xcolor Info: Model `Gray' substituted by `gray' on input line 1370.
-+Package xcolor Info: Model `wave' substituted by `hsb' on input line 1371.
-+)
-+("C:\Users\admin\AppData\Local\Programs\MiKTeX 2.9\tex/latex/caption\subcaption
-+.sty"
-+Package: subcaption 2020/10/07 v1.3j Sub-captions (AR)
-+\c@subfigure=\count195
-+\c@subtable=\count196
-+)
-+("C:\Users\admin\AppData\Local\Programs\MiKTeX 2.9\tex/latex/l3backend\l3backen
-+d-pdfmode.def"
-+File: l3backend-pdfmode.def 2020-02-03 L3 backend support: PDF mode
-+\l__kernel_color_stack_int=\count197
-+\l__pdf_internal_box=\box52
-+) (C:/Users\admin\PycharmProjects\MoCaDR_proj1\auxil\report.aux)
-+\openout1 = `report.aux'.
-+
-+LaTeX Font Info:    Checking defaults for OML/cmm/m/it on input line 44.
-+LaTeX Font Info:    ... okay on input line 44.
-+LaTeX Font Info:    Checking defaults for OMS/cmsy/m/n on input line 44.
-+LaTeX Font Info:    ... okay on input line 44.
-+LaTeX Font Info:    Checking defaults for OT1/cmr/m/n on input line 44.
-+LaTeX Font Info:    ... okay on input line 44.
-+LaTeX Font Info:    Checking defaults for T1/cmr/m/n on input line 44.
-+LaTeX Font Info:    ... okay on input line 44.
-+LaTeX Font Info:    Checking defaults for TS1/cmr/m/n on input line 44.
-+LaTeX Font Info:    ... okay on input line 44.
-+LaTeX Font Info:    Checking defaults for OMX/cmex/m/n on input line 44.
-+LaTeX Font Info:    ... okay on input line 44.
-+LaTeX Font Info:    Checking defaults for U/cmr/m/n on input line 44.
-+LaTeX Font Info:    ... okay on input line 44.
-+LaTeX Font Info:    Trying to load font information for U+msa on input line 44.
-+
-+
-+("C:\Users\admin\AppData\Local\Programs\MiKTeX 2.9\tex/latex/amsfonts\umsa.fd"
-+File: umsa.fd 2013/01/14 v3.01 AMS symbols A
-+)
-+LaTeX Font Info:    Trying to load font information for U+msb on input line 44.
-+
-+("C:\Users\admin\AppData\Local\Programs\MiKTeX 2.9\tex/latex/amsfonts\umsb.fd"
-+File: umsb.fd 2013/01/14 v3.01 AMS symbols B
-+)
-+*geometry* driver: auto-detecting
-+*geometry* detected driver: pdftex
-+*geometry* verbose mode - [ preamble ] result:
-+* driver: pdftex
-+* paper: <default>
-+* layout: <same size as paper>
-+* layoutoffset:(h,v)=(0.0pt,0.0pt)
-+* modes: twoside 
-+* h-part:(L,W,R)=(73.71613pt, 430.00462pt, 110.57425pt)
-+* v-part:(T,H,B)=(95.39737pt, 556.47656pt, 143.09605pt)
-+* \paperwidth=614.295pt
-+* \paperheight=794.96999pt
-+* \textwidth=430.00462pt
-+* \textheight=556.47656pt
-+* \oddsidemargin=1.44614pt
-+* \evensidemargin=38.30426pt
-+* \topmargin=1.12738pt
-+* \headheight=8.0pt
-+* \headsep=14.0pt
-+* \topskip=10.0pt
-+* \footskip=12.0pt
-+* \marginparwidth=90.0pt
-+* \marginparsep=11.0pt
-+* \columnsep=10.0pt
-+* \skip\footins=7.0pt plus 11.0pt
-+* \hoffset=0.0pt
-+* \voffset=0.0pt
-+* \mag=1000
-+* \@twocolumnfalse
-+* \@twosidetrue
-+* \@mparswitchtrue
-+* \@reversemarginfalse
-+* (1in=72.27pt=25.4mm, 1cm=28.453pt)
-+
-+
-+("C:\Users\admin\AppData\Local\Programs\MiKTeX 2.9\tex/context/base/mkii\supp-p
-+df.mkii"
-+[Loading MPS to PDF converter (version 2006.09.02).]
-+\scratchcounter=\count198
-+\scratchdimen=\dimen166
-+\scratchbox=\box53
-+\nofMPsegments=\count266
-+\nofMParguments=\count267
-+\everyMPshowfont=\toks31
-+\MPscratchCnt=\count268
-+\MPscratchDim=\dimen167
-+\MPnumerator=\count269
-+\makeMPintoPDFobject=\count270
-+\everyMPtoPDFconversion=\toks32
-+)
-+("C:\Users\admin\AppData\Local\Programs\MiKTeX 2.9\tex/latex/epstopdf-pkg\epsto
-+pdf-base.sty"
-+Package: epstopdf-base 2020-01-24 v2.11 Base part for package epstopdf
-+Package epstopdf-base Info: Redefining graphics rule for `.eps' on input line 4
-+85.
-+)
-+Package caption Info: Begin \AtBeginDocument code.
-+Package caption Info: End \AtBeginDocument code.
-+
-+
-+LaTeX Warning: No \author given.
-+
-+[1{C:/Users/admin/AppData/Local/MiKTeX/2.9/pdftex/config/pdftex.map}]
-+LaTeX Font Info:    Trying to load font information for T1+cmss on input line 1
-+17.
-+
-+("C:\Users\admin\AppData\Local\Programs\MiKTeX 2.9\tex/latex/base\t1cmss.fd"
-+File: t1cmss.fd 2019/12/16 v2.5j Standard LaTeX font definitions
-+)
-+[2]
-+<./fig/svd1_1.png, id=26, 544.9158pt x 329.5512pt>
-+File: ./fig/svd1_1.png Graphic file (type png)
-+<use ./fig/svd1_1.png>
-+Package pdftex.def Info: ./fig/svd1_1.png  used on input line 191.
-+(pdftex.def)             Requested size: 234.30922pt x 141.70424pt.
-+
-+Overfull \hbox (19.30692pt too wide) in paragraph at lines 191--194
-+ [][] 
-+ []
-+
-+<./fig/svd1_2.png, id=28, 412.6617pt x 329.5512pt>
-+File: ./fig/svd1_2.png Graphic file (type png)
-+<use ./fig/svd1_2.png>
-+Package pdftex.def Info: ./fig/svd1_2.png  used on input line 197.
-+(pdftex.def)             Requested size: 177.44106pt x 141.70424pt.
-+[3 <./fig/svd1_1.png> <./fig/svd1_2.png>]
-+<fig/svd1_r_w.png, id=34, 1084.05pt x 722.7pt>
-+File: fig/svd1_r_w.png Graphic file (type png)
-+<use fig/svd1_r_w.png>
-+Package pdftex.def Info: fig/svd1_r_w.png  used on input line 231.
-+(pdftex.def)             Requested size: 487.818pt x 325.21199pt.
-+
-+Overfull \hbox (57.81337pt too wide) in paragraph at lines 231--233
-+ [][] 
-+ []
-+
-+report.tex:238: Undefined control sequence.
-+l.238 \toprule
-+              
-+The control sequence at the end of the top line
-+of your error message was never \def'ed. If you have
-+misspelled it (e.g., `\hobx'), type `I' and the correct
-+spelling (e.g., `I\hbox'). Otherwise just continue,
-+and I'll forget about whatever was undefined.
-+
-+report.tex:240: Undefined control sequence.
-+<recently read> \midrule 
-+                         
-+l.240 \midrule
-+              
-+The control sequence at the end of the top line
-+of your error message was never \def'ed. If you have
-+misspelled it (e.g., `\hobx'), type `I' and the correct
-+spelling (e.g., `I\hbox'). Otherwise just continue,
-+and I'll forget about whatever was undefined.
-+
-+report.tex:247: Undefined control sequence.
-+<recently read> \bottomrule 
-+                            
-+l.247 \bottomrule
-+                 
-+The control sequence at the end of the top line
-+of your error message was never \def'ed. If you have
-+misspelled it (e.g., `\hobx'), type `I' and the correct
-+spelling (e.g., `I\hbox'). Otherwise just continue,
-+and I'll forget about whatever was undefined.
-+
-+[4 <./fig/svd1_r_w.png>]
-+<./fig/svd2_1.png, id=39, 544.9158pt x 329.5512pt>
-+File: ./fig/svd2_1.png Graphic file (type png)
-+<use ./fig/svd2_1.png>
-+Package pdftex.def Info: ./fig/svd2_1.png  used on input line 276.
-+(pdftex.def)             Requested size: 234.30922pt x 141.70424pt.
-+
-+Overfull \hbox (19.30692pt too wide) in paragraph at lines 276--279
-+ [][] 
-+ []
-+
-+<./fig/svd2_2.png, id=40, 412.6617pt x 329.5512pt>
-+File: ./fig/svd2_2.png Graphic file (type png)
-+<use ./fig/svd2_2.png>
-+Package pdftex.def Info: ./fig/svd2_2.png  used on input line 282.
-+(pdftex.def)             Requested size: 177.44106pt x 141.70424pt.
-+<./fig/svd2_r_w.png, id=41, 1084.05pt x 722.7pt>
-+File: ./fig/svd2_r_w.png Graphic file (type png)
-+<use ./fig/svd2_r_w.png>
-+Package pdftex.def Info: ./fig/svd2_r_w.png  used on input line 298.
-+(pdftex.def)             Requested size: 487.818pt x 325.21199pt.
-+
-+Overfull \hbox (57.81337pt too wide) in paragraph at lines 298--299
-+ [][] 
-+ []
-+
-+[5 <./fig/svd2_1.png> <./fig/svd2_2.png>]
-+report.tex:303: Undefined control sequence.
-+l.303 \toprule
-+              
-+The control sequence at the end of the top line
-+of your error message was never \def'ed. If you have
-+misspelled it (e.g., `\hobx'), type `I' and the correct
-+spelling (e.g., `I\hbox'). Otherwise just continue,
-+and I'll forget about whatever was undefined.
-+
-+report.tex:305: Undefined control sequence.
-+<recently read> \midrule 
-+                         
-+l.305 \midrule
-+              
-+The control sequence at the end of the top line
-+of your error message was never \def'ed. If you have
-+misspelled it (e.g., `\hobx'), type `I' and the correct
-+spelling (e.g., `I\hbox'). Otherwise just continue,
-+and I'll forget about whatever was undefined.
-+
-+report.tex:312: Undefined control sequence.
-+<recently read> \bottomrule 
-+                            
-+l.312 \bottomrule
-+                 
-+The control sequence at the end of the top line
-+of your error message was never \def'ed. If you have
-+misspelled it (e.g., `\hobx'), type `I' and the correct
-+spelling (e.g., `I\hbox'). Otherwise just continue,
-+and I'll forget about whatever was undefined.
-+
-+<./fig/nmf_1.png, id=47, 544.9158pt x 329.5512pt>
-+File: ./fig/nmf_1.png Graphic file (type png)
-+<use ./fig/nmf_1.png>
-+Package pdftex.def Info: ./fig/nmf_1.png  used on input line 325.
-+(pdftex.def)             Requested size: 234.30922pt x 141.70424pt.
-+
-+Overfull \hbox (19.30692pt too wide) in paragraph at lines 325--328
-+ [][] 
-+ []
-+
-+<./fig/nmf_2.png, id=48, 412.6617pt x 329.5512pt>
-+File: ./fig/nmf_2.png Graphic file (type png)
-+<use ./fig/nmf_2.png>
-+Package pdftex.def Info: ./fig/nmf_2.png  used on input line 331.
-+(pdftex.def)             Requested size: 177.44106pt x 141.70424pt.
-+
-+Underfull \vbox (badness 4341) has occurred while \output is active []
-+
-+ [6 <./fig/svd2_r_w.png>]
-+report.tex:352: Undefined control sequence.
-+l.352 \toprule
-+              
-+The control sequence at the end of the top line
-+of your error message was never \def'ed. If you have
-+misspelled it (e.g., `\hobx'), type `I' and the correct
-+spelling (e.g., `I\hbox'). Otherwise just continue,
-+and I'll forget about whatever was undefined.
-+
-+report.tex:354: Undefined control sequence.
-+<recently read> \midrule 
-+                         
-+l.354 \midrule
-+              
-+The control sequence at the end of the top line
-+of your error message was never \def'ed. If you have
-+misspelled it (e.g., `\hobx'), type `I' and the correct
-+spelling (e.g., `I\hbox'). Otherwise just continue,
-+and I'll forget about whatever was undefined.
-+
-+report.tex:361: Undefined control sequence.
-+<recently read> \bottomrule 
-+                            
-+l.361 \bottomrule
-+                 
-+The control sequence at the end of the top line
-+of your error message was never \def'ed. If you have
-+misspelled it (e.g., `\hobx'), type `I' and the correct
-+spelling (e.g., `I\hbox'). Otherwise just continue,
-+and I'll forget about whatever was undefined.
-+
-+<./fig/nmf_r_w.png, id=53, 1084.05pt x 722.7pt>
-+File: ./fig/nmf_r_w.png Graphic file (type png)
-+<use ./fig/nmf_r_w.png>
-+Package pdftex.def Info: ./fig/nmf_r_w.png  used on input line 371.
-+(pdftex.def)             Requested size: 487.818pt x 325.21199pt.
-+
-+Overfull \hbox (57.81337pt too wide) in paragraph at lines 371--372
-+ [][] 
-+ []
-+
-+
-+Underfull \vbox (badness 1975) has occurred while \output is active []
-+
-+ [7 <./fig/nmf_1.png> <./fig/nmf_2.png>]
-+File: ./fig/svd1_1.png Graphic file (type png)
-+<use ./fig/svd1_1.png>
-+Package pdftex.def Info: ./fig/svd1_1.png  used on input line 385.
-+(pdftex.def)             Requested size: 234.30922pt x 141.70424pt.
-+
-+Overfull \hbox (19.30692pt too wide) in paragraph at lines 385--388
-+ [][] 
-+ []
-+
-+File: ./fig/svd1_2.png Graphic file (type png)
-+<use ./fig/svd1_2.png>
-+Package pdftex.def Info: ./fig/svd1_2.png  used on input line 391.
-+(pdftex.def)             Requested size: 177.44106pt x 141.70424pt.
-+[8 <./fig/nmf_r_w.png>] [9]
-+(C:/Users\admin\PycharmProjects\MoCaDR_proj1\auxil\report.aux) ) 
-+Here is how much of TeX's memory you used:
-+ 6283 strings out of 481556
-+ 90971 string characters out of 2913869
-+ 335988 words of memory out of 3000000
-+ 21270 multiletter control sequences out of 15000+200000
-+ 552539 words of font info for 78 fonts, out of 3000000 for 9000
-+ 1302 hyphenation exceptions out of 8191
-+ 39i,10n,43p,815b,294s stack positions out of 5000i,500n,10000p,200000b,50000s
-+ <C:\Users\admi
-+n\AppData\Local\MiKTeX\2.9\fonts/pk/ljfour/jknappen/ec/dpi600\ecss1095.pk> <C:\
-+Users\admin\AppData\Local\MiKTeX\2.9\fonts/pk/ljfour/jknappen/ec/dpi600\ecrm080
-+0.pk> <C:\Users\admin\AppData\Local\MiKTeX\2.9\fonts/pk/ljfour/jknappen/ec/dpi6
-+00\ecti1095.pk> <C:\Users\admin\AppData\Local\MiKTeX\2.9\fonts/pk/ljfour/jknapp
-+en/ec/dpi600\ecbx1095.pk> <C:\Users\admin\AppData\Local\MiKTeX\2.9\fonts/pk/ljf
-+our/jknappen/ec/dpi600\eccc1095.pk> <C:\Users\admin\AppData\Local\MiKTeX\2.9\fo
-+nts/pk/ljfour/jknappen/ec/dpi600\ecrm1095.pk> <C:\Users\admin\AppData\Local\MiK
-+TeX\2.9\fonts/pk/ljfour/jknappen/ec/dpi600\ecrm1200.pk> <C:\Users\admin\AppData
-+\Local\MiKTeX\2.9\fonts/pk/ljfour/jknappen/ec/dpi600\ecrm1728.pk><C:/Users/admi
-+n/AppData/Local/Programs/MiKTeX 2.9/fonts/type1/public/amsfonts/cm/cmex10.pfb><
-+C:/Users/admin/AppData/Local/Programs/MiKTeX 2.9/fonts/type1/public/amsfonts/cm
-+/cmmi10.pfb><C:/Users/admin/AppData/Local/Programs/MiKTeX 2.9/fonts/type1/publi
-+c/amsfonts/cm/cmmi8.pfb><C:/Users/admin/AppData/Local/Programs/MiKTeX 2.9/fonts
-+/type1/public/amsfonts/cm/cmmib10.pfb><C:/Users/admin/AppData/Local/Programs/Mi
-+KTeX 2.9/fonts/type1/public/amsfonts/cm/cmr10.pfb><C:/Users/admin/AppData/Local
-+/Programs/MiKTeX 2.9/fonts/type1/public/amsfonts/cm/cmr6.pfb><C:/Users/admin/Ap
-+pData/Local/Programs/MiKTeX 2.9/fonts/type1/public/amsfonts/cm/cmr8.pfb><C:/Use
-+rs/admin/AppData/Local/Programs/MiKTeX 2.9/fonts/type1/public/amsfonts/cm/cmsy1
-+0.pfb><C:/Users/admin/AppData/Local/Programs/MiKTeX 2.9/fonts/type1/public/amsf
-+onts/cm/cmsy6.pfb><C:/Users/admin/AppData/Local/Programs/MiKTeX 2.9/fonts/type1
-+/public/amsfonts/cm/cmsy8.pfb>
-+Output written on C:/Users\admin\PycharmProjects\MoCaDR_proj1\out\report.pdf (9
-+ pages, 581368 bytes).
-+PDF statistics:
-+ 322 PDF objects out of 1000 (max. 8388607)
-+ 0 named destinations out of 1000 (max. 500000)
-+ 46 words of extra memory for PDF output out of 10000 (max. 10000000)
-+
-Index: auxil/report.aux
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/auxil/report.aux b/auxil/report.aux
-new file mode 100644
---- /dev/null	(date 1649535630686)
-+++ b/auxil/report.aux	(date 1649535630686)
-@@ -0,0 +1,27 @@
-+\relax 
-+\@writefile{toc}{\contentsline {section}{\tocsection {}{1}{Introduction}}{1}\protected@file@percent }
-+\@writefile{toc}{\contentsline {subsection}{\tocsubsection {}{}{Statement of the problem}}{1}\protected@file@percent }
-+\@writefile{toc}{\contentsline {subsection}{\tocsubsection {}{}{Description of methods}}{1}\protected@file@percent }
-+\@writefile{toc}{\contentsline {subsubsection}{\tocsubsubsection {}{}{SVD1}}{1}\protected@file@percent }
-+\@writefile{toc}{\contentsline {subsubsection}{\tocsubsubsection {}{}{SVD2}}{1}\protected@file@percent }
-+\@writefile{toc}{\contentsline {subsubsection}{\tocsubsubsection {}{}{NMF}}{1}\protected@file@percent }
-+\@writefile{toc}{\contentsline {subsubsection}{\tocsubsubsection {}{}{SGD}}{2}\protected@file@percent }
-+\@writefile{toc}{\contentsline {section}{\tocsection {}{2}{Implementation}}{2}\protected@file@percent }
-+\@writefile{toc}{\contentsline {subsection}{\tocsubsection {}{}{Description of the data}}{2}\protected@file@percent }
-+\@writefile{toc}{\contentsline {subsection}{\tocsubsection {}{}{Performing methods}}{2}\protected@file@percent }
-+\@writefile{toc}{\contentsline {subsection}{\tocsubsection {}{}{Quality of the system}}{2}\protected@file@percent }
-+\@writefile{toc}{\contentsline {subsection}{\tocsubsection {}{}{Imputing the missing data}}{3}\protected@file@percent }
-+\@writefile{toc}{\contentsline {section}{\tocsection {}{3}{Parameters tuning and results}}{3}\protected@file@percent }
-+\@writefile{toc}{\contentsline {subsection}{\tocsubsection {}{}{SVD1}}{3}\protected@file@percent }
-+\providecommand*\caption@xref[2]{\@setref\relax\@undefined{#1}}
-+\newlabel{fig:figure}{{\caption@xref {fig:figure}{ on input line 232}}{4}}
-+\@writefile{toc}{\contentsline {subsection}{\tocsubsection {}{}{SVD2}}{5}\protected@file@percent }
-+\@writefile{toc}{\contentsline {subsection}{\tocsubsection {}{}{NMF}}{6}\protected@file@percent }
-+\newlabel{tocindent-1}{0pt}
-+\newlabel{tocindent0}{15.98535pt}
-+\newlabel{tocindent1}{19.35791pt}
-+\newlabel{tocindent2}{31.97072pt}
-+\newlabel{tocindent3}{0pt}
-+\@writefile{toc}{\contentsline {subsection}{\tocsubsection {}{}{SGD}}{8}\protected@file@percent }
-+\@writefile{toc}{\contentsline {section}{\tocsection {}{4}{}}{9}\protected@file@percent }
-+\@writefile{toc}{\contentsline {section}{\tocsection {}{5}{Conclusions}}{9}\protected@file@percent }
-Index: .idea/workspace.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"62d33fe8-2ec7-4d31-9bba-7fa36bc76fcb\" name=\"Changes\" comment=\"computing results\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Report/auxil/report.aux\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Report/auxil/report.aux\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Report/auxil/report.log\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Report/auxil/report.log\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Report/out/report.pdf\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Report/out/report.pdf\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Report/out/report.synctex.gz\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Report/out/report.synctex.gz\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Report/report.tex\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Report/report.tex\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/presenting_results.ipynb\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/presenting_results.ipynb\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"RMarkdown.document\" />\r\n        <option value=\"Jupyter Notebook\" />\r\n        <option value=\"Python Script\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitSEFilterConfiguration\">\r\n    <file-type-list>\r\n      <filtered-out-file-type name=\"LOCAL_BRANCH\" />\r\n      <filtered-out-file-type name=\"REMOTE_BRANCH\" />\r\n      <filtered-out-file-type name=\"TAG\" />\r\n      <filtered-out-file-type name=\"COMMIT_BY_MESSAGE\" />\r\n    </file-type-list>\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"267VjyGJ9wr8oG7c6vyJzNQTvFk\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\">\r\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">\r\n    <property name=\"ASKED_ADD_EXTERNAL_FILES\" value=\"true\" />\r\n    <property name=\"ASKED_SHARE_PROJECT_CONFIGURATION_FILES\" value=\"true\" />\r\n    <property name=\"RunOnceActivity.OpenProjectViewOnStart\" value=\"true\" />\r\n    <property name=\"RunOnceActivity.ShowReadmeOnStart\" value=\"true\" />\r\n    <property name=\"SHARE_PROJECT_CONFIGURATION_FILES\" value=\"true\" />\r\n    <property name=\"WebServerToolWindowFactoryState\" value=\"false\" />\r\n    <property name=\"last_opened_file_path\" value=\"$PROJECT_DIR$/Report\" />\r\n    <property name=\"node.js.detected.package.eslint\" value=\"true\" />\r\n    <property name=\"node.js.detected.package.tslint\" value=\"true\" />\r\n    <property name=\"node.js.selected.package.eslint\" value=\"(autodetect)\" />\r\n    <property name=\"node.js.selected.package.tslint\" value=\"(autodetect)\" />\r\n    <property name=\"settings.editor.selected.configurable\" value=\"configurable.group.language\" />\r\n  </component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"D:\\Studia\\MoCaDR_proj1\\Report\" />\r\n      <recent name=\"D:\\Studia\\MoCaDR_proj1\" />\r\n    </key>\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"D:\\Studia\\MoCaDR_proj1\\Report\\fig\\syf\" />\r\n      <recent name=\"D:\\Studia\\MoCaDR_proj1\\Results\\Syf\" />\r\n      <recent name=\"D:\\Studia\\MoCaDR_proj1\\Report\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\" selected=\"LaTeX.report\">\r\n    <configuration name=\"report\" type=\"LATEX_RUN_CONFIGURATION\" factoryName=\"LaTeX configuration factory\" temporary=\"true\">\r\n      <texify>\r\n        <compiler>PDFLATEX</compiler>\r\n        <compiler-path />\r\n        <sumatra-path />\r\n        <pdf-viewer>SUMATRA</pdf-viewer>\r\n        <viewer-command />\r\n        <compiler-arguments />\r\n        <envs />\r\n        <main-file>$PROJECT_DIR$/Report/report.tex</main-file>\r\n        <output-path>$PROJECT_DIR$/Report/out</output-path>\r\n        <auxil-path>$PROJECT_DIR$/Report/auxil</auxil-path>\r\n        <compile-twice>false</compile-twice>\r\n        <output-format>PDF</output-format>\r\n        <latex-distribution>MIKTEX</latex-distribution>\r\n        <has-been-run>true</has-been-run>\r\n        <bib-run-config>[]</bib-run-config>\r\n        <makeindex-run-config>[]</makeindex-run-config>\r\n      </texify>\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"compute_results3\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"MoCaDR_proj1\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/src\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/src/compute_results3.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"manipulating_datasets\" type=\"PythonConfigurationType\" factoryName=\"Python\" nameIsGenerated=\"true\">\r\n      <module name=\"MoCaDR_proj1\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"D:\\Studia\\MoCaDR_proj1\\manipulating_datasets.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"performing_algorithms\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"MoCaDR_proj1\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/src\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/src/performing_algorithms.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"splitting_data\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"MoCaDR_proj1\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/splitting_data.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <list>\r\n      <item itemvalue=\"LaTeX.report\" />\r\n      <item itemvalue=\"Python.manipulating_datasets\" />\r\n      <item itemvalue=\"Python.compute_results3\" />\r\n      <item itemvalue=\"Python.performing_algorithms\" />\r\n      <item itemvalue=\"Python.splitting_data\" />\r\n    </list>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"LaTeX.report\" />\r\n        <item itemvalue=\"Python.splitting_data\" />\r\n        <item itemvalue=\"Python.performing_algorithms\" />\r\n        <item itemvalue=\"Python.compute_results3\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"SvnConfiguration\">\r\n    <configuration>C:\\Users\\dmika\\AppData\\Roaming\\Subversion</configuration>\r\n  </component>\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"62d33fe8-2ec7-4d31-9bba-7fa36bc76fcb\" name=\"Changes\" comment=\"\" />\r\n      <created>1646774751311</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1646774751311</updated>\r\n      <workItem from=\"1646774754054\" duration=\"26000\" />\r\n      <workItem from=\"1646774814002\" duration=\"835000\" />\r\n      <workItem from=\"1646775670059\" duration=\"47000\" />\r\n      <workItem from=\"1646775727774\" duration=\"757000\" />\r\n      <workItem from=\"1646816479175\" duration=\"461000\" />\r\n      <workItem from=\"1646896158453\" duration=\"762000\" />\r\n      <workItem from=\"1646896945682\" duration=\"630000\" />\r\n      <workItem from=\"1646897595717\" duration=\"2651000\" />\r\n      <workItem from=\"1646900622776\" duration=\"425000\" />\r\n      <workItem from=\"1646915517163\" duration=\"449000\" />\r\n      <workItem from=\"1646915983800\" duration=\"240000\" />\r\n      <workItem from=\"1646916258164\" duration=\"389000\" />\r\n      <workItem from=\"1646916663441\" duration=\"393000\" />\r\n      <workItem from=\"1646933050771\" duration=\"1105000\" />\r\n      <workItem from=\"1646936230049\" duration=\"1064000\" />\r\n      <workItem from=\"1647027781891\" duration=\"1279000\" />\r\n      <workItem from=\"1647071928401\" duration=\"2390000\" />\r\n      <workItem from=\"1647181792640\" duration=\"2955000\" />\r\n      <workItem from=\"1647276453225\" duration=\"264000\" />\r\n      <workItem from=\"1647276734574\" duration=\"7710000\" />\r\n      <workItem from=\"1647699257802\" duration=\"1713000\" />\r\n      <workItem from=\"1647774897107\" duration=\"5656000\" />\r\n      <workItem from=\"1648326375030\" duration=\"985000\" />\r\n      <workItem from=\"1648327394372\" duration=\"485000\" />\r\n      <workItem from=\"1648481964443\" duration=\"4660000\" />\r\n      <workItem from=\"1648576643019\" duration=\"4941000\" />\r\n      <workItem from=\"1648885683106\" duration=\"2799000\" />\r\n      <workItem from=\"1649100586613\" duration=\"401000\" />\r\n      <workItem from=\"1649142695450\" duration=\"1248000\" />\r\n      <workItem from=\"1649154173111\" duration=\"1535000\" />\r\n      <workItem from=\"1649225210342\" duration=\"2520000\" />\r\n      <workItem from=\"1649252977347\" duration=\"33000\" />\r\n      <workItem from=\"1649256897698\" duration=\"20000\" />\r\n      <workItem from=\"1649263859461\" duration=\"4502000\" />\r\n      <workItem from=\"1649340598453\" duration=\"3005000\" />\r\n      <workItem from=\"1649345448932\" duration=\"596000\" />\r\n      <workItem from=\"1649407349351\" duration=\"1672000\" />\r\n      <workItem from=\"1649429201664\" duration=\"3019000\" />\r\n      <workItem from=\"1649438274438\" duration=\"1751000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"a\">\r\n      <created>1646775274557</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646775274557</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"init commit\">\r\n      <created>1646775361377</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646775361377</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"init commit\">\r\n      <created>1646775521666</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646775521666</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"init commit\">\r\n      <created>1646775784756</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646775784756</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"init commit\">\r\n      <created>1646775870305</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646775870305</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"Adding dataset\">\r\n      <created>1646816860800</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646816860800</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"Setting up LaTeX\">\r\n      <created>1646898995949</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646898995949</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00008\" summary=\"Setting up LaTeX\">\r\n      <created>1646900639924</created>\r\n      <option name=\"number\" value=\"00008\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646900639924</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00009\" summary=\"Cleaning data\">\r\n      <created>1646934068924</created>\r\n      <option name=\"number\" value=\"00009\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646934068924</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00010\" summary=\"Cleaning data\">\r\n      <created>1647028888721</created>\r\n      <option name=\"number\" value=\"00010\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647028888721</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00011\" summary=\"Cleaning data\">\r\n      <created>1647029054319</created>\r\n      <option name=\"number\" value=\"00011\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647029054319</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00012\" summary=\"Tamarka testing\">\r\n      <created>1647163191686</created>\r\n      <option name=\"number\" value=\"00012\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00012\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647163191686</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00013\" summary=\"Experimenting with 'NaN' values\">\r\n      <created>1647168883206</created>\r\n      <option name=\"number\" value=\"00013\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00013\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647168883206</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00014\" summary=\"Experimenting with 'NaN' values\">\r\n      <created>1647175373237</created>\r\n      <option name=\"number\" value=\"00014\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00014\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647175373237</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00015\" summary=\"Removing duplicated packages\">\r\n      <created>1647175629524</created>\r\n      <option name=\"number\" value=\"00015\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00015\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647175629524</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00016\" summary=\"Testing methods\">\r\n      <created>1647184013664</created>\r\n      <option name=\"number\" value=\"00016\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00016\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647184013664</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00017\" summary=\"Testing methods\">\r\n      <created>1647184756535</created>\r\n      <option name=\"number\" value=\"00017\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00017\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647184756535</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00018\" summary=\"SVD opis Tamarka\">\r\n      <created>1647698852885</created>\r\n      <option name=\"number\" value=\"00018\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00018\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647698852885</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00019\" summary=\"SVD opis Tamarka\">\r\n      <created>1647699044053</created>\r\n      <option name=\"number\" value=\"00019\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00019\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647699044053</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00020\" summary=\"SVD opis Tamarka\">\r\n      <created>1647699173625</created>\r\n      <option name=\"number\" value=\"00020\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00020\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647699173625</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00021\" summary=\"Testing SVD2\">\r\n      <created>1648327858794</created>\r\n      <option name=\"number\" value=\"00021\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00021\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1648327858794</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00022\" summary=\"computing results\">\r\n      <created>1649155805892</created>\r\n      <option name=\"number\" value=\"00022\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00022\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1649155805892</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00023\" summary=\"Computing stop condition svd2\">\r\n      <created>1649345310151</created>\r\n      <option name=\"number\" value=\"00023\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00023\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1649345310151</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00024\" summary=\"Computing stop condition svd2\">\r\n      <created>1649408687739</created>\r\n      <option name=\"number\" value=\"00024\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00024\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1649408687739</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00025\" summary=\"Presenting results for NMF\">\r\n      <created>1649408979238</created>\r\n      <option name=\"number\" value=\"00025\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00025\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1649408979239</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00026\" summary=\"computing results\">\r\n      <created>1649434249565</created>\r\n      <option name=\"number\" value=\"00026\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00026\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1649434249565</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00027\" summary=\"computing results\">\r\n      <created>1649492068004</created>\r\n      <option name=\"number\" value=\"00027\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00027\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1649492068004</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"28\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <option name=\"ADD_EXTERNAL_FILES_SILENTLY\" value=\"true\" />\r\n    <MESSAGE value=\"a\" />\r\n    <MESSAGE value=\"init commit\" />\r\n    <MESSAGE value=\"Adding dataset\" />\r\n    <MESSAGE value=\"Setting up LaTeX\" />\r\n    <MESSAGE value=\"Cleaning data\" />\r\n    <MESSAGE value=\"Tamarka testing\" />\r\n    <MESSAGE value=\"Experimenting with 'NaN' values\" />\r\n    <MESSAGE value=\"Removing duplicated packages\" />\r\n    <MESSAGE value=\"Testing methods\" />\r\n    <MESSAGE value=\"SVD opis Tamarka\" />\r\n    <MESSAGE value=\"Testing SVD2\" />\r\n    <MESSAGE value=\"Computing stop condition svd2\" />\r\n    <MESSAGE value=\"Presenting results for NMF\" />\r\n    <MESSAGE value=\"computing results\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"computing results\" />\r\n  </component>\r\n  <component name=\"com.intellij.coverage.CoverageDataManagerImpl\">\r\n    <SUITE FILE_PATH=\"coverage/main_py$splitting_manipulating_data.coverage\" NAME=\"splitting_manipulating_data Coverage Results\" MODIFIED=\"1648627073782\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/src\" />\r\n    <SUITE FILE_PATH=\"coverage/main_py$algorithm_functions.coverage\" NAME=\"algorithm_functions Coverage Results\" MODIFIED=\"1648826781925\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/src\" />\r\n    <SUITE FILE_PATH=\"coverage/main_py$computing_results.coverage\" NAME=\"computing_results Coverage Results\" MODIFIED=\"1648727756891\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/src\" />\r\n    <SUITE FILE_PATH=\"coverage/main_py$algorithms_script.coverage\" NAME=\"performing_algorithms Coverage Results\" MODIFIED=\"1647535849226\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/src\" />\r\n    <SUITE FILE_PATH=\"coverage/main_py$splitting_manipulating_data__1_.coverage\" NAME=\"splitting_manipulating_data (1) Coverage Results\" MODIFIED=\"1647870795349\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/src\" />\r\n    <SUITE FILE_PATH=\"coverage/main_py$a.coverage\" NAME=\"a Coverage Results\" MODIFIED=\"1648057368569\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/src\" />\r\n    <SUITE FILE_PATH=\"coverage/main_py$compute_results3.coverage\" NAME=\"compute_results3 Coverage Results\" MODIFIED=\"1649268385203\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/src\" />\r\n    <SUITE FILE_PATH=\"coverage/MoCaDR_proj1$splitting_data.coverage\" NAME=\"splitting_data Coverage Results\" MODIFIED=\"1647174411611\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\r\n    <SUITE FILE_PATH=\"coverage/main_py$performing_algorithms__1_.coverage\" NAME=\"performing_algorithms (1) Coverage Results\" MODIFIED=\"1648057220868\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/src\" />\r\n    <SUITE FILE_PATH=\"coverage/main_py$performing_algorithms.coverage\" NAME=\"performing_algorithms Coverage Results\" MODIFIED=\"1648365686686\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/src\" />\r\n  </component>\r\n</project>
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/.idea/workspace.xml b/.idea/workspace.xml
---- a/.idea/workspace.xml	(revision 7551f0ee5fbc5d43453af9d58769adbcb2bdfdb2)
-+++ b/.idea/workspace.xml	(date 1649533543414)
-@@ -4,12 +4,17 @@
-     <option name="autoReloadType" value="SELECTIVE" />
-   </component>
-   <component name="ChangeListManager">
--    <list default="true" id="62d33fe8-2ec7-4d31-9bba-7fa36bc76fcb" name="Changes" comment="computing results">
-+    <list default="true" id="62d33fe8-2ec7-4d31-9bba-7fa36bc76fcb" name="Changes" comment="planning">
-+      <change afterPath="$PROJECT_DIR$/auxil/report.aux" afterDir="false" />
-+      <change afterPath="$PROJECT_DIR$/auxil/report.log" afterDir="false" />
-+      <change afterPath="$PROJECT_DIR$/out/report.pdf" afterDir="false" />
-+      <change afterPath="$PROJECT_DIR$/out/report.synctex.gz" afterDir="false" />
-+      <change beforePath="$PROJECT_DIR$/.idea/MoCaDR_proj1.iml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/MoCaDR_proj1.iml" afterDir="false" />
-+      <change beforePath="$PROJECT_DIR$/.idea/misc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/misc.xml" afterDir="false" />
-+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_02_04_2022_09_45_[Changes]/shelved.patch" beforeDir="false" />
-+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_02_04_2022_09_45__Changes_.xml" beforeDir="false" />
-+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_09_04_2022_08_52__Changes_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_09_04_2022_08_52__Changes_.xml" afterDir="false" />
-       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
--      <change beforePath="$PROJECT_DIR$/Report/auxil/report.aux" beforeDir="false" afterPath="$PROJECT_DIR$/Report/auxil/report.aux" afterDir="false" />
--      <change beforePath="$PROJECT_DIR$/Report/auxil/report.log" beforeDir="false" afterPath="$PROJECT_DIR$/Report/auxil/report.log" afterDir="false" />
--      <change beforePath="$PROJECT_DIR$/Report/out/report.pdf" beforeDir="false" afterPath="$PROJECT_DIR$/Report/out/report.pdf" afterDir="false" />
--      <change beforePath="$PROJECT_DIR$/Report/out/report.synctex.gz" beforeDir="false" afterPath="$PROJECT_DIR$/Report/out/report.synctex.gz" afterDir="false" />
-       <change beforePath="$PROJECT_DIR$/Report/report.tex" beforeDir="false" afterPath="$PROJECT_DIR$/Report/report.tex" afterDir="false" />
-       <change beforePath="$PROJECT_DIR$/src/presenting_results.ipynb" beforeDir="false" afterPath="$PROJECT_DIR$/src/presenting_results.ipynb" afterDir="false" />
-     </list>
-@@ -22,8 +27,8 @@
-     <option name="RECENT_TEMPLATES">
-       <list>
-         <option value="RMarkdown.document" />
--        <option value="Jupyter Notebook" />
-         <option value="Python Script" />
-+        <option value="Jupyter Notebook" />
-       </list>
-     </option>
-   </component>
-@@ -56,26 +61,23 @@
-     <property name="RunOnceActivity.ShowReadmeOnStart" value="true" />
-     <property name="SHARE_PROJECT_CONFIGURATION_FILES" value="true" />
-     <property name="WebServerToolWindowFactoryState" value="false" />
--    <property name="last_opened_file_path" value="$PROJECT_DIR$/Report" />
-+    <property name="last_opened_file_path" value="$PROJECT_DIR$" />
-     <property name="node.js.detected.package.eslint" value="true" />
-     <property name="node.js.detected.package.tslint" value="true" />
-     <property name="node.js.selected.package.eslint" value="(autodetect)" />
-     <property name="node.js.selected.package.tslint" value="(autodetect)" />
--    <property name="settings.editor.selected.configurable" value="configurable.group.language" />
-+    <property name="settings.editor.selected.configurable" value="org.jetbrains.plugins.notebooks.jupyter.connections.configuration.JupyterServerConfigurable" />
-   </component>
-   <component name="RecentsManager">
-     <key name="CopyFile.RECENT_KEYS">
--      <recent name="D:\Studia\MoCaDR_proj1\Report" />
-       <recent name="D:\Studia\MoCaDR_proj1" />
-     </key>
-     <key name="MoveFile.RECENT_KEYS">
--      <recent name="D:\Studia\MoCaDR_proj1\Report\fig\syf" />
--      <recent name="D:\Studia\MoCaDR_proj1\Results\Syf" />
-       <recent name="D:\Studia\MoCaDR_proj1\Report" />
-     </key>
-   </component>
--  <component name="RunManager" selected="LaTeX.report">
--    <configuration name="report" type="LATEX_RUN_CONFIGURATION" factoryName="LaTeX configuration factory" temporary="true">
-+  <component name="RunManager" selected="LaTeX.report (1)">
-+    <configuration name="report (1)" type="LATEX_RUN_CONFIGURATION" factoryName="LaTeX configuration factory" temporary="true">
-       <texify>
-         <compiler>PDFLATEX</compiler>
-         <compiler-path />
-@@ -85,6 +87,27 @@
-         <compiler-arguments />
-         <envs />
-         <main-file>$PROJECT_DIR$/Report/report.tex</main-file>
-+        <output-path>$PROJECT_DIR$/out</output-path>
-+        <auxil-path>$PROJECT_DIR$/auxil</auxil-path>
-+        <compile-twice>false</compile-twice>
-+        <output-format>PDF</output-format>
-+        <latex-distribution>MIKTEX</latex-distribution>
-+        <has-been-run>true</has-been-run>
-+        <bib-run-config>[]</bib-run-config>
-+        <makeindex-run-config>[]</makeindex-run-config>
-+      </texify>
-+      <method v="2" />
-+    </configuration>
-+    <configuration name="report" type="LATEX_RUN_CONFIGURATION" factoryName="LaTeX configuration factory" singleton="false">
-+      <texify>
-+        <compiler>PDFLATEX</compiler>
-+        <compiler-path />
-+        <sumatra-path />
-+        <pdf-viewer>SUMATRA</pdf-viewer>
-+        <viewer-command />
-+        <compiler-arguments />
-+        <envs />
-+        <main-file />
-         <output-path>$PROJECT_DIR$/Report/out</output-path>
-         <auxil-path>$PROJECT_DIR$/Report/auxil</auxil-path>
-         <compile-twice>false</compile-twice>
-@@ -96,28 +119,6 @@
-       </texify>
-       <method v="2" />
-     </configuration>
--    <configuration name="compute_results3" type="PythonConfigurationType" factoryName="Python" temporary="true" nameIsGenerated="true">
--      <module name="MoCaDR_proj1" />
--      <option name="INTERPRETER_OPTIONS" value="" />
--      <option name="PARENT_ENVS" value="true" />
--      <envs>
--        <env name="PYTHONUNBUFFERED" value="1" />
--      </envs>
--      <option name="SDK_HOME" value="" />
--      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$/src" />
--      <option name="IS_MODULE_SDK" value="true" />
--      <option name="ADD_CONTENT_ROOTS" value="true" />
--      <option name="ADD_SOURCE_ROOTS" value="true" />
--      <EXTENSION ID="PythonCoverageRunConfigurationExtension" runner="coverage.py" />
--      <option name="SCRIPT_NAME" value="$PROJECT_DIR$/src/compute_results3.py" />
--      <option name="PARAMETERS" value="" />
--      <option name="SHOW_COMMAND_LINE" value="false" />
--      <option name="EMULATE_TERMINAL" value="false" />
--      <option name="MODULE_MODE" value="false" />
--      <option name="REDIRECT_INPUT" value="false" />
--      <option name="INPUT_FILE" value="" />
--      <method v="2" />
--    </configuration>
-     <configuration name="manipulating_datasets" type="PythonConfigurationType" factoryName="Python" nameIsGenerated="true">
-       <module name="MoCaDR_proj1" />
-       <option name="INTERPRETER_OPTIONS" value="" />
-@@ -186,17 +187,16 @@
-     </configuration>
-     <list>
-       <item itemvalue="LaTeX.report" />
-+      <item itemvalue="LaTeX.report (1)" />
-       <item itemvalue="Python.manipulating_datasets" />
--      <item itemvalue="Python.compute_results3" />
--      <item itemvalue="Python.performing_algorithms" />
-       <item itemvalue="Python.splitting_data" />
-+      <item itemvalue="Python.performing_algorithms" />
-     </list>
-     <recent_temporary>
-       <list>
--        <item itemvalue="LaTeX.report" />
--        <item itemvalue="Python.splitting_data" />
-+        <item itemvalue="LaTeX.report (1)" />
-         <item itemvalue="Python.performing_algorithms" />
--        <item itemvalue="Python.compute_results3" />
-+        <item itemvalue="Python.splitting_data" />
-       </list>
-     </recent_temporary>
-   </component>
-@@ -239,17 +239,9 @@
-       <workItem from="1648576643019" duration="4941000" />
-       <workItem from="1648885683106" duration="2799000" />
-       <workItem from="1649100586613" duration="401000" />
--      <workItem from="1649142695450" duration="1248000" />
--      <workItem from="1649154173111" duration="1535000" />
--      <workItem from="1649225210342" duration="2520000" />
--      <workItem from="1649252977347" duration="33000" />
--      <workItem from="1649256897698" duration="20000" />
--      <workItem from="1649263859461" duration="4502000" />
--      <workItem from="1649340598453" duration="3005000" />
--      <workItem from="1649345448932" duration="596000" />
--      <workItem from="1649407349351" duration="1672000" />
--      <workItem from="1649429201664" duration="3019000" />
--      <workItem from="1649438274438" duration="1751000" />
-+      <workItem from="1649446681291" duration="474000" />
-+      <workItem from="1649447209358" duration="203000" />
-+      <workItem from="1649447455740" duration="3373000" />
-     </task>
-     <task id="LOCAL-00001" summary="a">
-       <created>1646775274557</created>
-@@ -398,49 +390,7 @@
-       <option name="project" value="LOCAL" />
-       <updated>1648327858794</updated>
-     </task>
--    <task id="LOCAL-00022" summary="computing results">
--      <created>1649155805892</created>
--      <option name="number" value="00022" />
--      <option name="presentableId" value="LOCAL-00022" />
--      <option name="project" value="LOCAL" />
--      <updated>1649155805892</updated>
--    </task>
--    <task id="LOCAL-00023" summary="Computing stop condition svd2">
--      <created>1649345310151</created>
--      <option name="number" value="00023" />
--      <option name="presentableId" value="LOCAL-00023" />
--      <option name="project" value="LOCAL" />
--      <updated>1649345310151</updated>
--    </task>
--    <task id="LOCAL-00024" summary="Computing stop condition svd2">
--      <created>1649408687739</created>
--      <option name="number" value="00024" />
--      <option name="presentableId" value="LOCAL-00024" />
--      <option name="project" value="LOCAL" />
--      <updated>1649408687739</updated>
--    </task>
--    <task id="LOCAL-00025" summary="Presenting results for NMF">
--      <created>1649408979238</created>
--      <option name="number" value="00025" />
--      <option name="presentableId" value="LOCAL-00025" />
--      <option name="project" value="LOCAL" />
--      <updated>1649408979239</updated>
--    </task>
--    <task id="LOCAL-00026" summary="computing results">
--      <created>1649434249565</created>
--      <option name="number" value="00026" />
--      <option name="presentableId" value="LOCAL-00026" />
--      <option name="project" value="LOCAL" />
--      <updated>1649434249565</updated>
--    </task>
--    <task id="LOCAL-00027" summary="computing results">
--      <created>1649492068004</created>
--      <option name="number" value="00027" />
--      <option name="presentableId" value="LOCAL-00027" />
--      <option name="project" value="LOCAL" />
--      <updated>1649492068004</updated>
--    </task>
--    <option name="localTasksCounter" value="28" />
-+    <option name="localTasksCounter" value="22" />
-     <servers />
-   </component>
-   <component name="TypeScriptGeneratedFilesManager">
-@@ -470,21 +420,10 @@
-     <MESSAGE value="Testing methods" />
-     <MESSAGE value="SVD opis Tamarka" />
-     <MESSAGE value="Testing SVD2" />
--    <MESSAGE value="Computing stop condition svd2" />
--    <MESSAGE value="Presenting results for NMF" />
--    <MESSAGE value="computing results" />
--    <option name="LAST_COMMIT_MESSAGE" value="computing results" />
-+    <option name="LAST_COMMIT_MESSAGE" value="Testing SVD2" />
-   </component>
-   <component name="com.intellij.coverage.CoverageDataManagerImpl">
--    <SUITE FILE_PATH="coverage/main_py$splitting_manipulating_data.coverage" NAME="splitting_manipulating_data Coverage Results" MODIFIED="1648627073782" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/src" />
--    <SUITE FILE_PATH="coverage/main_py$algorithm_functions.coverage" NAME="algorithm_functions Coverage Results" MODIFIED="1648826781925" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/src" />
--    <SUITE FILE_PATH="coverage/main_py$computing_results.coverage" NAME="computing_results Coverage Results" MODIFIED="1648727756891" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/src" />
--    <SUITE FILE_PATH="coverage/main_py$algorithms_script.coverage" NAME="performing_algorithms Coverage Results" MODIFIED="1647535849226" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/src" />
--    <SUITE FILE_PATH="coverage/main_py$splitting_manipulating_data__1_.coverage" NAME="splitting_manipulating_data (1) Coverage Results" MODIFIED="1647870795349" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/src" />
--    <SUITE FILE_PATH="coverage/main_py$a.coverage" NAME="a Coverage Results" MODIFIED="1648057368569" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/src" />
--    <SUITE FILE_PATH="coverage/main_py$compute_results3.coverage" NAME="compute_results3 Coverage Results" MODIFIED="1649268385203" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/src" />
-+    <SUITE FILE_PATH="coverage/main_py$performing_algorithms.coverage" NAME="performing_algorithms Coverage Results" MODIFIED="1647784050444" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/src" />
-     <SUITE FILE_PATH="coverage/MoCaDR_proj1$splitting_data.coverage" NAME="splitting_data Coverage Results" MODIFIED="1647174411611" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
--    <SUITE FILE_PATH="coverage/main_py$performing_algorithms__1_.coverage" NAME="performing_algorithms (1) Coverage Results" MODIFIED="1648057220868" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/src" />
--    <SUITE FILE_PATH="coverage/main_py$performing_algorithms.coverage" NAME="performing_algorithms Coverage Results" MODIFIED="1648365686686" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/src" />
-   </component>
- </project>
-\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_09_04_2022_18_50_[Changes]/shelved.patch
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_09_04_2022_18_50_[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_09_04_2022_18_50_[Changes]/shelved.patch
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_09_04_2022_18_50_[Changes]/shelved.patch	
+++ /dev/null	
@@ -1,157 +0,0 @@
-Index: .idea/shelf/Uncommitted_changes_before_Update_at_02_04_2022_09_45__Changes_.xml
-===================================================================
-diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_02_04_2022_09_45__Changes_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_02_04_2022_09_45__Changes_.xml
-deleted file mode 100644
---- a/.idea/shelf/Uncommitted_changes_before_Update_at_02_04_2022_09_45__Changes_.xml	(revision 64d6d29bac5c78d526d06c18df637fe4314e8201)
-+++ /dev/null	(revision 64d6d29bac5c78d526d06c18df637fe4314e8201)
-@@ -1,4 +0,0 @@
--<changelist name="Uncommitted_changes_before_Update_at_02_04_2022_09_45_[Changes]" date="1648885559775" recycled="true" deleted="true">
--  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_02_04_2022_09_45_[Changes]/shelved.patch" />
--  <option name="DESCRIPTION" value="Uncommitted changes before Update at 02.04.2022 09:45 [Changes]" />
--</changelist>
-\ No newline at end of file
-Index: .idea/shelf/Uncommitted_changes_before_Update_at_02_04_2022_09_45_[Changes]/shelved.patch
-===================================================================
-diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_02_04_2022_09_45_[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_02_04_2022_09_45_[Changes]/shelved.patch
-deleted file mode 100644
---- a/.idea/shelf/Uncommitted_changes_before_Update_at_02_04_2022_09_45_[Changes]/shelved.patch	(revision 64d6d29bac5c78d526d06c18df637fe4314e8201)
-+++ /dev/null	(revision 64d6d29bac5c78d526d06c18df637fe4314e8201)
-@@ -1,66 +0,0 @@
--Index: .idea/workspace.xml
--IDEA additional info:
--Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
--<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"62d33fe8-2ec7-4d31-9bba-7fa36bc76fcb\" name=\"Changes\" comment=\"Implementing SGD\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/MoCaDR_proj1.iml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/MoCaDR_proj1.iml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/misc.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/misc.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_29_03_2022_08_51__Changes_.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_29_03_2022_08_51__Changes_.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Report/auxil/test.aux\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Report/auxil/test.aux\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Report/auxil/test.log\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Report/auxil/test.log\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Report/out/test.pdf\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Report/out/test.pdf\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Report/out/test.synctex.gz\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Report/out/test.synctex.gz\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Report/test.tex\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Report/test.tex\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/choosing_parameters.ipynb\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/choosing_parameters.ipynb\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/syf1.ipynb\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/syf1.ipynb\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"RMarkdown.document\" />\r\n        <option value=\"Python Script\" />\r\n        <option value=\"Jupyter Notebook\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitSEFilterConfiguration\">\r\n    <file-type-list>\r\n      <filtered-out-file-type name=\"LOCAL_BRANCH\" />\r\n      <filtered-out-file-type name=\"REMOTE_BRANCH\" />\r\n      <filtered-out-file-type name=\"TAG\" />\r\n      <filtered-out-file-type name=\"COMMIT_BY_MESSAGE\" />\r\n    </file-type-list>\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"267VjyGJ9wr8oG7c6vyJzNQTvFk\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\">\r\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">\r\n    <property name=\"ASKED_ADD_EXTERNAL_FILES\" value=\"true\" />\r\n    <property name=\"ASKED_SHARE_PROJECT_CONFIGURATION_FILES\" value=\"true\" />\r\n    <property name=\"RunOnceActivity.OpenProjectViewOnStart\" value=\"true\" />\r\n    <property name=\"RunOnceActivity.ShowReadmeOnStart\" value=\"true\" />\r\n    <property name=\"SHARE_PROJECT_CONFIGURATION_FILES\" value=\"true\" />\r\n    <property name=\"WebServerToolWindowFactoryState\" value=\"false\" />\r\n    <property name=\"last_opened_file_path\" value=\"$PROJECT_DIR$\" />\r\n    <property name=\"node.js.detected.package.eslint\" value=\"true\" />\r\n    <property name=\"node.js.detected.package.tslint\" value=\"true\" />\r\n    <property name=\"node.js.selected.package.eslint\" value=\"(autodetect)\" />\r\n    <property name=\"node.js.selected.package.tslint\" value=\"(autodetect)\" />\r\n    <property name=\"settings.editor.selected.configurable\" value=\"org.jetbrains.plugins.notebooks.jupyter.connections.configuration.JupyterServerConfigurable\" />\r\n  </component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"D:\\Studia\\MoCaDR_proj1\" />\r\n    </key>\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"D:\\Studia\\MoCaDR_proj1\\Report\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\" selected=\"LaTeX.test\">\r\n    <configuration name=\"test\" type=\"LATEX_RUN_CONFIGURATION\" factoryName=\"LaTeX configuration factory\">\r\n      <texify>\r\n        <compiler>PDFLATEX</compiler>\r\n        <compiler-path />\r\n        <sumatra-path />\r\n        <pdf-viewer>SUMATRA</pdf-viewer>\r\n        <viewer-command />\r\n        <compiler-arguments />\r\n        <envs />\r\n        <main-file>$PROJECT_DIR$/Report/test.tex</main-file>\r\n        <output-path>$PROJECT_DIR$/Report/out</output-path>\r\n        <auxil-path>$PROJECT_DIR$/Report/auxil</auxil-path>\r\n        <compile-twice>false</compile-twice>\r\n        <output-format>PDF</output-format>\r\n        <latex-distribution>MIKTEX</latex-distribution>\r\n        <has-been-run>true</has-been-run>\r\n        <bib-run-config>[]</bib-run-config>\r\n        <makeindex-run-config>[]</makeindex-run-config>\r\n      </texify>\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"manipulating_datasets\" type=\"PythonConfigurationType\" factoryName=\"Python\" nameIsGenerated=\"true\">\r\n      <module name=\"MoCaDR_proj1\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"D:\\Studia\\MoCaDR_proj1\\manipulating_datasets.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"performing_algorithms\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"MoCaDR_proj1\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/src\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/src/performing_algorithms.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"splitting_data\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"MoCaDR_proj1\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/splitting_data.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <list>\r\n      <item itemvalue=\"LaTeX.test\" />\r\n      <item itemvalue=\"Python.manipulating_datasets\" />\r\n      <item itemvalue=\"Python.splitting_data\" />\r\n      <item itemvalue=\"Python.performing_algorithms\" />\r\n    </list>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Python.performing_algorithms\" />\r\n        <item itemvalue=\"Python.splitting_data\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"SvnConfiguration\">\r\n    <configuration>C:\\Users\\dmika\\AppData\\Roaming\\Subversion</configuration>\r\n  </component>\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"62d33fe8-2ec7-4d31-9bba-7fa36bc76fcb\" name=\"Changes\" comment=\"\" />\r\n      <created>1646774751311</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1646774751311</updated>\r\n      <workItem from=\"1646774754054\" duration=\"26000\" />\r\n      <workItem from=\"1646774814002\" duration=\"835000\" />\r\n      <workItem from=\"1646775670059\" duration=\"47000\" />\r\n      <workItem from=\"1646775727774\" duration=\"757000\" />\r\n      <workItem from=\"1646816479175\" duration=\"461000\" />\r\n      <workItem from=\"1646896158453\" duration=\"762000\" />\r\n      <workItem from=\"1646896945682\" duration=\"630000\" />\r\n      <workItem from=\"1646897595717\" duration=\"2651000\" />\r\n      <workItem from=\"1646900622776\" duration=\"425000\" />\r\n      <workItem from=\"1646915517163\" duration=\"449000\" />\r\n      <workItem from=\"1646915983800\" duration=\"240000\" />\r\n      <workItem from=\"1646916258164\" duration=\"389000\" />\r\n      <workItem from=\"1646916663441\" duration=\"393000\" />\r\n      <workItem from=\"1646933050771\" duration=\"1105000\" />\r\n      <workItem from=\"1646936230049\" duration=\"1064000\" />\r\n      <workItem from=\"1647027781891\" duration=\"1279000\" />\r\n      <workItem from=\"1647071928401\" duration=\"2390000\" />\r\n      <workItem from=\"1647181792640\" duration=\"2955000\" />\r\n      <workItem from=\"1647276453225\" duration=\"264000\" />\r\n      <workItem from=\"1647276734574\" duration=\"7710000\" />\r\n      <workItem from=\"1647699257802\" duration=\"1713000\" />\r\n      <workItem from=\"1647774897107\" duration=\"5656000\" />\r\n      <workItem from=\"1648326375030\" duration=\"985000\" />\r\n      <workItem from=\"1648327394372\" duration=\"485000\" />\r\n      <workItem from=\"1648481964443\" duration=\"4660000\" />\r\n      <workItem from=\"1648576643019\" duration=\"4941000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"a\">\r\n      <created>1646775274557</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646775274557</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"init commit\">\r\n      <created>1646775361377</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646775361377</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"init commit\">\r\n      <created>1646775521666</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646775521666</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"init commit\">\r\n      <created>1646775784756</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646775784756</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"init commit\">\r\n      <created>1646775870305</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646775870305</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"Adding dataset\">\r\n      <created>1646816860800</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646816860800</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"Setting up LaTeX\">\r\n      <created>1646898995949</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646898995949</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00008\" summary=\"Setting up LaTeX\">\r\n      <created>1646900639924</created>\r\n      <option name=\"number\" value=\"00008\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646900639924</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00009\" summary=\"Cleaning data\">\r\n      <created>1646934068924</created>\r\n      <option name=\"number\" value=\"00009\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646934068924</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00010\" summary=\"Cleaning data\">\r\n      <created>1647028888721</created>\r\n      <option name=\"number\" value=\"00010\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647028888721</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00011\" summary=\"Cleaning data\">\r\n      <created>1647029054319</created>\r\n      <option name=\"number\" value=\"00011\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647029054319</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00012\" summary=\"Tamarka testing\">\r\n      <created>1647163191686</created>\r\n      <option name=\"number\" value=\"00012\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00012\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647163191686</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00013\" summary=\"Experimenting with 'NaN' values\">\r\n      <created>1647168883206</created>\r\n      <option name=\"number\" value=\"00013\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00013\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647168883206</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00014\" summary=\"Experimenting with 'NaN' values\">\r\n      <created>1647175373237</created>\r\n      <option name=\"number\" value=\"00014\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00014\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647175373237</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00015\" summary=\"Removing duplicated packages\">\r\n      <created>1647175629524</created>\r\n      <option name=\"number\" value=\"00015\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00015\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647175629524</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00016\" summary=\"Testing methods\">\r\n      <created>1647184013664</created>\r\n      <option name=\"number\" value=\"00016\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00016\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647184013664</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00017\" summary=\"Testing methods\">\r\n      <created>1647184756535</created>\r\n      <option name=\"number\" value=\"00017\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00017\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647184756535</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00018\" summary=\"SVD opis Tamarka\">\r\n      <created>1647698852885</created>\r\n      <option name=\"number\" value=\"00018\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00018\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647698852885</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00019\" summary=\"SVD opis Tamarka\">\r\n      <created>1647699044053</created>\r\n      <option name=\"number\" value=\"00019\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00019\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647699044053</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00020\" summary=\"SVD opis Tamarka\">\r\n      <created>1647699173625</created>\r\n      <option name=\"number\" value=\"00020\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00020\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647699173625</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00021\" summary=\"Testing SVD2\">\r\n      <created>1648327858794</created>\r\n      <option name=\"number\" value=\"00021\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00021\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1648327858794</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"22\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <option name=\"ADD_EXTERNAL_FILES_SILENTLY\" value=\"true\" />\r\n    <MESSAGE value=\"a\" />\r\n    <MESSAGE value=\"init commit\" />\r\n    <MESSAGE value=\"Adding dataset\" />\r\n    <MESSAGE value=\"Setting up LaTeX\" />\r\n    <MESSAGE value=\"Cleaning data\" />\r\n    <MESSAGE value=\"Tamarka testing\" />\r\n    <MESSAGE value=\"Experimenting with 'NaN' values\" />\r\n    <MESSAGE value=\"Removing duplicated packages\" />\r\n    <MESSAGE value=\"Testing methods\" />\r\n    <MESSAGE value=\"SVD opis Tamarka\" />\r\n    <MESSAGE value=\"Testing SVD2\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Testing SVD2\" />\r\n  </component>\r\n  <component name=\"com.intellij.coverage.CoverageDataManagerImpl\">\r\n    <SUITE FILE_PATH=\"coverage/main_py$performing_algorithms.coverage\" NAME=\"performing_algorithms Coverage Results\" MODIFIED=\"1647784050444\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/src\" />\r\n    <SUITE FILE_PATH=\"coverage/MoCaDR_proj1$splitting_data.coverage\" NAME=\"splitting_data Coverage Results\" MODIFIED=\"1647174411611\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\r\n  </component>\r\n</project>
--Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
--<+>UTF-8
--===================================================================
--diff --git a/.idea/workspace.xml b/.idea/workspace.xml
----- a/.idea/workspace.xml	(revision 442f5fa4930c44b3ed30a2cff1614564dae4b002)
--+++ b/.idea/workspace.xml	(date 1648885439014)
--@@ -4,19 +4,7 @@
--     <option name="autoReloadType" value="SELECTIVE" />
--   </component>
--   <component name="ChangeListManager">
---    <list default="true" id="62d33fe8-2ec7-4d31-9bba-7fa36bc76fcb" name="Changes" comment="Implementing SGD">
---      <change beforePath="$PROJECT_DIR$/.idea/MoCaDR_proj1.iml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/MoCaDR_proj1.iml" afterDir="false" />
---      <change beforePath="$PROJECT_DIR$/.idea/misc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/misc.xml" afterDir="false" />
---      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_29_03_2022_08_51__Changes_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_29_03_2022_08_51__Changes_.xml" afterDir="false" />
---      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
---      <change beforePath="$PROJECT_DIR$/Report/auxil/test.aux" beforeDir="false" afterPath="$PROJECT_DIR$/Report/auxil/test.aux" afterDir="false" />
---      <change beforePath="$PROJECT_DIR$/Report/auxil/test.log" beforeDir="false" afterPath="$PROJECT_DIR$/Report/auxil/test.log" afterDir="false" />
---      <change beforePath="$PROJECT_DIR$/Report/out/test.pdf" beforeDir="false" afterPath="$PROJECT_DIR$/Report/out/test.pdf" afterDir="false" />
---      <change beforePath="$PROJECT_DIR$/Report/out/test.synctex.gz" beforeDir="false" afterPath="$PROJECT_DIR$/Report/out/test.synctex.gz" afterDir="false" />
---      <change beforePath="$PROJECT_DIR$/Report/test.tex" beforeDir="false" afterPath="$PROJECT_DIR$/Report/test.tex" afterDir="false" />
---      <change beforePath="$PROJECT_DIR$/src/choosing_parameters.ipynb" beforeDir="false" afterPath="$PROJECT_DIR$/src/choosing_parameters.ipynb" afterDir="false" />
---      <change beforePath="$PROJECT_DIR$/src/syf1.ipynb" beforeDir="false" afterPath="$PROJECT_DIR$/src/syf1.ipynb" afterDir="false" />
---    </list>
--+    <list default="true" id="62d33fe8-2ec7-4d31-9bba-7fa36bc76fcb" name="Changes" comment="report" />
--     <option name="SHOW_DIALOG" value="false" />
--     <option name="HIGHLIGHT_CONFLICTS" value="true" />
--     <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
--@@ -212,7 +200,7 @@
--       <workItem from="1648326375030" duration="985000" />
--       <workItem from="1648327394372" duration="485000" />
--       <workItem from="1648481964443" duration="4660000" />
---      <workItem from="1648576643019" duration="4941000" />
--+      <workItem from="1648576643019" duration="5862000" />
--     </task>
--     <task id="LOCAL-00001" summary="a">
--       <created>1646775274557</created>
--@@ -361,7 +349,14 @@
--       <option name="project" value="LOCAL" />
--       <updated>1648327858794</updated>
--     </task>
---    <option name="localTasksCounter" value="22" />
--+    <task id="LOCAL-00022" summary="report">
--+      <created>1648583418325</created>
--+      <option name="number" value="00022" />
--+      <option name="presentableId" value="LOCAL-00022" />
--+      <option name="project" value="LOCAL" />
--+      <updated>1648583418325</updated>
--+    </task>
--+    <option name="localTasksCounter" value="23" />
--     <servers />
--   </component>
--   <component name="TypeScriptGeneratedFilesManager">
--@@ -391,7 +386,8 @@
--     <MESSAGE value="Testing methods" />
--     <MESSAGE value="SVD opis Tamarka" />
--     <MESSAGE value="Testing SVD2" />
---    <option name="LAST_COMMIT_MESSAGE" value="Testing SVD2" />
--+    <MESSAGE value="report" />
--+    <option name="LAST_COMMIT_MESSAGE" value="report" />
--   </component>
--   <component name="com.intellij.coverage.CoverageDataManagerImpl">
--     <SUITE FILE_PATH="coverage/main_py$performing_algorithms.coverage" NAME="performing_algorithms Coverage Results" MODIFIED="1647784050444" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/src" />
-Index: .idea/workspace.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"62d33fe8-2ec7-4d31-9bba-7fa36bc76fcb\" name=\"Changes\" comment=\"planning\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/MoCaDR_proj1.iml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/MoCaDR_proj1.iml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/misc.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/misc.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_06_04_2022_14_13__Changes_.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_06_04_2022_14_13__Changes_.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/algorithm_functions.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/algorithm_functions.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/syf2.ipynb\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/syf2.ipynb\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"RMarkdown.document\" />\r\n        <option value=\"Python Script\" />\r\n        <option value=\"Jupyter Notebook\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitSEFilterConfiguration\">\r\n    <file-type-list>\r\n      <filtered-out-file-type name=\"LOCAL_BRANCH\" />\r\n      <filtered-out-file-type name=\"REMOTE_BRANCH\" />\r\n      <filtered-out-file-type name=\"TAG\" />\r\n      <filtered-out-file-type name=\"COMMIT_BY_MESSAGE\" />\r\n    </file-type-list>\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"267VjyGJ9wr8oG7c6vyJzNQTvFk\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\">\r\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">\r\n    <property name=\"ASKED_ADD_EXTERNAL_FILES\" value=\"true\" />\r\n    <property name=\"ASKED_SHARE_PROJECT_CONFIGURATION_FILES\" value=\"true\" />\r\n    <property name=\"RunOnceActivity.OpenProjectViewOnStart\" value=\"true\" />\r\n    <property name=\"RunOnceActivity.ShowReadmeOnStart\" value=\"true\" />\r\n    <property name=\"SHARE_PROJECT_CONFIGURATION_FILES\" value=\"true\" />\r\n    <property name=\"WebServerToolWindowFactoryState\" value=\"false\" />\r\n    <property name=\"last_opened_file_path\" value=\"$PROJECT_DIR$\" />\r\n    <property name=\"node.js.detected.package.eslint\" value=\"true\" />\r\n    <property name=\"node.js.detected.package.tslint\" value=\"true\" />\r\n    <property name=\"node.js.selected.package.eslint\" value=\"(autodetect)\" />\r\n    <property name=\"node.js.selected.package.tslint\" value=\"(autodetect)\" />\r\n    <property name=\"settings.editor.selected.configurable\" value=\"org.jetbrains.plugins.notebooks.jupyter.connections.configuration.JupyterServerConfigurable\" />\r\n  </component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"D:\\Studia\\MoCaDR_proj1\" />\r\n    </key>\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"D:\\Studia\\MoCaDR_proj1\\Report\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\" selected=\"LaTeX.report (1)\">\r\n    <configuration name=\"report (1)\" type=\"LATEX_RUN_CONFIGURATION\" factoryName=\"LaTeX configuration factory\" temporary=\"true\">\r\n      <texify>\r\n        <compiler>PDFLATEX</compiler>\r\n        <compiler-path />\r\n        <sumatra-path />\r\n        <pdf-viewer>SUMATRA</pdf-viewer>\r\n        <viewer-command />\r\n        <compiler-arguments />\r\n        <envs />\r\n        <main-file>$PROJECT_DIR$/Report/report.tex</main-file>\r\n        <output-path>$PROJECT_DIR$/out</output-path>\r\n        <auxil-path>$PROJECT_DIR$/auxil</auxil-path>\r\n        <compile-twice>false</compile-twice>\r\n        <output-format>PDF</output-format>\r\n        <latex-distribution>MIKTEX</latex-distribution>\r\n        <has-been-run>true</has-been-run>\r\n        <bib-run-config>[]</bib-run-config>\r\n        <makeindex-run-config>[]</makeindex-run-config>\r\n      </texify>\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"report\" type=\"LATEX_RUN_CONFIGURATION\" factoryName=\"LaTeX configuration factory\" singleton=\"false\">\r\n      <texify>\r\n        <compiler>PDFLATEX</compiler>\r\n        <compiler-path />\r\n        <sumatra-path />\r\n        <pdf-viewer>SUMATRA</pdf-viewer>\r\n        <viewer-command />\r\n        <compiler-arguments />\r\n        <envs />\r\n        <main-file />\r\n        <output-path>$PROJECT_DIR$/Report/out</output-path>\r\n        <auxil-path>$PROJECT_DIR$/Report/auxil</auxil-path>\r\n        <compile-twice>false</compile-twice>\r\n        <output-format>PDF</output-format>\r\n        <latex-distribution>MIKTEX</latex-distribution>\r\n        <has-been-run>true</has-been-run>\r\n        <bib-run-config>[]</bib-run-config>\r\n        <makeindex-run-config>[]</makeindex-run-config>\r\n      </texify>\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"manipulating_datasets\" type=\"PythonConfigurationType\" factoryName=\"Python\" nameIsGenerated=\"true\">\r\n      <module name=\"MoCaDR_proj1\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"D:\\Studia\\MoCaDR_proj1\\manipulating_datasets.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"performing_algorithms\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"MoCaDR_proj1\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/src\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/src/performing_algorithms.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"splitting_data\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"MoCaDR_proj1\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/splitting_data.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <list>\r\n      <item itemvalue=\"LaTeX.report\" />\r\n      <item itemvalue=\"LaTeX.report (1)\" />\r\n      <item itemvalue=\"Python.manipulating_datasets\" />\r\n      <item itemvalue=\"Python.splitting_data\" />\r\n      <item itemvalue=\"Python.performing_algorithms\" />\r\n    </list>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"LaTeX.report (1)\" />\r\n        <item itemvalue=\"Python.performing_algorithms\" />\r\n        <item itemvalue=\"Python.splitting_data\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"SvnConfiguration\">\r\n    <configuration>C:\\Users\\dmika\\AppData\\Roaming\\Subversion</configuration>\r\n  </component>\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"62d33fe8-2ec7-4d31-9bba-7fa36bc76fcb\" name=\"Changes\" comment=\"\" />\r\n      <created>1646774751311</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1646774751311</updated>\r\n      <workItem from=\"1646774754054\" duration=\"26000\" />\r\n      <workItem from=\"1646774814002\" duration=\"835000\" />\r\n      <workItem from=\"1646775670059\" duration=\"47000\" />\r\n      <workItem from=\"1646775727774\" duration=\"757000\" />\r\n      <workItem from=\"1646816479175\" duration=\"461000\" />\r\n      <workItem from=\"1646896158453\" duration=\"762000\" />\r\n      <workItem from=\"1646896945682\" duration=\"630000\" />\r\n      <workItem from=\"1646897595717\" duration=\"2651000\" />\r\n      <workItem from=\"1646900622776\" duration=\"425000\" />\r\n      <workItem from=\"1646915517163\" duration=\"449000\" />\r\n      <workItem from=\"1646915983800\" duration=\"240000\" />\r\n      <workItem from=\"1646916258164\" duration=\"389000\" />\r\n      <workItem from=\"1646916663441\" duration=\"393000\" />\r\n      <workItem from=\"1646933050771\" duration=\"1105000\" />\r\n      <workItem from=\"1646936230049\" duration=\"1064000\" />\r\n      <workItem from=\"1647027781891\" duration=\"1279000\" />\r\n      <workItem from=\"1647071928401\" duration=\"2390000\" />\r\n      <workItem from=\"1647181792640\" duration=\"2955000\" />\r\n      <workItem from=\"1647276453225\" duration=\"264000\" />\r\n      <workItem from=\"1647276734574\" duration=\"7710000\" />\r\n      <workItem from=\"1647699257802\" duration=\"1713000\" />\r\n      <workItem from=\"1647774897107\" duration=\"5656000\" />\r\n      <workItem from=\"1648326375030\" duration=\"985000\" />\r\n      <workItem from=\"1648327394372\" duration=\"485000\" />\r\n      <workItem from=\"1648481964443\" duration=\"4660000\" />\r\n      <workItem from=\"1648576643019\" duration=\"4941000\" />\r\n      <workItem from=\"1648885683106\" duration=\"2799000\" />\r\n      <workItem from=\"1649100586613\" duration=\"401000\" />\r\n      <workItem from=\"1649446681291\" duration=\"474000\" />\r\n      <workItem from=\"1649447209358\" duration=\"203000\" />\r\n      <workItem from=\"1649447455740\" duration=\"3373000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"a\">\r\n      <created>1646775274557</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646775274557</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"init commit\">\r\n      <created>1646775361377</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646775361377</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"init commit\">\r\n      <created>1646775521666</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646775521666</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"init commit\">\r\n      <created>1646775784756</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646775784756</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"init commit\">\r\n      <created>1646775870305</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646775870305</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"Adding dataset\">\r\n      <created>1646816860800</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646816860800</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"Setting up LaTeX\">\r\n      <created>1646898995949</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646898995949</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00008\" summary=\"Setting up LaTeX\">\r\n      <created>1646900639924</created>\r\n      <option name=\"number\" value=\"00008\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646900639924</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00009\" summary=\"Cleaning data\">\r\n      <created>1646934068924</created>\r\n      <option name=\"number\" value=\"00009\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646934068924</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00010\" summary=\"Cleaning data\">\r\n      <created>1647028888721</created>\r\n      <option name=\"number\" value=\"00010\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647028888721</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00011\" summary=\"Cleaning data\">\r\n      <created>1647029054319</created>\r\n      <option name=\"number\" value=\"00011\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647029054319</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00012\" summary=\"Tamarka testing\">\r\n      <created>1647163191686</created>\r\n      <option name=\"number\" value=\"00012\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00012\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647163191686</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00013\" summary=\"Experimenting with 'NaN' values\">\r\n      <created>1647168883206</created>\r\n      <option name=\"number\" value=\"00013\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00013\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647168883206</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00014\" summary=\"Experimenting with 'NaN' values\">\r\n      <created>1647175373237</created>\r\n      <option name=\"number\" value=\"00014\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00014\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647175373237</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00015\" summary=\"Removing duplicated packages\">\r\n      <created>1647175629524</created>\r\n      <option name=\"number\" value=\"00015\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00015\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647175629524</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00016\" summary=\"Testing methods\">\r\n      <created>1647184013664</created>\r\n      <option name=\"number\" value=\"00016\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00016\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647184013664</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00017\" summary=\"Testing methods\">\r\n      <created>1647184756535</created>\r\n      <option name=\"number\" value=\"00017\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00017\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647184756535</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00018\" summary=\"SVD opis Tamarka\">\r\n      <created>1647698852885</created>\r\n      <option name=\"number\" value=\"00018\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00018\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647698852885</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00019\" summary=\"SVD opis Tamarka\">\r\n      <created>1647699044053</created>\r\n      <option name=\"number\" value=\"00019\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00019\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647699044053</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00020\" summary=\"SVD opis Tamarka\">\r\n      <created>1647699173625</created>\r\n      <option name=\"number\" value=\"00020\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00020\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647699173625</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00021\" summary=\"Testing SVD2\">\r\n      <created>1648327858794</created>\r\n      <option name=\"number\" value=\"00021\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00021\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1648327858794</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"22\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <option name=\"ADD_EXTERNAL_FILES_SILENTLY\" value=\"true\" />\r\n    <MESSAGE value=\"a\" />\r\n    <MESSAGE value=\"init commit\" />\r\n    <MESSAGE value=\"Adding dataset\" />\r\n    <MESSAGE value=\"Setting up LaTeX\" />\r\n    <MESSAGE value=\"Cleaning data\" />\r\n    <MESSAGE value=\"Tamarka testing\" />\r\n    <MESSAGE value=\"Experimenting with 'NaN' values\" />\r\n    <MESSAGE value=\"Removing duplicated packages\" />\r\n    <MESSAGE value=\"Testing methods\" />\r\n    <MESSAGE value=\"SVD opis Tamarka\" />\r\n    <MESSAGE value=\"Testing SVD2\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Testing SVD2\" />\r\n  </component>\r\n  <component name=\"com.intellij.coverage.CoverageDataManagerImpl\">\r\n    <SUITE FILE_PATH=\"coverage/main_py$performing_algorithms.coverage\" NAME=\"performing_algorithms Coverage Results\" MODIFIED=\"1647784050444\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/src\" />\r\n    <SUITE FILE_PATH=\"coverage/MoCaDR_proj1$splitting_data.coverage\" NAME=\"splitting_data Coverage Results\" MODIFIED=\"1647174411611\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\r\n  </component>\r\n</project>
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/.idea/workspace.xml b/.idea/workspace.xml
---- a/.idea/workspace.xml	(revision 64d6d29bac5c78d526d06c18df637fe4314e8201)
-+++ b/.idea/workspace.xml	(date 1649523050088)
-@@ -4,14 +4,7 @@
-     <option name="autoReloadType" value="SELECTIVE" />
-   </component>
-   <component name="ChangeListManager">
--    <list default="true" id="62d33fe8-2ec7-4d31-9bba-7fa36bc76fcb" name="Changes" comment="planning">
--      <change beforePath="$PROJECT_DIR$/.idea/MoCaDR_proj1.iml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/MoCaDR_proj1.iml" afterDir="false" />
--      <change beforePath="$PROJECT_DIR$/.idea/misc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/misc.xml" afterDir="false" />
--      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_06_04_2022_14_13__Changes_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_06_04_2022_14_13__Changes_.xml" afterDir="false" />
--      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
--      <change beforePath="$PROJECT_DIR$/src/algorithm_functions.py" beforeDir="false" afterPath="$PROJECT_DIR$/src/algorithm_functions.py" afterDir="false" />
--      <change beforePath="$PROJECT_DIR$/src/syf2.ipynb" beforeDir="false" afterPath="$PROJECT_DIR$/src/syf2.ipynb" afterDir="false" />
--    </list>
-+    <list default="true" id="62d33fe8-2ec7-4d31-9bba-7fa36bc76fcb" name="Changes" comment="planning" />
-     <option name="SHOW_DIALOG" value="false" />
-     <option name="HIGHLIGHT_CONFLICTS" value="true" />
-     <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
-@@ -235,7 +228,7 @@
-       <workItem from="1649100586613" duration="401000" />
-       <workItem from="1649446681291" duration="474000" />
-       <workItem from="1649447209358" duration="203000" />
--      <workItem from="1649447455740" duration="3373000" />
-+      <workItem from="1649447455740" duration="3655000" />
-     </task>
-     <task id="LOCAL-00001" summary="a">
-       <created>1646775274557</created>
-@@ -384,7 +377,14 @@
-       <option name="project" value="LOCAL" />
-       <updated>1648327858794</updated>
-     </task>
--    <option name="localTasksCounter" value="22" />
-+    <task id="LOCAL-00022" summary="planning">
-+      <created>1649451911572</created>
-+      <option name="number" value="00022" />
-+      <option name="presentableId" value="LOCAL-00022" />
-+      <option name="project" value="LOCAL" />
-+      <updated>1649451911572</updated>
-+    </task>
-+    <option name="localTasksCounter" value="23" />
-     <servers />
-   </component>
-   <component name="TypeScriptGeneratedFilesManager">
-@@ -414,7 +414,19 @@
-     <MESSAGE value="Testing methods" />
-     <MESSAGE value="SVD opis Tamarka" />
-     <MESSAGE value="Testing SVD2" />
--    <option name="LAST_COMMIT_MESSAGE" value="Testing SVD2" />
-+    <MESSAGE value="planning" />
-+    <option name="LAST_COMMIT_MESSAGE" value="planning" />
-+  </component>
-+  <component name="XDebuggerManager">
-+    <breakpoint-manager>
-+      <breakpoints>
-+        <line-breakpoint enabled="true" suspend="THREAD" type="jupyter-line">
-+          <url>notebook://C:/Users/admin/PycharmProjects/MoCaDR_proj1/src/syf2.ipynb</url>
-+          <line>41</line>
-+          <option name="timeStamp" value="1" />
-+        </line-breakpoint>
-+      </breakpoints>
-+    </breakpoint-manager>
-   </component>
-   <component name="com.intellij.coverage.CoverageDataManagerImpl">
-     <SUITE FILE_PATH="coverage/main_py$performing_algorithms.coverage" NAME="performing_algorithms Coverage Results" MODIFIED="1647784050444" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/src" />
Index: .idea/shelf/Uncommitted_changes_before_Update_at_09_04_2022_22_22__Changes_.xml
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_09_04_2022_22_22__Changes_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_09_04_2022_22_22__Changes_.xml
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_09_04_2022_22_22__Changes_.xml	
+++ /dev/null	
@@ -1,14 +0,0 @@
-<changelist name="Uncommitted_changes_before_Update_at_09_04_2022_22_22_[Changes]" date="1649535781526" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_09_04_2022_22_22_[Changes]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Update at 09.04.2022 22:22 [Changes]" />
-  <binary>
-    <option name="BEFORE_PATH" />
-    <option name="AFTER_PATH" value="out/report.pdf" />
-    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_09_04_2022_22_22_[Changes]/report.pdf" />
-  </binary>
-  <binary>
-    <option name="BEFORE_PATH" />
-    <option name="AFTER_PATH" value="out/report.synctex.gz" />
-    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_09_04_2022_22_22_[Changes]/report.synctex.gz" />
-  </binary>
-</changelist>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_08_04_2022_21_09_[Changes]/shelved.patch
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_08_04_2022_21_09_[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_08_04_2022_21_09_[Changes]/shelved.patch
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_08_04_2022_21_09_[Changes]/shelved.patch	
+++ /dev/null	
@@ -1,124 +0,0 @@
-Index: .idea/shelf/Uncommitted_changes_before_Update_at_30_03_2022_09_29_[Changes]/shelved.patch
-===================================================================
-diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_30_03_2022_09_29_[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_30_03_2022_09_29_[Changes]/shelved.patch
-deleted file mode 100644
---- a/.idea/shelf/Uncommitted_changes_before_Update_at_30_03_2022_09_29_[Changes]/shelved.patch	(revision 8c957f84a0bd908bbbbcb775ce718ee3f8942589)
-+++ /dev/null	(revision 8c957f84a0bd908bbbbcb775ce718ee3f8942589)
-@@ -1,48 +0,0 @@
--Index: .idea/workspace.xml
--IDEA additional info:
--Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
--<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"62d33fe8-2ec7-4d31-9bba-7fa36bc76fcb\" name=\"Changes\" comment=\"Tuning weights to imputation\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/choosing_parameters.ipynb\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/choosing_parameters.ipynb\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"RMarkdown.document\" />\r\n        <option value=\"Jupyter Notebook\" />\r\n        <option value=\"Python Script\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitSEFilterConfiguration\">\r\n    <file-type-list>\r\n      <filtered-out-file-type name=\"LOCAL_BRANCH\" />\r\n      <filtered-out-file-type name=\"REMOTE_BRANCH\" />\r\n      <filtered-out-file-type name=\"TAG\" />\r\n      <filtered-out-file-type name=\"COMMIT_BY_MESSAGE\" />\r\n    </file-type-list>\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"267VjyGJ9wr8oG7c6vyJzNQTvFk\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\">\r\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">\r\n    <property name=\"ASKED_ADD_EXTERNAL_FILES\" value=\"true\" />\r\n    <property name=\"ASKED_SHARE_PROJECT_CONFIGURATION_FILES\" value=\"true\" />\r\n    <property name=\"RunOnceActivity.OpenProjectViewOnStart\" value=\"true\" />\r\n    <property name=\"RunOnceActivity.ShowReadmeOnStart\" value=\"true\" />\r\n    <property name=\"SHARE_PROJECT_CONFIGURATION_FILES\" value=\"true\" />\r\n    <property name=\"WebServerToolWindowFactoryState\" value=\"false\" />\r\n    <property name=\"last_opened_file_path\" value=\"$PROJECT_DIR$/../Sem1_Projects/MonteCarlo/middle_square_method.py\" />\r\n    <property name=\"node.js.detected.package.eslint\" value=\"true\" />\r\n    <property name=\"node.js.detected.package.tslint\" value=\"true\" />\r\n    <property name=\"node.js.selected.package.eslint\" value=\"(autodetect)\" />\r\n    <property name=\"node.js.selected.package.tslint\" value=\"(autodetect)\" />\r\n    <property name=\"settings.editor.selected.configurable\" value=\"preferences.pluginManager\" />\r\n  </component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"D:\\Studia\\MoCaDR_proj1\" />\r\n    </key>\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"D:\\Studia\\MoCaDR_proj1\\src\" />\r\n      <recent name=\"D:\\Studia\\MoCaDR_proj1\\Report\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\" selected=\"Python.a\">\r\n    <configuration name=\"test\" type=\"LATEX_RUN_CONFIGURATION\" factoryName=\"LaTeX configuration factory\">\r\n      <texify>\r\n        <compiler>PDFLATEX</compiler>\r\n        <compiler-path />\r\n        <sumatra-path />\r\n        <pdf-viewer>SUMATRA</pdf-viewer>\r\n        <viewer-command />\r\n        <compiler-arguments />\r\n        <envs />\r\n        <main-file>$PROJECT_DIR$/Report/test.tex</main-file>\r\n        <output-path>$PROJECT_DIR$/Report/out</output-path>\r\n        <auxil-path>$PROJECT_DIR$/Report/auxil</auxil-path>\r\n        <compile-twice>false</compile-twice>\r\n        <output-format>PDF</output-format>\r\n        <latex-distribution>MIKTEX</latex-distribution>\r\n        <has-been-run>true</has-been-run>\r\n        <bib-run-config>[]</bib-run-config>\r\n        <makeindex-run-config>[]</makeindex-run-config>\r\n      </texify>\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"a\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"MoCaDR_proj1\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/src\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/src/a.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"algorithm_functions\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"MoCaDR_proj1\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/src\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/src/algorithm_functions.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"manipulating_datasets\" type=\"PythonConfigurationType\" factoryName=\"Python\" nameIsGenerated=\"true\">\r\n      <module name=\"MoCaDR_proj1\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"D:\\Studia\\MoCaDR_proj1\\src\\manipulating_datasets.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"performing_algorithms (1)\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"MoCaDR_proj1\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/src\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/src/performing_algorithms.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"performing_algorithms\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"MoCaDR_proj1\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/src\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"D:\\Studia\\MoCaDR_proj1\\src\\performing_algorithms.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"splitting_manipulating_data (1)\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"MoCaDR_proj1\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/src\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/src/splitting_manipulating_data.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <list>\r\n      <item itemvalue=\"LaTeX.test\" />\r\n      <item itemvalue=\"Python.manipulating_datasets\" />\r\n      <item itemvalue=\"Python.performing_algorithms\" />\r\n      <item itemvalue=\"Python.splitting_manipulating_data (1)\" />\r\n      <item itemvalue=\"Python.performing_algorithms (1)\" />\r\n      <item itemvalue=\"Python.algorithm_functions\" />\r\n      <item itemvalue=\"Python.a\" />\r\n    </list>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Python.a\" />\r\n        <item itemvalue=\"Python.performing_algorithms (1)\" />\r\n        <item itemvalue=\"Python.splitting_manipulating_data (1)\" />\r\n        <item itemvalue=\"Python.algorithm_functions\" />\r\n        <item itemvalue=\"Python.performing_algorithms\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"SvnConfiguration\">\r\n    <configuration>C:\\Users\\dmika\\AppData\\Roaming\\Subversion</configuration>\r\n  </component>\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"62d33fe8-2ec7-4d31-9bba-7fa36bc76fcb\" name=\"Changes\" comment=\"\" />\r\n      <created>1646774751311</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1646774751311</updated>\r\n      <workItem from=\"1646774754054\" duration=\"26000\" />\r\n      <workItem from=\"1646774814002\" duration=\"835000\" />\r\n      <workItem from=\"1646775670059\" duration=\"47000\" />\r\n      <workItem from=\"1646775727774\" duration=\"757000\" />\r\n      <workItem from=\"1646816479175\" duration=\"461000\" />\r\n      <workItem from=\"1646896158453\" duration=\"762000\" />\r\n      <workItem from=\"1646896945682\" duration=\"630000\" />\r\n      <workItem from=\"1646897595717\" duration=\"2651000\" />\r\n      <workItem from=\"1646900622776\" duration=\"425000\" />\r\n      <workItem from=\"1646915517163\" duration=\"449000\" />\r\n      <workItem from=\"1646915983800\" duration=\"240000\" />\r\n      <workItem from=\"1646916258164\" duration=\"389000\" />\r\n      <workItem from=\"1646916663441\" duration=\"393000\" />\r\n      <workItem from=\"1646933050771\" duration=\"1105000\" />\r\n      <workItem from=\"1646936230049\" duration=\"1064000\" />\r\n      <workItem from=\"1647027781891\" duration=\"1279000\" />\r\n      <workItem from=\"1647071928401\" duration=\"2390000\" />\r\n      <workItem from=\"1647181792640\" duration=\"2955000\" />\r\n      <workItem from=\"1647276453225\" duration=\"264000\" />\r\n      <workItem from=\"1647276734574\" duration=\"7738000\" />\r\n      <workItem from=\"1647331415050\" duration=\"71000\" />\r\n      <workItem from=\"1647531959133\" duration=\"276000\" />\r\n      <workItem from=\"1647532253804\" duration=\"33000\" />\r\n      <workItem from=\"1647532314901\" duration=\"3523000\" />\r\n      <workItem from=\"1647808987031\" duration=\"154000\" />\r\n      <workItem from=\"1647861875451\" duration=\"2898000\" />\r\n      <workItem from=\"1647864822646\" duration=\"651000\" />\r\n      <workItem from=\"1647868447233\" duration=\"3792000\" />\r\n      <workItem from=\"1647876840698\" duration=\"75000\" />\r\n      <workItem from=\"1647894778296\" duration=\"2195000\" />\r\n      <workItem from=\"1647979682475\" duration=\"3043000\" />\r\n      <workItem from=\"1648054754944\" duration=\"5401000\" />\r\n      <workItem from=\"1648322414443\" duration=\"880000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"a\">\r\n      <created>1646775274557</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646775274557</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"init commit\">\r\n      <created>1646775361377</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646775361377</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"init commit\">\r\n      <created>1646775521666</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646775521666</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"init commit\">\r\n      <created>1646775784756</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646775784756</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"init commit\">\r\n      <created>1646775870305</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646775870305</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"Adding dataset\">\r\n      <created>1646816860800</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646816860800</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"Setting up LaTeX\">\r\n      <created>1646898995949</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646898995949</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00008\" summary=\"Setting up LaTeX\">\r\n      <created>1646900639924</created>\r\n      <option name=\"number\" value=\"00008\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646900639924</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00009\" summary=\"Cleaning data\">\r\n      <created>1646934068924</created>\r\n      <option name=\"number\" value=\"00009\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646934068924</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00010\" summary=\"Cleaning data\">\r\n      <created>1647028888721</created>\r\n      <option name=\"number\" value=\"00010\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647028888721</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00011\" summary=\"Cleaning data\">\r\n      <created>1647029054319</created>\r\n      <option name=\"number\" value=\"00011\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647029054319</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00012\" summary=\"Tamarka testing\">\r\n      <created>1647163191686</created>\r\n      <option name=\"number\" value=\"00012\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00012\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647163191686</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00013\" summary=\"Experimenting with 'NaN' values\">\r\n      <created>1647168883206</created>\r\n      <option name=\"number\" value=\"00013\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00013\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647168883206</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00014\" summary=\"Experimenting with 'NaN' values\">\r\n      <created>1647175373237</created>\r\n      <option name=\"number\" value=\"00014\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00014\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647175373237</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00015\" summary=\"Removing duplicated packages\">\r\n      <created>1647175629524</created>\r\n      <option name=\"number\" value=\"00015\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00015\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647175629524</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00016\" summary=\"Testing methods\">\r\n      <created>1647184013664</created>\r\n      <option name=\"number\" value=\"00016\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00016\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647184013664</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00017\" summary=\"Testing methods\">\r\n      <created>1647184756535</created>\r\n      <option name=\"number\" value=\"00017\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00017\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647184756535</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00018\" summary=\"Testing SVD1\">\r\n      <created>1647284557846</created>\r\n      <option name=\"number\" value=\"00018\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00018\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647284557846</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00019\" summary=\"Creating functions for imputation\">\r\n      <created>1647865447166</created>\r\n      <option name=\"number\" value=\"00019\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00019\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647865447166</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00020\" summary=\"Restults for different r\">\r\n      <created>1647876877198</created>\r\n      <option name=\"number\" value=\"00020\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00020\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647876877198</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00021\" summary=\"Restults for different r\">\r\n      <created>1647895954850</created>\r\n      <option name=\"number\" value=\"00021\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00021\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647895954850</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00022\" summary=\"Implementing NMF and SVD2\">\r\n      <created>1648060465122</created>\r\n      <option name=\"number\" value=\"00022\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00022\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1648060465122</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"23\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <option name=\"ADD_EXTERNAL_FILES_SILENTLY\" value=\"true\" />\r\n    <MESSAGE value=\"a\" />\r\n    <MESSAGE value=\"init commit\" />\r\n    <MESSAGE value=\"Adding dataset\" />\r\n    <MESSAGE value=\"Setting up LaTeX\" />\r\n    <MESSAGE value=\"Cleaning data\" />\r\n    <MESSAGE value=\"Tamarka testing\" />\r\n    <MESSAGE value=\"Experimenting with 'NaN' values\" />\r\n    <MESSAGE value=\"Removing duplicated packages\" />\r\n    <MESSAGE value=\"Testing methods\" />\r\n    <MESSAGE value=\"Testing SVD1\" />\r\n    <MESSAGE value=\"Creating functions for imputation\" />\r\n    <MESSAGE value=\"Restults for different r\" />\r\n    <MESSAGE value=\"Implementing NMF and SVD2\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Implementing NMF and SVD2\" />\r\n  </component>\r\n  <component name=\"com.intellij.coverage.CoverageDataManagerImpl\">\r\n    <SUITE FILE_PATH=\"coverage/main_py$algorithm_functions.coverage\" NAME=\"algorithm_functions Coverage Results\" MODIFIED=\"1647864470937\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/src\" />\r\n    <SUITE FILE_PATH=\"coverage/main_py$algorithms_script.coverage\" NAME=\"performing_algorithms Coverage Results\" MODIFIED=\"1647535849226\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/src\" />\r\n    <SUITE FILE_PATH=\"coverage/main_py$splitting_manipulating_data__1_.coverage\" NAME=\"splitting_manipulating_data (1) Coverage Results\" MODIFIED=\"1647870795349\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/src\" />\r\n    <SUITE FILE_PATH=\"coverage/main_py$a.coverage\" NAME=\"a Coverage Results\" MODIFIED=\"1648057368569\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/src\" />\r\n    <SUITE FILE_PATH=\"coverage/MoCaDR_proj1$splitting_data.coverage\" NAME=\"splitting_data Coverage Results\" MODIFIED=\"1647174411611\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\r\n    <SUITE FILE_PATH=\"coverage/main_py$performing_algorithms__1_.coverage\" NAME=\"performing_algorithms (1) Coverage Results\" MODIFIED=\"1648057220868\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/src\" />\r\n    <SUITE FILE_PATH=\"coverage/main_py$performing_algorithms.coverage\" NAME=\"performing_algorithms Coverage Results\" MODIFIED=\"1648365686686\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/src\" />\r\n  </component>\r\n</project>
--Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
--<+>UTF-8
--===================================================================
--diff --git a/.idea/workspace.xml b/.idea/workspace.xml
----- a/.idea/workspace.xml	(revision 8648d16f648d5151ffc24b7aa25c9e97e52d8edb)
--+++ b/.idea/workspace.xml	(date 1648625393208)
--@@ -4,10 +4,7 @@
--     <option name="autoReloadType" value="SELECTIVE" />
--   </component>
--   <component name="ChangeListManager">
---    <list default="true" id="62d33fe8-2ec7-4d31-9bba-7fa36bc76fcb" name="Changes" comment="Tuning weights to imputation">
---      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
---      <change beforePath="$PROJECT_DIR$/src/choosing_parameters.ipynb" beforeDir="false" afterPath="$PROJECT_DIR$/src/choosing_parameters.ipynb" afterDir="false" />
---    </list>
--+    <list default="true" id="62d33fe8-2ec7-4d31-9bba-7fa36bc76fcb" name="Changes" comment="Tuning weights to imputation" />
--     <option name="SHOW_DIALOG" value="false" />
--     <option name="HIGHLIGHT_CONFLICTS" value="true" />
--     <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
--@@ -439,7 +436,14 @@
--       <option name="project" value="LOCAL" />
--       <updated>1648060465122</updated>
--     </task>
---    <option name="localTasksCounter" value="23" />
--+    <task id="LOCAL-00023" summary="Tuning weights to imputation">
--+      <created>1648537021600</created>
--+      <option name="number" value="00023" />
--+      <option name="presentableId" value="LOCAL-00023" />
--+      <option name="project" value="LOCAL" />
--+      <updated>1648537021600</updated>
--+    </task>
--+    <option name="localTasksCounter" value="24" />
--     <servers />
--   </component>
--   <component name="TypeScriptGeneratedFilesManager">
--@@ -471,7 +475,8 @@
--     <MESSAGE value="Creating functions for imputation" />
--     <MESSAGE value="Restults for different r" />
--     <MESSAGE value="Implementing NMF and SVD2" />
---    <option name="LAST_COMMIT_MESSAGE" value="Implementing NMF and SVD2" />
--+    <MESSAGE value="Tuning weights to imputation" />
--+    <option name="LAST_COMMIT_MESSAGE" value="Tuning weights to imputation" />
--   </component>
--   <component name="com.intellij.coverage.CoverageDataManagerImpl">
--     <SUITE FILE_PATH="coverage/main_py$algorithm_functions.coverage" NAME="algorithm_functions Coverage Results" MODIFIED="1647864470937" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/src" />
-Index: .idea/shelf/Uncommitted_changes_before_Update_at_30_03_2022_09_29__Changes_.xml
-===================================================================
-diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_30_03_2022_09_29__Changes_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_30_03_2022_09_29__Changes_.xml
-deleted file mode 100644
---- a/.idea/shelf/Uncommitted_changes_before_Update_at_30_03_2022_09_29__Changes_.xml	(revision 8c957f84a0bd908bbbbcb775ce718ee3f8942589)
-+++ /dev/null	(revision 8c957f84a0bd908bbbbcb775ce718ee3f8942589)
-@@ -1,4 +0,0 @@
--<changelist name="Uncommitted_changes_before_Update_at_30_03_2022_09_29_[Changes]" date="1648625402427" recycled="true" deleted="true">
--  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_30_03_2022_09_29_[Changes]/shelved.patch" />
--  <option name="DESCRIPTION" value="Uncommitted changes before Update at 30.03.2022 09:29 [Changes]" />
--</changelist>
-\ No newline at end of file
-Index: .idea/workspace.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"62d33fe8-2ec7-4d31-9bba-7fa36bc76fcb\" name=\"Changes\" comment=\"2.04 report\">\r\n      <change afterPath=\"$PROJECT_DIR$/TODO.txt\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/MoCaDR_proj1.iml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/MoCaDR_proj1.iml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/misc.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/misc.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_05_04_2022_08_35__Changes_.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_05_04_2022_08_35__Changes_.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Report/report.synctex(busy)\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Report/report.tex\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Report/report.tex\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/auxil/report.aux\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/auxil/report.aux\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/auxil/report.log\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/auxil/report.log\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/out/report.pdf\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/out/report.pdf\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/presenting_results.ipynb\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/presenting_results.ipynb\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"RMarkdown.document\" />\r\n        <option value=\"Python Script\" />\r\n        <option value=\"Jupyter Notebook\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitSEFilterConfiguration\">\r\n    <file-type-list>\r\n      <filtered-out-file-type name=\"LOCAL_BRANCH\" />\r\n      <filtered-out-file-type name=\"REMOTE_BRANCH\" />\r\n      <filtered-out-file-type name=\"TAG\" />\r\n      <filtered-out-file-type name=\"COMMIT_BY_MESSAGE\" />\r\n    </file-type-list>\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"267VjyGJ9wr8oG7c6vyJzNQTvFk\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\">\r\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">\r\n    <property name=\"ASKED_ADD_EXTERNAL_FILES\" value=\"true\" />\r\n    <property name=\"ASKED_SHARE_PROJECT_CONFIGURATION_FILES\" value=\"true\" />\r\n    <property name=\"RunOnceActivity.OpenProjectViewOnStart\" value=\"true\" />\r\n    <property name=\"RunOnceActivity.ShowReadmeOnStart\" value=\"true\" />\r\n    <property name=\"SHARE_PROJECT_CONFIGURATION_FILES\" value=\"true\" />\r\n    <property name=\"WebServerToolWindowFactoryState\" value=\"false\" />\r\n    <property name=\"last_opened_file_path\" value=\"$PROJECT_DIR$\" />\r\n    <property name=\"node.js.detected.package.eslint\" value=\"true\" />\r\n    <property name=\"node.js.detected.package.tslint\" value=\"true\" />\r\n    <property name=\"node.js.selected.package.eslint\" value=\"(autodetect)\" />\r\n    <property name=\"node.js.selected.package.tslint\" value=\"(autodetect)\" />\r\n    <property name=\"settings.editor.selected.configurable\" value=\"org.jetbrains.plugins.notebooks.jupyter.connections.configuration.JupyterServerConfigurable\" />\r\n  </component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"D:\\Studia\\MoCaDR_proj1\" />\r\n    </key>\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"D:\\Studia\\MoCaDR_proj1\\Report\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\" selected=\"LaTeX.report (1)\">\r\n    <configuration name=\"report (1)\" type=\"LATEX_RUN_CONFIGURATION\" factoryName=\"LaTeX configuration factory\" temporary=\"true\">\r\n      <texify>\r\n        <compiler>PDFLATEX</compiler>\r\n        <compiler-path />\r\n        <sumatra-path />\r\n        <pdf-viewer>SUMATRA</pdf-viewer>\r\n        <viewer-command />\r\n        <compiler-arguments />\r\n        <envs />\r\n        <main-file>$PROJECT_DIR$/Report/report.tex</main-file>\r\n        <output-path>$PROJECT_DIR$/out</output-path>\r\n        <auxil-path>$PROJECT_DIR$/auxil</auxil-path>\r\n        <compile-twice>false</compile-twice>\r\n        <output-format>PDF</output-format>\r\n        <latex-distribution>MIKTEX</latex-distribution>\r\n        <has-been-run>true</has-been-run>\r\n        <bib-run-config>[]</bib-run-config>\r\n        <makeindex-run-config>[]</makeindex-run-config>\r\n      </texify>\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"report\" type=\"LATEX_RUN_CONFIGURATION\" factoryName=\"LaTeX configuration factory\" singleton=\"false\">\r\n      <texify>\r\n        <compiler>PDFLATEX</compiler>\r\n        <compiler-path />\r\n        <sumatra-path />\r\n        <pdf-viewer>SUMATRA</pdf-viewer>\r\n        <viewer-command />\r\n        <compiler-arguments />\r\n        <envs />\r\n        <main-file />\r\n        <output-path>$PROJECT_DIR$/Report/out</output-path>\r\n        <auxil-path>$PROJECT_DIR$/Report/auxil</auxil-path>\r\n        <compile-twice>false</compile-twice>\r\n        <output-format>PDF</output-format>\r\n        <latex-distribution>MIKTEX</latex-distribution>\r\n        <has-been-run>true</has-been-run>\r\n        <bib-run-config>[]</bib-run-config>\r\n        <makeindex-run-config>[]</makeindex-run-config>\r\n      </texify>\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"manipulating_datasets\" type=\"PythonConfigurationType\" factoryName=\"Python\" nameIsGenerated=\"true\">\r\n      <module name=\"MoCaDR_proj1\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"D:\\Studia\\MoCaDR_proj1\\manipulating_datasets.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"performing_algorithms\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"MoCaDR_proj1\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/src\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/src/performing_algorithms.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"splitting_data\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"MoCaDR_proj1\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/splitting_data.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <list>\r\n      <item itemvalue=\"LaTeX.report\" />\r\n      <item itemvalue=\"LaTeX.report (1)\" />\r\n      <item itemvalue=\"Python.manipulating_datasets\" />\r\n      <item itemvalue=\"Python.splitting_data\" />\r\n      <item itemvalue=\"Python.performing_algorithms\" />\r\n    </list>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"LaTeX.report (1)\" />\r\n        <item itemvalue=\"Python.performing_algorithms\" />\r\n        <item itemvalue=\"Python.splitting_data\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"SvnConfiguration\">\r\n    <configuration>C:\\Users\\dmika\\AppData\\Roaming\\Subversion</configuration>\r\n  </component>\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"62d33fe8-2ec7-4d31-9bba-7fa36bc76fcb\" name=\"Changes\" comment=\"\" />\r\n      <created>1646774751311</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1646774751311</updated>\r\n      <workItem from=\"1646774754054\" duration=\"26000\" />\r\n      <workItem from=\"1646774814002\" duration=\"835000\" />\r\n      <workItem from=\"1646775670059\" duration=\"47000\" />\r\n      <workItem from=\"1646775727774\" duration=\"757000\" />\r\n      <workItem from=\"1646816479175\" duration=\"461000\" />\r\n      <workItem from=\"1646896158453\" duration=\"762000\" />\r\n      <workItem from=\"1646896945682\" duration=\"630000\" />\r\n      <workItem from=\"1646897595717\" duration=\"2651000\" />\r\n      <workItem from=\"1646900622776\" duration=\"425000\" />\r\n      <workItem from=\"1646915517163\" duration=\"449000\" />\r\n      <workItem from=\"1646915983800\" duration=\"240000\" />\r\n      <workItem from=\"1646916258164\" duration=\"389000\" />\r\n      <workItem from=\"1646916663441\" duration=\"393000\" />\r\n      <workItem from=\"1646933050771\" duration=\"1105000\" />\r\n      <workItem from=\"1646936230049\" duration=\"1064000\" />\r\n      <workItem from=\"1647027781891\" duration=\"1279000\" />\r\n      <workItem from=\"1647071928401\" duration=\"2390000\" />\r\n      <workItem from=\"1647181792640\" duration=\"2955000\" />\r\n      <workItem from=\"1647276453225\" duration=\"264000\" />\r\n      <workItem from=\"1647276734574\" duration=\"7710000\" />\r\n      <workItem from=\"1647699257802\" duration=\"1713000\" />\r\n      <workItem from=\"1647774897107\" duration=\"5656000\" />\r\n      <workItem from=\"1648326375030\" duration=\"985000\" />\r\n      <workItem from=\"1648327394372\" duration=\"485000\" />\r\n      <workItem from=\"1648481964443\" duration=\"4660000\" />\r\n      <workItem from=\"1648576643019\" duration=\"4941000\" />\r\n      <workItem from=\"1648885683106\" duration=\"2799000\" />\r\n      <workItem from=\"1649100586613\" duration=\"401000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"a\">\r\n      <created>1646775274557</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646775274557</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"init commit\">\r\n      <created>1646775361377</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646775361377</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"init commit\">\r\n      <created>1646775521666</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646775521666</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"init commit\">\r\n      <created>1646775784756</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646775784756</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"init commit\">\r\n      <created>1646775870305</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646775870305</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"Adding dataset\">\r\n      <created>1646816860800</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646816860800</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"Setting up LaTeX\">\r\n      <created>1646898995949</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646898995949</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00008\" summary=\"Setting up LaTeX\">\r\n      <created>1646900639924</created>\r\n      <option name=\"number\" value=\"00008\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646900639924</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00009\" summary=\"Cleaning data\">\r\n      <created>1646934068924</created>\r\n      <option name=\"number\" value=\"00009\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646934068924</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00010\" summary=\"Cleaning data\">\r\n      <created>1647028888721</created>\r\n      <option name=\"number\" value=\"00010\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647028888721</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00011\" summary=\"Cleaning data\">\r\n      <created>1647029054319</created>\r\n      <option name=\"number\" value=\"00011\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647029054319</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00012\" summary=\"Tamarka testing\">\r\n      <created>1647163191686</created>\r\n      <option name=\"number\" value=\"00012\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00012\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647163191686</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00013\" summary=\"Experimenting with 'NaN' values\">\r\n      <created>1647168883206</created>\r\n      <option name=\"number\" value=\"00013\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00013\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647168883206</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00014\" summary=\"Experimenting with 'NaN' values\">\r\n      <created>1647175373237</created>\r\n      <option name=\"number\" value=\"00014\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00014\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647175373237</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00015\" summary=\"Removing duplicated packages\">\r\n      <created>1647175629524</created>\r\n      <option name=\"number\" value=\"00015\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00015\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647175629524</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00016\" summary=\"Testing methods\">\r\n      <created>1647184013664</created>\r\n      <option name=\"number\" value=\"00016\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00016\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647184013664</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00017\" summary=\"Testing methods\">\r\n      <created>1647184756535</created>\r\n      <option name=\"number\" value=\"00017\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00017\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647184756535</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00018\" summary=\"SVD opis Tamarka\">\r\n      <created>1647698852885</created>\r\n      <option name=\"number\" value=\"00018\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00018\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647698852885</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00019\" summary=\"SVD opis Tamarka\">\r\n      <created>1647699044053</created>\r\n      <option name=\"number\" value=\"00019\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00019\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647699044053</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00020\" summary=\"SVD opis Tamarka\">\r\n      <created>1647699173625</created>\r\n      <option name=\"number\" value=\"00020\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00020\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647699173625</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00021\" summary=\"Testing SVD2\">\r\n      <created>1648327858794</created>\r\n      <option name=\"number\" value=\"00021\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00021\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1648327858794</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"22\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <option name=\"ADD_EXTERNAL_FILES_SILENTLY\" value=\"true\" />\r\n    <MESSAGE value=\"a\" />\r\n    <MESSAGE value=\"init commit\" />\r\n    <MESSAGE value=\"Adding dataset\" />\r\n    <MESSAGE value=\"Setting up LaTeX\" />\r\n    <MESSAGE value=\"Cleaning data\" />\r\n    <MESSAGE value=\"Tamarka testing\" />\r\n    <MESSAGE value=\"Experimenting with 'NaN' values\" />\r\n    <MESSAGE value=\"Removing duplicated packages\" />\r\n    <MESSAGE value=\"Testing methods\" />\r\n    <MESSAGE value=\"SVD opis Tamarka\" />\r\n    <MESSAGE value=\"Testing SVD2\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Testing SVD2\" />\r\n  </component>\r\n  <component name=\"com.intellij.coverage.CoverageDataManagerImpl\">\r\n    <SUITE FILE_PATH=\"coverage/main_py$performing_algorithms.coverage\" NAME=\"performing_algorithms Coverage Results\" MODIFIED=\"1647784050444\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/src\" />\r\n    <SUITE FILE_PATH=\"coverage/MoCaDR_proj1$splitting_data.coverage\" NAME=\"splitting_data Coverage Results\" MODIFIED=\"1647174411611\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\r\n  </component>\r\n</project>
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/.idea/workspace.xml b/.idea/workspace.xml
---- a/.idea/workspace.xml	(revision 8c957f84a0bd908bbbbcb775ce718ee3f8942589)
-+++ b/.idea/workspace.xml	(date 1649444947431)
-@@ -4,19 +4,7 @@
-     <option name="autoReloadType" value="SELECTIVE" />
-   </component>
-   <component name="ChangeListManager">
--    <list default="true" id="62d33fe8-2ec7-4d31-9bba-7fa36bc76fcb" name="Changes" comment="2.04 report">
--      <change afterPath="$PROJECT_DIR$/TODO.txt" afterDir="false" />
--      <change beforePath="$PROJECT_DIR$/.idea/MoCaDR_proj1.iml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/MoCaDR_proj1.iml" afterDir="false" />
--      <change beforePath="$PROJECT_DIR$/.idea/misc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/misc.xml" afterDir="false" />
--      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_05_04_2022_08_35__Changes_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_05_04_2022_08_35__Changes_.xml" afterDir="false" />
--      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
--      <change beforePath="$PROJECT_DIR$/Report/report.synctex(busy)" beforeDir="false" />
--      <change beforePath="$PROJECT_DIR$/Report/report.tex" beforeDir="false" afterPath="$PROJECT_DIR$/Report/report.tex" afterDir="false" />
--      <change beforePath="$PROJECT_DIR$/auxil/report.aux" beforeDir="false" afterPath="$PROJECT_DIR$/auxil/report.aux" afterDir="false" />
--      <change beforePath="$PROJECT_DIR$/auxil/report.log" beforeDir="false" afterPath="$PROJECT_DIR$/auxil/report.log" afterDir="false" />
--      <change beforePath="$PROJECT_DIR$/out/report.pdf" beforeDir="false" afterPath="$PROJECT_DIR$/out/report.pdf" afterDir="false" />
--      <change beforePath="$PROJECT_DIR$/src/presenting_results.ipynb" beforeDir="false" afterPath="$PROJECT_DIR$/src/presenting_results.ipynb" afterDir="false" />
--    </list>
-+    <list default="true" id="62d33fe8-2ec7-4d31-9bba-7fa36bc76fcb" name="Changes" comment="planning" />
-     <option name="SHOW_DIALOG" value="false" />
-     <option name="HIGHLIGHT_CONFLICTS" value="true" />
-     <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
-@@ -386,7 +374,14 @@
-       <option name="project" value="LOCAL" />
-       <updated>1648327858794</updated>
-     </task>
--    <option name="localTasksCounter" value="22" />
-+    <task id="LOCAL-00022" summary="planning">
-+      <created>1649230370638</created>
-+      <option name="number" value="00022" />
-+      <option name="presentableId" value="LOCAL-00022" />
-+      <option name="project" value="LOCAL" />
-+      <updated>1649230370638</updated>
-+    </task>
-+    <option name="localTasksCounter" value="23" />
-     <servers />
-   </component>
-   <component name="TypeScriptGeneratedFilesManager">
-@@ -416,7 +411,8 @@
-     <MESSAGE value="Testing methods" />
-     <MESSAGE value="SVD opis Tamarka" />
-     <MESSAGE value="Testing SVD2" />
--    <option name="LAST_COMMIT_MESSAGE" value="Testing SVD2" />
-+    <MESSAGE value="planning" />
-+    <option name="LAST_COMMIT_MESSAGE" value="planning" />
-   </component>
-   <component name="com.intellij.coverage.CoverageDataManagerImpl">
-     <SUITE FILE_PATH="coverage/main_py$performing_algorithms.coverage" NAME="performing_algorithms Coverage Results" MODIFIED="1647784050444" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/src" />
Index: src/syf2.ipynb
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\r\n \"cells\": [\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 2,\r\n   \"metadata\": {\r\n    \"collapsed\": true\r\n   },\r\n   \"outputs\": [],\r\n   \"source\": [\r\n    \"import numpy as np\\n\",\r\n    \"\\n\",\r\n    \"from src.algorithm_functions import *\\n\",\r\n    \"import random\"\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 164,\r\n   \"outputs\": [],\r\n   \"source\": [\r\n    \"train_df, test_array = split_ratings('Datasets/ratings.csv')\\n\",\r\n    \"train_array = np.array(train_df)\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%%\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 171,\r\n   \"outputs\": [],\r\n   \"source\": [\r\n    \"def perform_svd22(na_indx, train_array: np.ndarray, test_array: np.ndarray, r: int,\\n\",\r\n    \"                      max_iter: int = 100, min_diff: float = 0.0089):\\n\",\r\n    \"\\n\",\r\n    \"    Z_i = copy.deepcopy(train_array)\\n\",\r\n    \"    m = copy.deepcopy(train_array[~na_indx])\\n\",\r\n    \"    i = 0\\n\",\r\n    \"    diff = 10 ** 5\\n\",\r\n    \"\\n\",\r\n    \"    while (i < max_iter) & (min_diff < diff):\\n\",\r\n    \"        Z_i[~na_indx] = np.array(m).reshape(-1)\\n\",\r\n    \"        svd = TruncatedSVD(n_components=r)\\n\",\r\n    \"        svd.fit(Z_i)\\n\",\r\n    \"        Sigma2 = np.diag(svd.singular_values_)\\n\",\r\n    \"        VT = svd.components_\\n\",\r\n    \"        W = svd.transform(train_array) / svd.singular_values_\\n\",\r\n    \"        H = np.dot(Sigma2, VT)\\n\",\r\n    \"        Z_ii = np.dot(W, H)\\n\",\r\n    \"        diff = ((Z_ii - Z_i) ** 2).sum() / (Z_ii.shape[0] * Z_ii.shape[1])\\n\",\r\n    \"        Z_i = copy.deepcopy(Z_ii)\\n\",\r\n    \"        i += 1\\n\",\r\n    \"\\n\",\r\n    \"    return Z_ii\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%%\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 174,\r\n   \"outputs\": [],\r\n   \"source\": [\r\n    \"train_array = fillna_means_weighted(train_df, 0.25)\\n\",\r\n    \"a = perform_svd22(train_df.isna(), train_array, test_array, r=8, min_diff=0.0086)\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%%\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 176,\r\n   \"outputs\": [\r\n    {\r\n     \"data\": {\r\n      \"text/plain\": \"0.8638018475024429\"\r\n     },\r\n     \"execution_count\": 176,\r\n     \"metadata\": {},\r\n     \"output_type\": \"execute_result\"\r\n    }\r\n   ],\r\n   \"source\": [\r\n    \"calc_rmse(test_array, a)\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%%\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 182,\r\n   \"outputs\": [\r\n    {\r\n     \"data\": {\r\n      \"text/plain\": \"0.9121871967702717\"\r\n     },\r\n     \"execution_count\": 182,\r\n     \"metadata\": {},\r\n     \"output_type\": \"execute_result\"\r\n    }\r\n   ],\r\n   \"source\": [\r\n    \"a[a > 5] = 5.0\\n\",\r\n    \"b = np.round(a)\\n\",\r\n    \"calc_rmse(test_array, b)\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%%\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 131,\r\n   \"outputs\": [],\r\n   \"source\": [\r\n    \"lada = 0.1\\n\",\r\n    \"r = 30\\n\",\r\n    \"\\n\",\r\n    \"n, d = train_array.shape\\n\",\r\n    \"eta = 0.02\\n\",\r\n    \"min_diff = 1e-9\\n\",\r\n    \"max_iter = 10000\\n\",\r\n    \"W = np.matrix(np.full((n, r), 2/np.sqrt(r)), dtype=np.longdouble)\\n\",\r\n    \"H = np.matrix(np.full((r, d), 2/np.sqrt(r)), dtype=np.longdouble)\\n\",\r\n    \"possible_ix = np.argwhere(train_df.notnull().values).tolist()\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%%\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 132,\r\n   \"outputs\": [\r\n    {\r\n     \"data\": {\r\n      \"text/plain\": \"2.0296735096464884\"\r\n     },\r\n     \"execution_count\": 132,\r\n     \"metadata\": {},\r\n     \"output_type\": \"execute_result\"\r\n    }\r\n   ],\r\n   \"source\": [\r\n    \"W_prev = copy.deepcopy(W)\\n\",\r\n    \"H_prev = copy.deepcopy(H)\\n\",\r\n    \"possible_ix = np.argwhere(train_df.notnull().values).tolist()\\n\",\r\n    \"diff_W = min_diff + 1\\n\",\r\n    \"diff_H = min_diff + 1\\n\",\r\n    \"rmse_prev = 1000\\n\",\r\n    \"rmse = 0\\n\",\r\n    \"iter = 0\\n\",\r\n    \"\\n\",\r\n    \"while (iter < max_iter) & (min_diff < diff_W) & (min_diff < diff_H):\\n\",\r\n    \"    ix = random.sample(range(0, len(possible_ix)), 1)\\n\",\r\n    \"    i, j = possible_ix[ix[0]]\\n\",\r\n    \"    grad_w = -2 * ((train_array[i, j] - np.float64(W[i, :] * H[:, j])) * H[:, j]).T + 2 * lada * W[i, :]\\n\",\r\n    \"    grad_h = -2 * ((train_array[i, j] - np.float64(W[i, :] * H[:, j])) * W[i, :]).T + 2 * lada * H[:, j]\\n\",\r\n    \"    W[i, :] = W[i, :] - eta * grad_w\\n\",\r\n    \"    H[:, j] = H[:, j] - eta * grad_h\\n\",\r\n    \"    diff_W = np.abs(W - W_prev).sum() / (n * r)\\n\",\r\n    \"    diff_H = np.abs(H- H_prev).sum() / (r * d)\\n\",\r\n    \"    W_prev = copy.deepcopy(W)\\n\",\r\n    \"    H_prev = copy.deepcopy(H)\\n\",\r\n    \"    iter += 1\\n\",\r\n    \"\\n\",\r\n    \"Z_tilde = np.dot(W, H)\\n\",\r\n    \"calc_rmse_longdouble(test_array, Z_tilde)\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%%\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 133,\r\n   \"outputs\": [\r\n    {\r\n     \"data\": {\r\n      \"text/plain\": \"1877\"\r\n     },\r\n     \"execution_count\": 133,\r\n     \"metadata\": {},\r\n     \"output_type\": \"execute_result\"\r\n    }\r\n   ],\r\n   \"source\": [\r\n    \"iter\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%%\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 163,\r\n   \"outputs\": [\r\n    {\r\n     \"data\": {\r\n      \"text/plain\": \"(1.0142747145371265, 1758)\"\r\n     },\r\n     \"execution_count\": 163,\r\n     \"metadata\": {},\r\n     \"output_type\": \"execute_result\"\r\n    }\r\n   ],\r\n   \"source\": [\r\n    \"global_mean = train_df.mean().mean()\\n\",\r\n    \"W = np.matrix(np.full((n, r), np.sqrt(global_mean) / np.sqrt(r)), dtype=np.longdouble)\\n\",\r\n    \"H = np.matrix(np.full((r, d), np.sqrt(global_mean) / np.sqrt(r)), dtype=np.longdouble)\\n\",\r\n    \"a = perform_sgd(train_df, test_array, W, H, 80, 0.1, 0.01)\\n\",\r\n    \"a\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%%\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 9,\r\n   \"outputs\": [],\r\n   \"source\": [\r\n    \"(min_diff < diff_W) & (min_diff < diff_H)\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%%\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 150,\r\n   \"outputs\": [],\r\n   \"source\": [\r\n    \"def perform_sgd(train_df, test_array, init_W, init_H, r: int, lada: float, learning_rate: float,\\n\",\r\n    \"                max_iter: int = 10000, min_diff: float = 5e-10):\\n\",\r\n    \"\\n\",\r\n    \"    train_array = np.array(train_df)\\n\",\r\n    \"    n, d = train_array.shape\\n\",\r\n    \"    W = np.matrix(init_W, dtype=np.longdouble)\\n\",\r\n    \"    H = np.matrix(init_H, dtype=np.longdouble)\\n\",\r\n    \"    W_prev = copy.deepcopy(W)\\n\",\r\n    \"    H_prev = copy.deepcopy(H)\\n\",\r\n    \"    possible_ix = np.argwhere(train_df.notnull().values).tolist()\\n\",\r\n    \"    diff_W = min_diff + 1\\n\",\r\n    \"    diff_H = min_diff + 1\\n\",\r\n    \"    iter = 0\\n\",\r\n    \"\\n\",\r\n    \"    while (iter < max_iter) & (min_diff < diff_W) & (min_diff < diff_H):\\n\",\r\n    \"        ix = random.sample(range(0, len(possible_ix)), 1)\\n\",\r\n    \"        i, j = possible_ix[ix[0]]\\n\",\r\n    \"        grad_w = -2 * ((train_array[i, j] - np.float64(W[i, :] * H[:, j])) * H[:, j]).T + 2 * lada * W[i, :]\\n\",\r\n    \"        grad_h = -2 * ((train_array[i, j] - np.float64(W[i, :] * H[:, j])) * W[i, :]).T + 2 * lada * H[:, j]\\n\",\r\n    \"        W[i, :] = W[i, :] - learning_rate * grad_w\\n\",\r\n    \"        H[:, j] = H[:, j] - learning_rate * grad_h\\n\",\r\n    \"        diff_W = np.abs(W - W_prev).sum() / (n * r)\\n\",\r\n    \"        diff_H = np.abs(H - H_prev).sum() / (r * d)\\n\",\r\n    \"        W_prev = copy.deepcopy(W)\\n\",\r\n    \"        H_prev = copy.deepcopy(H)\\n\",\r\n    \"        iter += 1\\n\",\r\n    \"\\n\",\r\n    \"    Z_tilde = np.dot(W, H)\\n\",\r\n    \"    rmse = calc_rmse_longdouble(test_array, Z_tilde)\\n\",\r\n    \"\\n\",\r\n    \"    return rmse, iter\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%%\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": null,\r\n   \"outputs\": [],\r\n   \"source\": [],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%%\\n\"\r\n    }\r\n   }\r\n  }\r\n ],\r\n \"metadata\": {\r\n  \"kernelspec\": {\r\n   \"display_name\": \"Python 3\",\r\n   \"language\": \"python\",\r\n   \"name\": \"python3\"\r\n  },\r\n  \"language_info\": {\r\n   \"codemirror_mode\": {\r\n    \"name\": \"ipython\",\r\n    \"version\": 2\r\n   },\r\n   \"file_extension\": \".py\",\r\n   \"mimetype\": \"text/x-python\",\r\n   \"name\": \"python\",\r\n   \"nbconvert_exporter\": \"python\",\r\n   \"pygments_lexer\": \"ipython2\",\r\n   \"version\": \"2.7.6\"\r\n  }\r\n },\r\n \"nbformat\": 4,\r\n \"nbformat_minor\": 0\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/syf2.ipynb b/src/syf2.ipynb
--- a/src/syf2.ipynb	
+++ b/src/syf2.ipynb	
@@ -4,7 +4,10 @@
    "cell_type": "code",
    "execution_count": 2,
    "metadata": {
-    "collapsed": true
+    "collapsed": true,
+    "pycharm": {
+     "name": "#%%\n"
+    }
    },
    "outputs": [],
    "source": [
